<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 转载 | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/zhuan-zai/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-04-09T17:09:33+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初识block]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/08/block/"/>
    <updated>2014-04-08T16:41:39+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/08/block</id>
    <content type="html"><![CDATA[<h2><strong><span style="color: #339966;">前言</span></strong></h2>

<p>本文是小弟从<strong><span style="color: #339966;">破船</span></strong>大哥那转载来的，感觉比较经典，所以就收藏了，原文<a href="http://beyondvincent.com/blog/2013/07/08/98/">出处</a></p>

<p><img class="alignnone size-full wp-image-1563" alt="blocks_2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks_2x.png" width="1140" height="420" /></p>

<hr />

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/blocks.html" target="_blank"><span style="color: #339966; text-decoration: underline;">rypress</span></a></span></span></strong></p>

<!--more-->


<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>本周末微博上朋友发了一个关于block的MV，只能说老外太逗了。大家也可以去看看怎么回事：<a href="http://blog.bignerdranch.com/3001-cocoa-got-blocks/" target="_blank"> <strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;">Cocoa Got Blocks</span></span></strong></a>。虽然之前也有接触过block，不过没有深入完整的学习过，借此机会来学习一下，顺便翻译几篇block相关的文章，本文是第一篇，算是block的入门。本文的最后延伸阅读给出了4篇相关文章，不出意外的话，本周大家能看到对应的中文版。</p>

<h2><strong><span style="color: #339966;">目录：</span></strong></h2>

<ul>
<li><strong><span style="color: #339966;">Block简介</span></strong></li>
<li><strong><span style="color: #339966;">Block的创建</span></strong></li>
<li><strong><span style="color: #339966;">不带参数的Block</span></strong></li>
<li><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></li>
<li><strong><span style="color: #339966;">修改非局部变量</span></strong></li>
<li><strong><span style="color: #339966;">Block作为函数的参数</span></strong></li>
<li><strong><span style="color: #339966;">定义Block类型</span></strong></li>
<li><strong><span style="color: #339966;">总结</span></strong></li>
<li><strong><span style="color: #339966;">延伸阅读</span></strong></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">Block简介</span></strong></h2>

<p>我们可以把Block当做Objective-C的匿名函数。Block允许开发者在两个对象之间将任意的语句当做数据进行传递，往往这要比引用定义在别处的函数直观。另外，block的实现具有封闭性(closure)，而又能够很容易获取上下文的相关状态信息。</p>

<hr />

<h2><strong><span style="color: #339966;">Block的创建</span></strong></h2>

<p>实际上，block使用了与<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html" target="_blank"><span style="color: #339966; text-decoration: underline;">函数</span></a></span></strong></span>相同的机制：可以像声明函数一样，来声明一个bock变量；可以利用定义一个函数的方法来定义一个block；也可以将block当做一个函数来调用。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // Declare the block variable
        double (^distanceFromRateAndTime)(double rate, double time);

        // Create and assign the block
        distanceFromRateAndTime = ^double(double rate, double time) {
            return rate * time;
        };
        // Call the block
        double dx = distanceFromRateAndTime(35, 1.5);

        NSLog(@"A car driving 35 mph will travel "
              @"%.2f miles in 1.5 hours.", dx);
    }
    return 0;
}</pre>


<p>在上面的代码中，利用插入符(^)将distanceFromRateAndTime变量标记为一个block。就像声明函数一样，需要包含返回值的类型，以及参数的类型，这样编译器才能安全的进行强制类型转换。插入符(^)跟指针(例如 int *aPointer)前面的星号(*)类似——只是在声明的时候需要使用，之后用法跟普通的变量一样。</p>

<p>block的定义本质上跟函数一样——只不过不需要函数名。block以签名字符串开始：<sup>double</sup>(double rate, double time)标示返回一个double，以及接收两个同样为double的参数(如果不需要返回值，可以忽略掉)。在签名后面是一个大括弧({})，在这个括弧里面可以编写任意的语句代码，这跟普通的函数一样。</p>

<p>当把block赋值给distanceFromRateAndTime后，我们就可以像调用函数一样调用这个变量了。</p>

<h2><strong><span style="color: #339966;">不带参数的Block</span></strong></h2>

<p>如果block不需要任何的参数，那么可以忽略掉参数列表。另外，在定义block的时候，返回值的类型也是可选的，所以这样情况下，block可以简写为^ { … }：</p>

<pre class="wp-code-highlight prettyprint linenums:1">double (^randomPercent)(void) = ^ {
    return (double)arc4random() / 4294967295;
};
NSLog(@"Gas tank is %.1f%% full",
      randomPercent() * 100);</pre>


<p>在上面的代码中，利用内置的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/arc4random.3.html" target="_blank"><span style="color: #339966; text-decoration: underline;">arc4random()</span></a></span></span></strong>方法返回一个32位的整型随机数——为了获得0-1之间的一个值，通过除以arc4random()方法能够获取到的最大值(4294967295)。</p>

<p>到现在为止，block看起来可能有点像利用一种复杂的方式来定义一个方法。事实上，block是被设计为闭包的(closure)——这就提供了一种新的、令人兴奋的编程方式。</p>

<h2><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></h2>

<p>在block内部，可以像普通函数一样访问数据：局部变量、传递给block的参数，全局变量/函数。并且由于block具有<span style="color: #ff0000;"><strong>闭包性</strong></span>，所以还能访问<strong><span style="color: #ff0000;">非局部变量(non-local variable)</span></strong>。非局部变量定义在block之外，但是在block内部有它的作用域。例如，getFullCarName可以使用定义在block前面的make变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord</pre>


<p>非局部变量会以const变量被拷贝并存储到block中，也就是说block对其是只读的。如果尝试在block内部给make变量赋值，会抛出编译器错误。</p>

<div id="attachment_1546" class="wp-caption alignnone" style="width: 340px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png"><img class="size-full wp-image-1546" alt="const-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png" width="330" height="170" /></a><p class="wp-caption-text">
    以const拷贝的方式访问非局部变量
  </p>
</div>


<p>&nbsp;</p>

<p>以const拷贝的方式访问非局部变量，意味着block实际上并不是真正的访问了非局部变量——只不过在block中创建了非局部变量的一个快照。当定义block时，无论非局部变量的值是什么，都将被冻结，并且block会一直使用这个值，即使在之后的代码中修改了非局部变量的值。下面通过代码来看看，在创建好block之后，修改make变量的值，会发生什么：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord

// Try changing the non-local variable (it won&#039;t change the block)
make = @"Porsche";
NSLog(@"%@", getFullCarName(@"911 Turbo")); // Honda 911 Turbo</pre>


<p>block的闭包性为block与上下文交互的时候带来极大的便利性，当block需要额外的数据时，可以避免使用参数——只需要简单的使用非局部变量即可。</p>

<h2><strong><span style="color: #339966;">修改非局部变量</span></strong></h2>

<p>冻结中的非局部变量是一个常量值，这也是一种默认的安全行为——因为这可以防止在block中的代码对非局部变量做了意外的修改。那么如果我们希望在block中对非局部变量值进行修改要如何做呢——用__block存储修饰符(storage modifier)来声明非局部变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block NSString *make = @"Honda";</pre>


<p>这将告诉block对非局部变量做引用处理，在block外部make变量和内部的make变量创建一个直接的链接(direct link)。现在就可以在block外部修改make，然后反应到block内部，反过来，也是一样。</p>

<div id="attachment_1547" class="wp-caption alignnone" style="width: 270px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png"><img class="size-full wp-image-1547" alt="mutable-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png" width="260" height="150" /></a><p class="wp-caption-text">
    通过引用的方式访问非局部变量
  </p>
</div>


<p>这跟普通函数中的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html#static-local-variables" target="_blank"><span style="color: #339966; text-decoration: underline;">静态局部变量(static local variable)</span></a></span></span></strong>类似，用__block修饰符声明的变量可以记录着block多次调用的结果。例如下面的代码创建了一个block，在block中对i进行累加。</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block int i = 0;
int (^count)(void) = ^ {
    i += 1;
    return i;
};
NSLog(@"%d", count());    // 1
NSLog(@"%d", count());    // 2
NSLog(@"%d", count());    // 3</pre>


<h2></h2>

<h2><strong><span style="color: #339966;">Block作为函数的参数</span></strong></h2>

<p>把block存储在变量中有时候非常有用，比如将其用作函数的参数。这可以解决类似函数指针能解决的问题，不过我们也可以定义内联的block，这样代码更加易读。<br/>
例如下面Car interface中声明了一个方法，该方法用来计算汽车的里程数。这里并没有强制要求调用者给该方法传递一个常量速度，相反可以改方法接收一个block——该block根据具体的时间来定义汽车的速度。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>上面代码中block的数据类型是double (^)(double time)，也就是说block的调用者需要传递一个double类型的参数，并且该block的返回值为double类型。注意：上面代码中的语法基本与本文开头介绍的block变量声明相同，只不过没有变量名字。<br/>
在函数的实现里面可以通过speedFunction来调用block。下面的示例通过算法计算出汽车行驶的大约距离。其中steps参数是由调用者确定的一个准确值。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.m
#import "Car.h"

@implementation Car

@synthesize odometer = _odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps {
    double dt = duration / numSteps;
    for (int i=1; i&lt;=numSteps; i++) {
        _odometer += speedFunction(i*dt) * dt;
    }
}

@end</pre>


<p>在下面的代码中，有一个main函数，在main函数中block定义在另一个函数的调用过程中。虽然理解其中的语法需要话几秒钟时间，不过这比起另外声明一个函数，再定义withVariableSpeed参数要更加直观。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;
#import "Car.h"

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        Car *theCar = [[Car alloc] init];

        // Drive for awhile with constant speed of 5.0 m/s
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);

        // Start accelerating at a rate of 1.0 m/s^2
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return time + 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);
    }
    return 0;
}</pre>


<p>上面利用一个简单的示例演示了block的通用性。在iOS的SDK中有许多API都利用了block的其它一些功能。<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/NSArray.html" target="_blank"><span style="color: #339966; text-decoration: underline;">NSArray</span></a></span></span></strong>的sortedArrayUsingComparator:方法可以使用一个block对元素进行排序，而<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/uiview/uiview.html" target="_blank"><span style="color: #339966; text-decoration: underline;">UIView</span></a></span></span></strong>的animateWithDuration:animations:方法使用了一个block来定义动画的最终状态。此外，block在并发编程中具有强大的作用。</p>

<h2><strong><span style="color: #339966;">定义Block类型</span></strong></h2>

<p>由于block数据类型的语法会很快把函数的声明搞得难以阅读，所以经常使用typedef对block的签名(signature)做处理。例如，下面的代码创建了一个叫做SpeedFunction的新类型，这样我们就可以对withVariableSpeed参数使用一个更加有语义的数据类型。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

// Define a new type for the block
typedef double (^SpeedFunction)(double);

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(SpeedFunction)speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>许多标准的Objective-C框架也使用了这样的技巧，例如<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSComparator" target="_blank"><span style="color: #339966; text-decoration: underline;">NSComparator</span></a></span></span></strong>。</p>

<h2><strong><span style="color: #339966;">总结</span></strong></h2>

<p>Block不仅提供了C函数同样的功能，而且block看起来更加直观。block可以定义为内联(inline)，这样在函数内部调用的时候就非常方便，由于block具有闭包性(closure)，所以block可以很容易获得上下文信息，而又不会对这些数据产生负面影响。</p>

<h2><strong><span style="color: #339966;">延伸阅读</span></strong></h2>

<ul>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 1</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 2</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 3 (Block_copy)</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">Closure and anonymous functions in Objective-C</span></a></span></strong></span></li>
</ul>


<p>&nbsp;</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-08</time></p>
]]></content>
  </entry>
  
</feed>

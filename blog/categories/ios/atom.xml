<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-04-09T16:57:05+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS刮刮卡的实现]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/09/iosgua-gua-qia-de-shi-xian/"/>
    <updated>2014-04-09T15:38:52+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/09/iosgua-gua-qia-de-shi-xian</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>去年在实习的期间，需要写一个类似刮刮乐的小功能，当时是从网上下载的demo，后来经过自己研读代码和debug后，终于整理出了一套比较easy的实现方法</p>

<!-- more-->


<h2>正文</h2>

<p>需要源码的可以在<a href="https://github.com/yulingtianxia/ImageMask">这里</a>下载<br/>
我用的是从网上下载的<code>ImageMaskView</code>类，这个类还调用了工具类<code>Matrix</code>以及<code>PointTransforms.h</code>,使用非ARC实现并且在<code>ImageMaskView</code>类中使用了Objective－C和C＋＋混编，废话不多说，介绍下具体搭建方法吧<br/>
首先需要使用IB在你的工程的某个ViewController中加入一个UIImageView，任选一张图片赋予它image属性，并在Identity Inspector中将其类型设置成我们的自定义类<code>ImageMaskView</code><br/>
<img src="/images/blog/QQ20140409-0@2x.png" alt="QQ20140409-0@2x" /><br/>
我选的是一个美女图片，这张图片将会作为一个Mask来遮挡住它“底下”的View（在这之前我已经在美女图片底下放置了一个UIImageView作为背景，当然你也可以根据你的需要自定义其他的背景）
上素材！下面分别是我的背景图片和遮罩图片  <br/>
 <img src="/images/blog/QQ20140409-2@2x.png" alt="QQ20140409-2@2x" /><img src="/images/blog/QQ20140409-3@2x.png" alt="QQ20140409-3@2x" /><br/>
下面就是通过IB将ImageMaskView按住Ctrl拖拽到ViewController.h中作为一个新的属性，属性名自己起，并将其设置为strong类型<br/>
<img src="/images/blog/QQ20140409-1@2x.png" alt="QQ20140409-1@2x" /><br/>
然后在ViewController.m中重写viewDidLoad</p>

<p>``` objc
@synthesize FengjieMask;//是的，它是个ImageMaskView类的对象，名字很古怪吧
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
FengjieMask.radius = 20;//设置画笔半径
[FengjieMask beginInteraction];//初始化方法
FengjieMask.imageMaskFilledDelegate = self;//将代理设置为当前的VC
</code></pre>

<p>}
```</p>

<p>这里需要特别说明的是，<code>radius</code>是刮刮卡刮奖的时候画笔的半径，<code>imageMaskFilledDelegate</code>是一个代理，协议类型为<code>ImageMaskFilledDelegate</code>，只声明了一个方法<code>- (void) imageMaskView:(ImageMaskView *)maskView clearPercentDidChanged:(float)clearPercent</code>，这个方法在刮刮卡被刮下的面积变化时被调用，下面让我们的VC实现这个协议，并实现这个方法<br/>
先在VC头文件增加<code>&lt;ImageMaskFilledDelegate&gt;</code><br/>
<code>
@interface YXYViewController : UIViewController&lt;ImageMaskFilledDelegate&gt;
</code>
然后实现协议方法 <br/>
```
 #pragma mark ImageMaskFilledDelegate
&ndash; (void) imageMaskView:(ImageMaskView *)maskView clearPercentDidChanged:(float)clearPercent{</p>

<pre><code>if (clearPercent &gt; 50) {
    [UIView animateWithDuration:2
                     animations:^{
                         FengjieMask.userInteractionEnabled = NO;
                         FengjieMask.alpha = 0;
                         FengjieMask.imageMaskFilledDelegate = nil;
                     }
                     completion:^(BOOL finished) {
                     }];
}
</code></pre>

<p>}</p>

<p>``` <br/>
上面的代码先是做了个判断，当被涂刮的面积超过50%的时候，产生一个时长2秒的动画，让ImageMaskView渐渐变透明，传入的animations参数是个block块<br/>
好的，现在可以运行啦，我的demo效果如下<br/>
<img src="/images/blog/QQ20140409-4@2x.png" alt="QQ20140409-4@2x" /></p>

<h2>后记</h2>

<p>对iOS的Core Graphics不是很熟悉，还没有去深入看代码中的实现过程，不过修复了一个小bug：在UITouchPhaseBegan的时候刮开的圆形面积坐标错位了，并针对Retina和非Retina进行测试，效果都不错。以前用过其他的刮刮乐的代码，缺点是跟图片像素比之类的有关，显示效果很不好；但这个demo可以适配任意大小的Image而不用更改代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识block]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/08/block/"/>
    <updated>2014-04-08T16:41:39+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/08/block</id>
    <content type="html"><![CDATA[<h2><strong><span style="color: #339966;">前言</span></strong></h2>

<p>本文是小弟从<strong><span style="color: #339966;">破船</span></strong>大哥那转载来的，感觉比较经典，所以就收藏了，原文<a href="http://beyondvincent.com/blog/2013/07/08/98/">出处</a></p>

<p><img class="alignnone size-full wp-image-1563" alt="blocks_2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks_2x.png" width="1140" height="420" /></p>

<hr />

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/blocks.html" target="_blank"><span style="color: #339966; text-decoration: underline;">rypress</span></a></span></span></strong></p>

<!--more-->


<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>本周末微博上朋友发了一个关于block的MV，只能说老外太逗了。大家也可以去看看怎么回事：<a href="http://blog.bignerdranch.com/3001-cocoa-got-blocks/" target="_blank"> <strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;">Cocoa Got Blocks</span></span></strong></a>。虽然之前也有接触过block，不过没有深入完整的学习过，借此机会来学习一下，顺便翻译几篇block相关的文章，本文是第一篇，算是block的入门。本文的最后延伸阅读给出了4篇相关文章，不出意外的话，本周大家能看到对应的中文版。</p>

<h2><strong><span style="color: #339966;">目录：</span></strong></h2>

<ul>
<li><strong><span style="color: #339966;">Block简介</span></strong></li>
<li><strong><span style="color: #339966;">Block的创建</span></strong></li>
<li><strong><span style="color: #339966;">不带参数的Block</span></strong></li>
<li><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></li>
<li><strong><span style="color: #339966;">修改非局部变量</span></strong></li>
<li><strong><span style="color: #339966;">Block作为函数的参数</span></strong></li>
<li><strong><span style="color: #339966;">定义Block类型</span></strong></li>
<li><strong><span style="color: #339966;">总结</span></strong></li>
<li><strong><span style="color: #339966;">延伸阅读</span></strong></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">Block简介</span></strong></h2>

<p>我们可以把Block当做Objective-C的匿名函数。Block允许开发者在两个对象之间将任意的语句当做数据进行传递，往往这要比引用定义在别处的函数直观。另外，block的实现具有封闭性(closure)，而又能够很容易获取上下文的相关状态信息。</p>

<hr />

<h2><strong><span style="color: #339966;">Block的创建</span></strong></h2>

<p>实际上，block使用了与<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html" target="_blank"><span style="color: #339966; text-decoration: underline;">函数</span></a></span></strong></span>相同的机制：可以像声明函数一样，来声明一个bock变量；可以利用定义一个函数的方法来定义一个block；也可以将block当做一个函数来调用。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // Declare the block variable
        double (^distanceFromRateAndTime)(double rate, double time);

        // Create and assign the block
        distanceFromRateAndTime = ^double(double rate, double time) {
            return rate * time;
        };
        // Call the block
        double dx = distanceFromRateAndTime(35, 1.5);

        NSLog(@"A car driving 35 mph will travel "
              @"%.2f miles in 1.5 hours.", dx);
    }
    return 0;
}</pre>


<p>在上面的代码中，利用插入符(^)将distanceFromRateAndTime变量标记为一个block。就像声明函数一样，需要包含返回值的类型，以及参数的类型，这样编译器才能安全的进行强制类型转换。插入符(^)跟指针(例如 int *aPointer)前面的星号(*)类似——只是在声明的时候需要使用，之后用法跟普通的变量一样。</p>

<p>block的定义本质上跟函数一样——只不过不需要函数名。block以签名字符串开始：<sup>double</sup>(double rate, double time)标示返回一个double，以及接收两个同样为double的参数(如果不需要返回值，可以忽略掉)。在签名后面是一个大括弧({})，在这个括弧里面可以编写任意的语句代码，这跟普通的函数一样。</p>

<p>当把block赋值给distanceFromRateAndTime后，我们就可以像调用函数一样调用这个变量了。</p>

<h2><strong><span style="color: #339966;">不带参数的Block</span></strong></h2>

<p>如果block不需要任何的参数，那么可以忽略掉参数列表。另外，在定义block的时候，返回值的类型也是可选的，所以这样情况下，block可以简写为^ { … }：</p>

<pre class="wp-code-highlight prettyprint linenums:1">double (^randomPercent)(void) = ^ {
    return (double)arc4random() / 4294967295;
};
NSLog(@"Gas tank is %.1f%% full",
      randomPercent() * 100);</pre>


<p>在上面的代码中，利用内置的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/arc4random.3.html" target="_blank"><span style="color: #339966; text-decoration: underline;">arc4random()</span></a></span></span></strong>方法返回一个32位的整型随机数——为了获得0-1之间的一个值，通过除以arc4random()方法能够获取到的最大值(4294967295)。</p>

<p>到现在为止，block看起来可能有点像利用一种复杂的方式来定义一个方法。事实上，block是被设计为闭包的(closure)——这就提供了一种新的、令人兴奋的编程方式。</p>

<h2><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></h2>

<p>在block内部，可以像普通函数一样访问数据：局部变量、传递给block的参数，全局变量/函数。并且由于block具有<span style="color: #ff0000;"><strong>闭包性</strong></span>，所以还能访问<strong><span style="color: #ff0000;">非局部变量(non-local variable)</span></strong>。非局部变量定义在block之外，但是在block内部有它的作用域。例如，getFullCarName可以使用定义在block前面的make变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord</pre>


<p>非局部变量会以const变量被拷贝并存储到block中，也就是说block对其是只读的。如果尝试在block内部给make变量赋值，会抛出编译器错误。</p>

<div id="attachment_1546" class="wp-caption alignnone" style="width: 340px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png"><img class="size-full wp-image-1546" alt="const-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png" width="330" height="170" /></a><p class="wp-caption-text">
    以const拷贝的方式访问非局部变量
  </p>
</div>


<p>&nbsp;</p>

<p>以const拷贝的方式访问非局部变量，意味着block实际上并不是真正的访问了非局部变量——只不过在block中创建了非局部变量的一个快照。当定义block时，无论非局部变量的值是什么，都将被冻结，并且block会一直使用这个值，即使在之后的代码中修改了非局部变量的值。下面通过代码来看看，在创建好block之后，修改make变量的值，会发生什么：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord

// Try changing the non-local variable (it won&#039;t change the block)
make = @"Porsche";
NSLog(@"%@", getFullCarName(@"911 Turbo")); // Honda 911 Turbo</pre>


<p>block的闭包性为block与上下文交互的时候带来极大的便利性，当block需要额外的数据时，可以避免使用参数——只需要简单的使用非局部变量即可。</p>

<h2><strong><span style="color: #339966;">修改非局部变量</span></strong></h2>

<p>冻结中的非局部变量是一个常量值，这也是一种默认的安全行为——因为这可以防止在block中的代码对非局部变量做了意外的修改。那么如果我们希望在block中对非局部变量值进行修改要如何做呢——用__block存储修饰符(storage modifier)来声明非局部变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block NSString *make = @"Honda";</pre>


<p>这将告诉block对非局部变量做引用处理，在block外部make变量和内部的make变量创建一个直接的链接(direct link)。现在就可以在block外部修改make，然后反应到block内部，反过来，也是一样。</p>

<div id="attachment_1547" class="wp-caption alignnone" style="width: 270px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png"><img class="size-full wp-image-1547" alt="mutable-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png" width="260" height="150" /></a><p class="wp-caption-text">
    通过引用的方式访问非局部变量
  </p>
</div>


<p>这跟普通函数中的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html#static-local-variables" target="_blank"><span style="color: #339966; text-decoration: underline;">静态局部变量(static local variable)</span></a></span></span></strong>类似，用__block修饰符声明的变量可以记录着block多次调用的结果。例如下面的代码创建了一个block，在block中对i进行累加。</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block int i = 0;
int (^count)(void) = ^ {
    i += 1;
    return i;
};
NSLog(@"%d", count());    // 1
NSLog(@"%d", count());    // 2
NSLog(@"%d", count());    // 3</pre>


<h2></h2>

<h2><strong><span style="color: #339966;">Block作为函数的参数</span></strong></h2>

<p>把block存储在变量中有时候非常有用，比如将其用作函数的参数。这可以解决类似函数指针能解决的问题，不过我们也可以定义内联的block，这样代码更加易读。<br/>
例如下面Car interface中声明了一个方法，该方法用来计算汽车的里程数。这里并没有强制要求调用者给该方法传递一个常量速度，相反可以改方法接收一个block——该block根据具体的时间来定义汽车的速度。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>上面代码中block的数据类型是double (^)(double time)，也就是说block的调用者需要传递一个double类型的参数，并且该block的返回值为double类型。注意：上面代码中的语法基本与本文开头介绍的block变量声明相同，只不过没有变量名字。<br/>
在函数的实现里面可以通过speedFunction来调用block。下面的示例通过算法计算出汽车行驶的大约距离。其中steps参数是由调用者确定的一个准确值。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.m
#import "Car.h"

@implementation Car

@synthesize odometer = _odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps {
    double dt = duration / numSteps;
    for (int i=1; i&lt;=numSteps; i++) {
        _odometer += speedFunction(i*dt) * dt;
    }
}

@end</pre>


<p>在下面的代码中，有一个main函数，在main函数中block定义在另一个函数的调用过程中。虽然理解其中的语法需要话几秒钟时间，不过这比起另外声明一个函数，再定义withVariableSpeed参数要更加直观。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;
#import "Car.h"

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        Car *theCar = [[Car alloc] init];

        // Drive for awhile with constant speed of 5.0 m/s
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);

        // Start accelerating at a rate of 1.0 m/s^2
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return time + 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);
    }
    return 0;
}</pre>


<p>上面利用一个简单的示例演示了block的通用性。在iOS的SDK中有许多API都利用了block的其它一些功能。<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/NSArray.html" target="_blank"><span style="color: #339966; text-decoration: underline;">NSArray</span></a></span></span></strong>的sortedArrayUsingComparator:方法可以使用一个block对元素进行排序，而<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/uiview/uiview.html" target="_blank"><span style="color: #339966; text-decoration: underline;">UIView</span></a></span></span></strong>的animateWithDuration:animations:方法使用了一个block来定义动画的最终状态。此外，block在并发编程中具有强大的作用。</p>

<h2><strong><span style="color: #339966;">定义Block类型</span></strong></h2>

<p>由于block数据类型的语法会很快把函数的声明搞得难以阅读，所以经常使用typedef对block的签名(signature)做处理。例如，下面的代码创建了一个叫做SpeedFunction的新类型，这样我们就可以对withVariableSpeed参数使用一个更加有语义的数据类型。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

// Define a new type for the block
typedef double (^SpeedFunction)(double);

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(SpeedFunction)speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>许多标准的Objective-C框架也使用了这样的技巧，例如<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSComparator" target="_blank"><span style="color: #339966; text-decoration: underline;">NSComparator</span></a></span></span></strong>。</p>

<h2><strong><span style="color: #339966;">总结</span></strong></h2>

<p>Block不仅提供了C函数同样的功能，而且block看起来更加直观。block可以定义为内联(inline)，这样在函数内部调用的时候就非常方便，由于block具有闭包性(closure)，所以block可以很容易获得上下文信息，而又不会对这些数据产生负面影响。</p>

<h2><strong><span style="color: #339966;">延伸阅读</span></strong></h2>

<ul>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 1</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 2</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 3 (Block_copy)</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">Closure and anonymous functions in Objective-C</span></a></span></strong></span></li>
</ul>


<p>&nbsp;</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-08</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS单例模式 or NSUserDefaults]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/07/iosdan-li-mo-shi-ornsuserdefaults/"/>
    <updated>2014-04-07T15:07:08+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/07/iosdan-li-mo-shi-ornsuserdefaults</id>
    <content type="html"><![CDATA[<p>本文内容：</p>

<ul>
<li>iOS的单例模式</li>
<li>NSUserDefaults的使用</li>
<li>总结：iOS单例模式 and NSUserDefaults</li>
</ul>


<!-- more-->


<h1>iOS的单例模式</h1>

<p>提起单例模式大家都不陌生，什么懒汉式，饿汉式，老汉式。。。扯远了</p>

<p>一开始觉得Objective－C中没有绝对的私有方法，该如何实现单例模式呢？后来觉得想多了，限制构造方法的使用式徒劳的，因为程序是人写的，既然是单例了，那就老老实实调用自己写的getInstance吧。Java笑了？一个反射打趴下！
在ARC诞生之前，可以通过重写<code>allocWithZone</code>方法等来实现，下面是苹果官方的单例写法：<br/>
``` objectivec
static MyGizmoClass <em>sharedGizmoManager = nil;
+ (MyGizmoClass</em>)sharedManager
{</p>

<pre><code>@synchronized(self) {
    if (sharedGizmoManager == nil) {
        [[self alloc] init]; // assignment not done here
    }
}
return sharedGizmoManager;
</code></pre>

<p>}</p>

<ul>
<li><p>(id)allocWithZone:(NSZone *)zone
{
  @synchronized(self) {
      if (sharedGizmoManager == nil) {
          sharedGizmoManager = [super allocWithZone:zone];
          return sharedGizmoManager;  // assignment and return on first allocation
      }
  }
  return nil; //on subsequent allocation attempts return nil
}</p></li>
<li><p>(id)copyWithZone:(NSZone *)zone
{
  return self;
}</p></li>
<li><p>(id)retain
{
  return self;
}</p></li>
<li><p>(unsigned)retainCount
{
  return UINT_MAX;  //denotes an object that cannot be released
}</p></li>
<li><p>(void)release
{
  //do nothing
}</p></li>
<li><p>(id)autorelease
{
  return self;
}</p></li>
</ul>


<p>```</p>

<p>在ARC时代，程序员不用费心计算static的实例被引用多少次，需要release巴拉巴拉。。。而自从有了GCD，iOS的单例模式变得超级简单了：</p>

<p>```
+ (Singleton *)sharedInstance{</p>

<pre><code>static id instance = nil;
static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    instance = [[self alloc] init];
});
return instance;
</code></pre>

<p>}
<code>``
instance为将被实例化的对象，为了让instance只被实例化一次，用到了GCD(Grand Central Dispatch)中的</code>dispatch_once`方法。该方法有两个参数，第二个参数是一个block，只会被执行一次。而第一个参数是一个谓词，用于判断代码块（block）是否执行完，这个谓词只能是全局或静态变量，类型为dispatch_once_t，其实dispatch_once_t就是long类型。你可以理解为第一个参数是个标识位，能保证记录第二个参数block的执行情况，即使是在最复杂的多线程并发执行的情况下，也就是说，GCD的这个方法是线程安全的。如果你对block这种类型比较陌生，可以把它暂时当作函数指针，当然，它比函数指针还要强大。<br/>
你可以重写init方法来实现饿汉式单例，也可以自定义initwithXXX来在需要实例化的时候调用之，实现懒汉式单例。</p>

<h1>NSUserDefaults</h1>

<p>很多APP启动时需要读取上次运行保存的一些状态，如何保存呢？Core Data，SQlite和UIDocuments未免杀鸡用牛刀了，而<code>NSUserDefaults</code>很适用于快速读取小规模的数据</p>

<p><code>
NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
</code>
写入数据</p>

<p><code>
NSString *string = [NSString stringWithString @"hahaha"];
[standardDefaults setObject:string forKey:@"myKey"];
[standardDefaults synchronize];//写完别忘了同步
</code>
读取数据</p>

<p><code>
NSString *value = [standardDefaults objectForKey:"myKey"];  
</code>
<code>NSUserDefaults</code>可以很好地理解成键值对</p>

<p>有时在写数据之前，想判断下这个健是否已经设置过默认值</p>

<p><code>
NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
if ([standardDefaults stringForKey:@"favoriteColor"] == nil) {
[standardDefaults setObject:@"Green" forKey:@"favoriteColor"];
[standardDefaults synchronize];
}
</code>
其实大可不必这么麻烦，摘自<a href="http://beyondvincent.com/blog/2013/04/20/13/">破船</a>推荐的方法<code>registerDefaults:</code></p>

<p><code>
NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
[standardDefaults registerDefaults:@{@"favoriteColor": @"Green"}];
[standardDefaults synchronize];
</code>
每次程序启动的时候调用<code>registerDefaults:</code> 方法都是安全的。完全可以将这个方法的调用放到<code>applicationDidFinishLaunching:</code>方法中. 这个方法永远都不会覆盖用户设置的值。<br/>
但是并不是所有类型的对象都能够直接放入NSUserDefaults，NSUserDefaults只支持： NSString, NSNumber, NSDate, NSArray, NSDictionary<br/>
解决方法：让这个自定义的类实现<NSCoding>协议，举个例子：</p>

<p>```
//SNShops.h</p>

<p>@interface SNShops : NSObject<NSCoding></p>

<p>@property (nonatomic,strong) NSString<em> sid;
@property (nonatomic,strong) NSString</em> name;</p>

<ul>
<li>(id) initWithCoder: (NSCoder *)coder;</li>
<li>(void) encodeWithCoder: (NSCoder *)coder;</li>
</ul>


<p>//SNShops.m
@implementation SNShops
&ndash; (id) initWithCoder: (NSCoder *)coder
{</p>

<pre><code>if (self = [super init])
{
    self.sid = [coder decodeObjectForKey:@"sid"];
    self.name = [coder decodeObjectForKey:@"name"];
}
return self;
</code></pre>

<p>}
&ndash; (void) encodeWithCoder: (NSCoder *)coder
{</p>

<pre><code>[coder encodeObject:self.sid forKey:@"sid"];
[coder encodeObject:self.name forKey:@"name"];
</code></pre>

<p>}</p>

<p>```</p>

<p>然后再存取时通过<code>NSData</code>做载体：<br/>
存入</p>

<p>```
NSUserDefaults <em>standardDefaults = [NSUserDefaults standardUserDefaults];
SNShops </em>shop = [[SNShops alloc]init];
NSData *shopData = [NSKeyedArchiver archivedDataWithRootObject:shop];
[standardDefaults setObject:shopData forKey:@&ldquo;myshop&rdquo;];
[standardDefaults synchronize];</p>

<p>```
读取</p>

<p><code>
NSData *newshopData = [standardDefaults objectForKey:"myshop"];
SNShops *newshop = [NSKeyedUnarchiver unarchiveObjectWithData:newshopData];
</code></p>

<h1>总结：iOS单例模式 and NSUserDefaults</h1>

<p>单例模式虽然能存入任何类型的对象，但是它会随着程序的挂起而消亡。而NSUserDefaults在读取自定义类型时有些繁琐，降低编码效率和可读性，好处是程序下次启动依然能读取到上次的状态。<br/>
笔者在实际应用中采取了二者结合的模式：让单例模式的类实现<NSCoding>协议，程序第一次启动的时候通过NSData做载体读取单例类的实例，并存入单例，程序运行中一直对单例做存储操作，当程序快要进入到后台挂起的时候，通过NSData做载体存入NSUserDefaults，一举两得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS程序员必备网站]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/07/ioscheng-xu-yuan-bi-bei-wang-zhan/"/>
    <updated>2014-04-07T13:50:00+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/07/ioscheng-xu-yuan-bi-bei-wang-zhan</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>记得最早接触iOS开发是在大二，那时国内相关资源还很少，比较适合新手入门的文章和视频也很少，感觉斯坦福大学的iPhone开发公开课算是最喜欢的了，还有<a href="http://blog.csdn.net/nicktang">NickTang</a>和<a href="http://www.cnblogs.com/dotey/">宝玉</a>的博客也给了我很多启发。那时正逢Objective－C刚刚推出了ARC，正处于是否用ARC的讨论中，这让我更加迷茫。<br/>
英文菜成渣的我开始看Apple官方的文档，download官方的demo，光是一个OC内存管理就看了好久；而如今国内中文的开发资源可以说比那时多很多了，所以想总结一下，方便大家。（PS：其实发现写博客最大的好处就是免得以后再用到某些东西的时候重复的查找，以前一直觉得应该把经验记录下来，但是一直懒得写，这次终于动手了^_^）</p>

<!-- more-->


<h2>正题</h2>

<h3>比较适合入门的</h3>

<ul>
<li><a href="http://www.cocoachina.com/">CocoaChina</a>创立于2008年3月，是一个苹果产品和 iOS 开发的中文社区网站，主要为苹果产品开发者提供资讯、信息及服务。</li>
<li>Apple的官方文档，尤其是关于人机界面设计的和OC的，网址不固定，XCode中可以查看。（这里还建议使用Dash管理API文档）</li>
</ul>


<h3>学习进阶参考</h3>

<ul>
<li><a href="http://beyondvincent.com">破船之家</a> 翻译和汇总了很多来自<a href="http://www.raywenderlich.com">Ray</a>的教程，很经典实用，也有大量原创文章</li>
<li><a href="http://www.ityran.com">泰然网</a> 感觉做游戏比较多</li>
<li><a href="http://code4app.com/">Code4App</a> 偶然发现这个网站，集合了大量实例代码，超赞</li>
<li><a href="http://blog.devtang.com/">唐巧的博客</a> 大神人物，总怀疑当初启蒙我的Nick Tang就是他</li>
<li><a href="http://onevcat.com">王巍的博客</a> 精力充沛的大神，工作之余还上架了一些App，他的博客令我大开眼界</li>
<li><a href="http://www.cocos2d-x.org">cocos2d-x</a> 跨平台游戏制作神器，虽然我已经用上了Sprite Kit，但是这种重量级的游戏引擎还是必须mark下</li>
</ul>


<h3>工具类网站</h3>

<ul>
<li><a href="https://github.com/">Github</a> 代码托管版本控制，不解释</li>
<li><a href="http://stackoverflow.com/">Stackoverflow</a> 最令我佩服的就是80%的疑难杂症最后都在这里找到解决方案，这里有好多耐心的老外！</li>
</ul>


<p>其实还有很多优秀的网站没有收录，本文只是收录了本人能看懂的网址（英文伤不起），其实大量优秀的教程都是英文的啊！碰到问题现用现查还是最快，没事儿的时候可以看看本文提到的网站充充电。</p>
]]></content>
  </entry>
  
</feed>

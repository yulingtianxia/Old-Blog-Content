<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-04-27T14:31:02+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在游戏的SKScene中添加Button]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/27/zai-you-xi-de-skscenezhong-tian-jia-button/"/>
    <updated>2014-04-27T13:18:04+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/27/zai-you-xi-de-skscenezhong-tian-jia-button</id>
    <content type="html"><![CDATA[<p>偶然发现<code>SpriteKit</code>中的<code>SKNode</code>也有<code>userInteractionEnabled</code>属性，就像<code>UIKit</code>中的<code>userInteractionEnabled</code>一样，于是我对以前的代码进行重构，发现了在游戏中添加交互button的新的方式（估计很多大神们早就发现了）</p>

<!--more-->


<h2>在SKScene中添加SKNode对象作为Button</h2>

<p>不得不承认，我以前在<code>SKScene</code>中添加一个<code>Button</code>的过程是这样的：</p>

<p><strong>添加一个<code>SKNode</code>（一般都是它的子类：<code>SKLabelNode</code>和<code>SKSpriteNode</code>）属性</strong></p>

<p><code>objc
SKLabelNode *button = [SKLabelNode labelNodeWithFontNamed:@"Chalkduster"];
</code></p>

<p><strong>设置其填充的内容和放置位置，还有<code>SKNode</code>的<code>name</code></strong></p>

<p><code>
button.text = @"Click me";
button.name = @"button";
button.fontSize = 40;
button.fontColor = [SKColor purpleColor];
button.position = CGPointMake(self.size.width/2, self.size.height/2);
[self addChild:button];
</code></p>

<p><strong>在<code>SKScene</code>重写<code>touchesEnded: withEvent:</code>方法，并在方法中判断触摸到哪个<code>SKNode</code></strong></p>

<p>```
&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event{</p>

<pre><code>UITouch * touch = [touches anyObject];
CGPoint location = [touch locationInNode:self];
SKSpriteNode *touchedNode = (SKSpriteNode *)[self nodeAtPoint:location];
if ([touchedNode.name isEqualToString:@"button"]) {
    //TODO:
}
</code></pre>

<p>}
<code>``
如果某个场景中需要设置很多Button，比如游戏设置界面，那么在</code>touchesEnded: withEvent: `方法中就会出现好多if判断，这么多分支，每个分支可能还有很多操作，这样增加了SKScene的体积，使得代码可读性变差，维护也困难</p>

<h2>通过继承来封装自己的Button</h2>

<p><code>UIKit</code>中的<code>userInteractionEnabled</code>大家一定都很熟悉，它默认值是<code>YES</code>，也就是默认接受触摸事件，偶然发现<code>SKNode</code>也有<code>userInteractionEnabled</code>属性，但是默认值是<code>NO</code>，而且<code>SKNode</code>是继承<code>UIResponder</code>的，这么说，我们可以在SKNode中一展拳脚了，不必再麻烦SKScene了<br/>
下面添加一个用于跳转到主菜单场景页面的Button为例：<br/>
<strong>新建一个类，名字叫MainSceneButton，继承<code>SKLabelNode</code>，并构造出时候方法</strong></p>

<p>```
&ndash;(id)init{</p>

<pre><code>if (self = [super initWithFontNamed:@"Chalkduster"]) {
    self.text = @"MENU";
    self.fontSize = 20;
    self.userInteractionEnabled = YES;
}
return self;
</code></pre>

<p>}</p>

<p><code>``
这里碰到一个问题：如果用上面的代码初始化，将会出现</code>EXC_BAD_ACCESS` 错误，问题的解决方法是在超类初始化时用init方法代替，然后再设置字体：</p>

<p>```
&ndash;(id)init{</p>

<pre><code>if (self = [super init]) {
    self.fontName = @"Chalkduster";
    self.text = @"MENU";
    self.fontSize = 20;
    self.userInteractionEnabled = YES;
}
return self;
</code></pre>

<p>}
<code>``
至于原因，我也没弄清楚，估计是</code>SKLabelNode<code>的bug吧，因为初始化</code>SKSpriteNode<code>时用</code>initWithTexture: color: size:<code>方法就不会报错  
**在MainSceneButton中重写</code>touchesEnded: withEvent: `方法**</p>

<p>```
&ndash;(void)touchesEnded:(NSSet <em>)touches withEvent:(UIEvent </em>)event{</p>

<pre><code>SKTransition *reveal = [SKTransition flipHorizontalWithDuration:0.5];
SKScene * myScene = [[MainScene alloc] initWithSize:self.scene.size];
[self.scene.view presentScene:myScene transition: reveal];
</code></pre>

<p>}
```
MainScene是我的一个SKScene，通过点击MainSceneButton来切换到MainScene<br/>
<strong>最后在某个场景中将button添加上去，跟之前的类似</strong></p>

<p><code>
MainSceneButton *mainScene = [[MainSceneButton alloc] init];
mainScene.position = CGPointMake(self.size.width/2, self.size.height/2);
[self addChild:mainScene];
</code>
感觉这样做是不是很像以前继承一个UIView然后封装自己的Custom View呢？给SKScene瘦身的方法还有很多，参照给UIViewController瘦身的方法，我们还可以把其他SKNode也从SKScene中剥离出去，一些用于设置SKNode的方法也会随之剥离到自定义的类中，便于以后维护代码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7字体汇总]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/24/ios7zi-ti-hui-zong/"/>
    <updated>2014-04-24T18:12:43+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/24/ios7zi-ti-hui-zong</id>
    <content type="html"><![CDATA[<p>本文列举了iOS7所有字体以及获取字体的方式</p>

<!--more-->


<p>运行下面的代码可以获得所有的字体样式</p>

<p>``` objc</p>

<pre><code>    NSArray *familyNames = [UIFont familyNames];

    for( NSString *familyName in familyNames ){

        NSLog(@"Family: %@",familyName);

        NSArray *fontNames = [UIFont fontNamesForFamilyName:familyName];
        for( NSString *fontName in fontNames ){
            NSLog(@"Font: %@",fontName);
        }

    } 
</code></pre>

<p>```</p>

<p>在iOS7运行，获得结果如下：</p>

<p> Family: Marion<br/>
 Font: Marion-Italic<br/>
 Font: Marion-Bold<br/>
 Font: Marion-Regular<br/>
 Family: Copperplate<br/>
 Font: Copperplate-Light<br/>
 Font: Copperplate<br/>
 Font: Copperplate-Bold<br/>
 Family: Heiti SC<br/>
 Font: STHeitiSC-Medium<br/>
 Font: STHeitiSC-Light<br/>
 Family: Iowan Old Style<br/>
 Font: IowanOldStyle-Italic<br/>
 Font: IowanOldStyle-Roman<br/>
 Font: IowanOldStyle-BoldItalic<br/>
 Font: IowanOldStyle-Bold<br/>
 Family: Courier New<br/>
 Font: CourierNewPS-BoldMT<br/>
 Font: CourierNewPS-ItalicMT<br/>
 Font: CourierNewPSMT<br/>
 Font: CourierNewPS-BoldItalicMT<br/>
 Family: Apple SD Gothic Neo<br/>
 Font: AppleSDGothicNeo-Bold<br/>
 Font: AppleSDGothicNeo-Thin<br/>
 Font: AppleSDGothicNeo-Regular<br/>
 Font: AppleSDGothicNeo-Light<br/>
 Font: AppleSDGothicNeo-Medium<br/>
 Font: AppleSDGothicNeo-SemiBold<br/>
 Family: Heiti TC<br/>
 Font: STHeitiTC-Medium<br/>
 Font: STHeitiTC-Light<br/>
 Family: Gill Sans<br/>
 Font: GillSans-Italic<br/>
 Font: GillSans-Bold  <br/>
 Font: GillSans-BoldItalic<br/>
 Font: GillSans-LightItalic<br/>
 Font: GillSans<br/>
 Font: GillSans-Light<br/>
 Family: Thonburi<br/>
 Font: Thonburi<br/>
 Font: Thonburi-Bold<br/>
 Font: Thonburi-Light<br/>
 Family: Marker Felt<br/>
 Font: MarkerFelt-Thin
 Font: MarkerFelt-Wide<br/>
 Family: Avenir Next Condensed<br/>
 Font: AvenirNextCondensed-BoldItalic<br/>
 Font: AvenirNextCondensed-Heavy<br/>
 Font: AvenirNextCondensed-Medium<br/>
 Font: AvenirNextCondensed-Regular<br/>
 Font: AvenirNextCondensed-HeavyItalic<br/>
 Font: AvenirNextCondensed-MediumItalic<br/>
 Font: AvenirNextCondensed-Italic<br/>
 Font: AvenirNextCondensed-UltraLightItalic<br/>
 Font: AvenirNextCondensed-UltraLight<br/>
 Font: AvenirNextCondensed-DemiBold<br/>
 Font: AvenirNextCondensed-Bold<br/>
 Font: AvenirNextCondensed-DemiBoldItalic<br/>
 Family: Tamil Sangam MN<br/>
 Font: TamilSangamMN<br/>
 Font: TamilSangamMN-Bold<br/>
 Family: Helvetica Neue<br/>
 Font: HelveticaNeue-Italic<br/>
 Font: HelveticaNeue-Bold<br/>
 Font: HelveticaNeue-UltraLight<br/>
 Font: HelveticaNeue-CondensedBlack<br/>
 Font: HelveticaNeue-BoldItalic<br/>
 Font: HelveticaNeue-CondensedBold<br/>
 Font: HelveticaNeue-Medium<br/>
 Font: HelveticaNeue-Light  <br/>
 Font: HelveticaNeue-Thin<br/>
 Font: HelveticaNeue-ThinItalic<br/>
 Font: HelveticaNeue-LightItalic<br/>
 Font: HelveticaNeue-UltraLightItalic<br/>
 Font: HelveticaNeue-MediumItalicv
 Font: HelveticaNeue<br/>
 Family: Gurmukhi MN<br/>
 Font: GurmukhiMN-Bold<br/>
 Font: GurmukhiMN<br/>
 Family: Times New Roman<br/>
 Font: TimesNewRomanPSMTv
 Font: TimesNewRomanPS-BoldItalicMT<br/>
 Font: TimesNewRomanPS-ItalicMT<br/>
 Font: TimesNewRomanPS-BoldMT<br/>
 Family: Georgia<br/>
 Font: Georgia-BoldItalic<br/>
 Font: Georgia  <br/>
 Font: Georgia-Italic<br/>
 Font: Georgia-Bold<br/>
 Family: Apple Color Emoji<br/>
 Font: AppleColorEmoji<br/>
 Family: Arial Rounded MT Bold<br/>
 Font: ArialRoundedMTBold<br/>
 Family: Kailasa<br/>
 Font: Kailasa-Bold<br/>
 Font: Kailasa<br/>
 Family: Sinhala Sangam MN<br/>
 Font: SinhalaSangamMN-Bold<br/>
 Font: SinhalaSangamMN<br/>
 Family: Chalkboard SE<br/>
 Font: ChalkboardSE-Bold<br/>
 Font: ChalkboardSE-Light<br/>
 Font: ChalkboardSE-Regular<br/>
 Family: Superclarendon<br/>
 Font: Superclarendon-Italic<br/>
 Font: Superclarendon-Black<br/>
 Font: Superclarendon-LightItalic
 Font: Superclarendon-BlackItalic<br/>
 Font: Superclarendon-BoldItalic<br/>
 Font: Superclarendon-Light<br/>
 Font: Superclarendon-Regular<br/>
 Font: Superclarendon-Bold<br/>
 Family: Gujarati Sangam MN<br/>
 Font: GujaratiSangamMN-Bold<br/>
 Font: GujaratiSangamMN<br/>
 Family: Geeza Pro<br/>
 Font: GeezaPro-Light<br/>
 Font: GeezaPro<br/>
 Font: GeezaPro-Bold<br/>
 Family: Noteworthy<br/>
 Font: Noteworthy-Light<br/>
 Font: Noteworthy-Bold<br/>
 Family: Damascus<br/>
 Font: DamascusBold<br/>
 Font: DamascusSemiBold<br/>
 Font: DamascusMedium<br/>
 Font: Damascus
 Family: Avenir<br/>
 Font: Avenir-Medium<br/>
 Font: Avenir-HeavyOblique<br/>
 Font: Avenir-Book<br/>
 Font: Avenir-Light<br/>
 Font: Avenir-Roman<br/>
 Font: Avenir-BookOblique<br/>
 Font: Avenir-Black<br/>
 Font: Avenir-MediumOblique<br/>
 Font: Avenir-BlackOblique<br/>
 Font: Avenir-Heavy<br/>
 Font: Avenir-LightOblique<br/>
 Font: Avenir-Oblique<br/>
 Family: Academy Engraved LET<br/>
 Font: AcademyEngravedLetPlain<br/>
 Family: Mishafi<br/>
 Font: DiwanMishafi<br/>
 Family: Futura<br/>
 Font: Futura-CondensedMedium<br/>
 Font: Futura-CondensedExtraBold<br/>
 Font: Futura-Medium<br/>
 Font: Futura-MediumItalicv
 Family: Farah<br/>
 Font: Farah<br/>
 Family: Kannada Sangam MN<br/>
 Font: KannadaSangamMN<br/>
 Font: KannadaSangamMN-Bold<br/>
 Family: Arial Hebrew<br/>
 Font: ArialHebrew-Bold<br/>
 Font: ArialHebrew-Light<br/>
 Font: ArialHebrew<br/>
 Family: Arial<br/>
 Font: ArialMT<br/>
 Font: Arial-BoldItalicMT<br/>
 Font: Arial-BoldMT<br/>
 Font: Arial-ItalicMT<br/>
 Family: Party LET<br/>
 Font: PartyLetPlain<br/>
 Family: Chalkduster<br/>
 Font: Chalkduster<br/>
 Family: Hiragino Kaku Gothic ProN<br/>
 Font: HiraKakuProN-W6<br/>
 Font: HiraKakuProN-W3  <br/>
 Family: Hoefler Text<br/>
 Font: HoeflerText-Italicv
 Font: HoeflerText-Regular<br/>
 Font: HoeflerText-Black<br/>
 Font: HoeflerText-BlackItalicv
 Family: Optima<br/>
 Font: Optima-Regular<br/>
 Font: Optima-ExtraBlack<br/>
 Font: Optima-BoldItalic<br/>
 Font: Optima-Italic<br/>
 Font: Optima-Bold<br/>
 Family: Palatino<br/>
 Font: Palatino-Bold<br/>
 Font: Palatino-Roman<br/>
 Font: Palatino-BoldItalic<br/>
 Font: Palatino-Italic<br/>
 Family: Malayalam Sangam MN<br/>
 Font: MalayalamSangamMN-Bold<br/>
 Font: MalayalamSangamMN<br/>
 Family: Al Nile<br/>
 Font: AlNile-Bold<br/>
 Font: AlNile<br/>
 Family: Bradley Hand<br/>
 Font: BradleyHandITCTT-Bold<br/>
 Family: Hiragino Mincho ProN<br/>
 Font: HiraMinProN-W6<br/>
 Font: HiraMinProN-W3<br/>
 Family: Trebuchet MS<br/>
 Font: Trebuchet-BoldItalic<br/>
 Font: TrebuchetMS<br/>
 Font: TrebuchetMS-Bold<br/>
 Font: TrebuchetMS-Italic<br/>
 Family: Helvetica<br/>
 Font: Helvetica-Bold<br/>
 Font: Helvetica<br/>
 Font: Helvetica-LightOblique<br/>
 Font: Helvetica-Oblique<br/>
 Font: Helvetica-BoldOblique<br/>
 Font: Helvetica-Light<br/>
 Family: Courier<br/>
 Font: Courier-BoldObliquev
 Font: Courier<br/>
 Font: Courier-Bold<br/>
 Font: Courier-Oblique<br/>
 Family: Cochin<br/>
 Font: Cochin-Bold<br/>
 Font: Cochin<br/>
 Font: Cochin-Italic<br/>
 Font: Cochin-BoldItalic<br/>
 Family: Devanagari Sangam MNv
 Font: DevanagariSangamMN<br/>
 Font: DevanagariSangamMN-Bold<br/>
 Family: Oriya Sangam MN<br/>
 Font: OriyaSangamMN<br/>
 Font: OriyaSangamMN-Bold<br/>
 Family: Snell Roundhand<br/>
 Font: SnellRoundhand-Bold<br/>
 Font: SnellRoundhand<br/>
 Font: SnellRoundhand-Black<br/>
 Family: Zapf Dingbats<br/>
 Font: ZapfDingbatsITC<br/>
 Family: Bodoni 72<br/>
 Font: BodoniSvtyTwoITCTT-Bold<br/>
 Font: BodoniSvtyTwoITCTT-Book<br/>
 Font: BodoniSvtyTwoITCTT-BookIta<br/>
 Family: Verdana<br/>
 Font: Verdana-Italic<br/>
 Font: Verdana-BoldItalic<br/>
 Font: Verdana<br/>
 Font: Verdana-Bold<br/>
 Family: American Typewriter<br/>
 Font: AmericanTypewriter-CondensedLight<br/>
 Font: AmericanTypewriter<br/>
 Font: AmericanTypewriter-CondensedBold<br/>
 Font: AmericanTypewriter-Light<br/>
 Font: AmericanTypewriter-Bold<br/>
 Font: AmericanTypewriter-Condensed<br/>
 Family: Avenir Next<br/>
 Font: AvenirNext-UltraLight<br/>
 Font: AvenirNext-UltraLightItalic<br/>
 Font: AvenirNext-Bold<br/>
 Font: AvenirNext-BoldItalic<br/>
 Font: AvenirNext-DemiBold<br/>
 Font: AvenirNext-DemiBoldItalic<br/>
 Font: AvenirNext-Medium<br/>
 Font: AvenirNext-HeavyItalic<br/>
 Font: AvenirNext-Heavy<br/>
 Font: AvenirNext-Italic<br/>
 Font: AvenirNext-Regular<br/>
 Font: AvenirNext-MediumItalic<br/>
 Family: Baskerville<br/>
 Font: Baskerville-Italic<br/>
 Font: Baskerville-SemiBold<br/>
 Font: Baskerville-BoldItalic<br/>
 Font: Baskerville-SemiBoldItalic<br/>
 Font: Baskerville-Bold<br/>
 Font: Baskerville<br/>
 Family: Didot<br/>
 Font: Didot-Italicv
 Font: Didot-Bold<br/>
 Font: Didot<br/>
 Family: Savoye LET<br/>
 Font: SavoyeLetPlain<br/>
 Family: Bodoni Ornaments<br/>
 Font: BodoniOrnamentsITCTT<br/>
 Family: Symbol<br/>
 Font: Symbol<br/>
 Family: Menlo<br/>
 Font: Menlo-Italic<br/>
 Font: Menlo-Bold<br/>
 Font: Menlo-Regular<br/>
 Font: Menlo-BoldItalic<br/>
 Family: Bodoni 72 Smallcaps<br/>
 Font: BodoniSvtyTwoSCITCTT-Book<br/>
 Family: DIN Alternate<br/>
 Font: DINAlternate-Bold<br/>
 Family: Papyrus<br/>
 Font: Papyrus<br/>
 Font: Papyrus-Condensed<br/>
 Family: Euphemia UCAS<br/>
 Font: EuphemiaUCAS-Italic<br/>
 Font: EuphemiaUCAS<br/>
 Font: EuphemiaUCAS-Bold<br/>
 Family: Telugu Sangam MN<br/>
 Font: TeluguSangamMN<br/>
 Font: TeluguSangamMN-Bold<br/>
 Family: Bangla Sangam MN<br/>
 Font: BanglaSangamMN-Bold<br/>
 Font: BanglaSangamMN<br/>
 Family: Zapfino<br/>
 Font: Zapfino<br/>
 Family: Bodoni 72 Oldstyle<br/>
 Font: BodoniSvtyTwoOSITCTT-Book<br/>
 Font: BodoniSvtyTwoOSITCTT-Bold<br/>
 Font: BodoniSvtyTwoOSITCTT-BookIt<br/>
 Family: DIN Condensed<br/>
 Font: DINCondensed-Bold</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpriteKit截屏并分享至社交网络]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/22/spritekitjie-ping-bing-fen-xiang-zhi-she-jiao-wang-luo/"/>
    <updated>2014-04-22T17:36:25+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/22/spritekitjie-ping-bing-fen-xiang-zhi-she-jiao-wang-luo</id>
    <content type="html"><![CDATA[<p>本文讲述在用<code>SpriteKit</code>制作iOS游戏的时候，如何让在用户在达到某种成就后分享自己的成就或分数，并附上一张游戏截屏，然后发到社交网络上</p>

<!--more-->


<h2>SpriteKit截屏</h2>

<p>传统的截屏方法是用UIView的layer来读取渲染上下文，生成图片</p>

<p>``` objc</p>

<p>UIGraphicsBeginImageContext(self.view.frame.size); //currentView 当前的view
[self.view.layer renderInContext:UIGraphicsGetCurrentContext()];
UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();
```</p>

<p>viewImage就是获取的截图，如果要将图片存入相册，只需在后面调用</p>

<p><code>
UIImageWriteToSavedPhotosAlbum(viewImage,nil,nil,nil);
</code>
而这一切都是基于<code>UIKit</code>的，在<code>SpriteKit</code>中，上面的方法是实效的，截屏的效果就是一张白色图片
但在苹果的官方文档中，明确提到了<code>SKTexture</code>的作用，最后一条是说可以将节点树渲染成纹理，可以应用于对游戏截屏。苹果还告诉了我们<code>SKView</code>的一个方法：<code>textureFromNode:</code>，该方法将以node包含的内容渲染成一个纹理，但是如何将<code>SKTexture</code>转换为<code>UIView</code>呢？我在workoverflow的一个<a href="http://stackoverflow.com/questions/21061248/uiimage-from-sktexture">提问</a>中找到了答案：</p>

<h3>方法一：</h3>

<p>```
&ndash; (UIImage<em>) imageWithView:(UIView </em>)view
{</p>

<pre><code>UIGraphicsBeginImageContextWithOptions(view.bounds.size, view.opaque, 0.0);

[view drawViewHierarchyInRect:view.bounds afterScreenUpdates:YES];

UIImage * img = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();

return img;
</code></pre>

<p>}</p>

<ul>
<li><p>(UIImage<em>) imageFromNode:(SKNode</em>)node
{
  SKTexture<em>      tex     = [self.scene.view textureFromNode:node];
  SKView</em>         view    = [[SKView alloc]initWithFrame:CGRectMake(0, 0, tex.size.width, tex.size.height)];
  SKScene<em>        scene   = [SKScene sceneWithSize:tex.size];
  SKSpriteNode</em>   sprite  = [SKSpriteNode spriteNodeWithTexture:tex];
  sprite.position = CGPointMake( CGRectGetMidX(view.frame), CGRectGetMidY(view.frame) );
  [scene addChild:sprite];
  [view presentScene:scene];</p>

<p>  return [self imageWithView:view];
}
```</p></li>
<li>get the SKTexture for your node using the current SKView</li>
<li>make another SKView that is just big enough for your texture</li>
<li>add a SKSpriteNode with the texture into your new scene, placing it in the middle</li>
<li>render the view into a graphics context</li>
</ul>


<h3>方法二:</h3>

<p>```
&ndash;(UIImage <em>)imageFromNode:(SKNode </em>)node {</p>

<pre><code>SKView *view = node.scene.view;
CGFloat scale = [UIScreen mainScreen].scale;
CGRect nodeFrame = [node calculateAccumulatedFrame];

// render SKView into UIImage
UIGraphicsBeginImageContextWithOptions(view.bounds.size, YES, 0.0);
[view drawViewHierarchyInRect:view.bounds afterScreenUpdates:YES];
UIImage *sceneSnapshot = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();

// crop to the requested node (making sure to flip the y-coordinate)
CGFloat originY = sceneSnapshot.size.height*scale - nodeFrame.origin.y*scale - nodeFrame.size.height*scale;
CGRect cropRect = CGRectMake(nodeFrame.origin.x * scale, originY, nodeFrame.size.width*scale, nodeFrame.size.height*scale);
CGImageRef croppedSnapshot = CGImageCreateWithImageInRect(sceneSnapshot.CGImage, cropRect);
UIImage *nodeSnapshot = [UIImage imageWithCGImage:croppedSnapshot];
CGImageRelease(croppedSnapshot);

return nodeSnapshot;
</code></pre>

<p>}
```
<strong>以上两个方法亲测好使！</strong></p>

<h2>使用Social.Framework分享游戏战绩</h2>

<p>因为比较懒不想在各种第三方社交网站申请APP注册然后使用SDK等，有点复杂，所以暂时用了苹果自带的Social.Framework</p>

<p>首先推荐一个比较好的<a href="https://github.com/yulingtianxia/ios6ShareDemo.git">Demo</a>，代码很容易读，容易上手</p>

<p>首先到target，Build Phases->link binary with libraries，添加social.framework，然后在要使用这个framework的文件头添加<code>@import Social;</code></p>

<p>记得要到iphone或者simulator里设置好对应社交网络的账号，填上用户名密码登录上，不然找不到account，不能post。如果找不到新浪微博，把系统语言调到中文。如果没有预先设置好账号，social.framework在真机和simulator上表现会不同。</p>

<h3>使用UIActivityViewController</h3>

<p>```
//某个SKScene中添加的代码</p>

<pre><code>    sharingImage = [self imageFromNode:self];//获取截屏图片
    NSArray *activityItems;
    if (sharingImage != nil) {
        activityItems = @[sharingText, sharingImage];
    } else {
        activityItems = @[sharingText];
    }

    UIActivityViewController *activityController =
    [[UIActivityViewController alloc] initWithActivityItems:activityItems
                                      applicationActivities:nil];

    [(UIViewController *)[self.view nextResponder] presentViewController:activityController
                       animated:YES completion:nil];
</code></pre>

<p>```</p>

<p><code>[self.view nextResponder]</code>的作用是获取当前<code>SKScene</code>的<code>UIViewController</code></p>

<p>如果想系统的学一下<code>UIActivityViewController</code>，建立看看这篇翻译自<a href="http://nshipster.com/uiactivityviewcontroller/">Mattt Thompson</a>的<a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-22-ui-activity-viewcontroller.md">博文</a></p>

<h3>使用SLComposeViewController</h3>

<p>这个就相当于上面里介绍的单个分享service
目前支持的平台有以下这些：</p>

<p><code>
SOCIAL_EXTERN NSString *const SLServiceTypeTwitter NS_AVAILABLE(10_8, 6_0);
SOCIAL_EXTERN NSString *const SLServiceTypeFacebook NS_AVAILABLE(10_8, 6_0);
SOCIAL_EXTERN NSString *const SLServiceTypeSinaWeibo NS_AVAILABLE(10_8, 6_0);
SOCIAL_EXTERN NSString *const SLServiceTypeTencentWeibo NS_AVAILABLE(10_9, 7_0);
SOCIAL_EXTERN NSString *const SLServiceTypeLinkedIn NS_AVAILABLE(10_9, NA);
</code>
先声明一个<code>SLComposeViewController *slComposerSheet;</code>，然后在需要添加分享逻辑的地方加入下面代码：(依然以微博为例子)</p>

<p>```</p>

<pre><code>[slComposerSheet setCompletionHandler:^(SLComposeViewControllerResult result) {
    NSLog(@"start completion block");
    NSString *output;
    switch (result) {
        case SLComposeViewControllerResultCancelled:
            output = @"Action Cancelled";
            break;
        case SLComposeViewControllerResultDone:
            output = @"Post Successfull";
            break;
        default:
            break;
    }
    if (result != SLComposeViewControllerResultCancelled)
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Weibo Message" message:output delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
        [alert show];
    }
}];

if([SLComposeViewController isAvailableForServiceType:SLServiceTypeSinaWeibo])
{
    slComposerSheet = [SLComposeViewController composeViewControllerForServiceType:SLServiceTypeSinaWeibo];
    [slComposerSheet setInitialText:self.sharingText];
    [slComposerSheet addImage:self.sharingImage];
    [slComposerSheet addURL:[NSURL URLWithString:@"http://www.weibo.com/"]];
    [self presentViewController:slComposerSheet animated:YES completion:nil];
}
</code></pre>

<p>```
这种方法我没试过，代码是照抄自前面提到的<a href="https://github.com/yulingtianxia/ios6ShareDemo.git">Demo</a>里</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用DFS算法计算SpriteKit中复合体的构成]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/21/yong-dfssuan-fa-ji-suan-spritekitzhong-fu-he-ti-de-gou-cheng/"/>
    <updated>2014-04-21T21:06:55+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/21/yong-dfssuan-fa-ji-suan-spritekitzhong-fu-he-ti-de-gou-cheng</id>
    <content type="html"><![CDATA[<p>在使用Sprite Kit开发iOS游戏的时候，有时我们需要把一些<code>SKNode</code>(或者其子类)的物理体(<code>SKPhysicsBody</code>)通过某种方式连在一起组合成一个<code>SKPhysicsJoint</code>，这样就可以让这个连接体在物理世界一起被模拟。例如我们可以将两个<code>SKNode</code>用绳子(<code>SKPhysicsJointLimit</code>)，弹簧(<code>SKPhysicsJointSpring</code>)，胶水(<code>SKPhysicsJointFixed</code>)，钉子(<code>SKPhysicsJointPin</code>)，滑轨(<code>SKPhysicsJointSliding</code>)组合在一起。</p>

<p>想象一些复杂的情况，比如玩家需要将游戏中多个相同的<code>SKNode</code>按照某种规则组合到一起，每个组合体包含<code>SKNode</code>的多少甚至形状(树或是环)都是游戏衡量玩家得分的标准。举个简单的例子：游戏里有好多彩色的球，玩家操作小球把它们粘在一起，将5个球粘在一起那么就能获得一份奖励</p>

<p>但是每个<code>SKPhysicsJoint</code>只负责将两个<code>SKPhysicsBody</code>连在一起</p>

<!--more-->


<p>其实这个问题可以简单归结为求图论中的联通图<br/>
我写了个<code>Graph</code>类，只需在初始化的时候传入想要参加计算的<code>SKNode</code>数组即可，主要是用递归实现<code>DFS(深度优先搜索)</code>，维护N个集合(<code>NSSet</code>)，N的个数就是游戏中子图的个数，最小的子图就是一个<code>SKNode</code>。</p>

<p>代码：</p>

<script src="https://gist.github.com/yulingtianxia/11142742.js"></script>


<p>可以在任意你需要的时候获取联通图信息：</p>

<p>``` objc</p>

<p>NSMutableArray <em>nodes = [NSMutableArray array];
[thisAtom.scene enumerateChildNodesWithName:AtomName usingBlock:^(SKNode </em>node, BOOL *stop) {</p>

<pre><code>    [nodes addObject:node];
}];
</code></pre>

<p>Graph *graph = [[Graph alloc] initWithNodes:nodes];
for (int i=0; i&lt;[graph.sets count]; i++) {</p>

<pre><code>NSLog(@"%@",graph.sets[i]);
</code></pre>

<p>}
```</p>

<p>完整代码在<a href="https://github.com/yulingtianxia/MyFirstGame.git">这里</a>的<code>ColorAtom</code>工程<br/>
在向<code>SKSpriteNode.userdata</code>写键值对的时候，发现写进去后再读取依然是nil，这是因为<code>userdata</code>属性完全归用户随意使用，苹果甚至在SKSpriteNode初始化的时候干脆默认<code>userdata</code>是<code>nil</code>，所以需要初始化下：</p>

<p><code>
((SKSpriteNode *)nodes[i]).userData = [NSMutableDictionary dictionary];
</code>
感谢StackOverFlow网友的回答：<a href="http://stackoverflow.com/questions/19073199/sprite-kit-ios7-sknode-userdata-property-not-storing-values">http://stackoverflow.com/questions/19073199/sprite-kit-ios7-sknode-userdata-property-not-storing-values</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS调试 — 基本技巧]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/17/iosdiao-shi-ji-ben-ji-qiao/"/>
    <updated>2014-04-17T13:32:00+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/17/iosdiao-shi-ji-ben-ji-qiao</id>
    <content type="html"><![CDATA[<p><strong>本文转载自<a href="http://beyondvincent.com">破船</a></strong></p>

<hr />

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/ios_debug.png"><img class="alignnone size-full wp-image-628" alt="ios_debug" src="http://beyondvincent.com/wp-content/uploads/2013/05/ios_debug.png" width="976" height="313" /></a></p>

<!--more-->


<p>在程序中，无论是你想弄清楚为什么数组中有3个对象而不是5个，或者为什么一个新的玩家开始之后，游戏在倒退——调试在这些处理过程中是比较重要的一部分。通过本文的学习，我们将知道在程序中，可以使用的大多数重要调试功能，并如何利用这些调试功能来帮助你以更少的时间解决bug。</p>

<p>本文将介绍如下内容：</p>

<ul>
<li>使用控制台检查程序的状态</li>
<li>进行日志记录，并熟练的驾驭NSLog</li>
<li>利用对象的生命周期跟踪内存的使用</li>
</ul>


<h2><strong><span style="color: #339966;">使用控制台进行检查</span></strong></h2>

<p>在进行调试程序的时候，可能Xcode底部的小黑框会是你最好的朋友。它能输出日志信息，错误信息以及其它各种有用的内容——这可以帮助你进行错误的跟踪。除了可以在看到日志的输出，我们还可以在某个断点出停留住，并检查程序中的变量信息。</p>

<h3><strong><span style="color: #339966;">带条件的断点</span></strong></h3>

<p>本文假设你以及知道断点是如何工作的了（即使不知道的话，也不用担心，看完本文之后，你将明白！）。</p>

<p>在某个特定的时间点命中断点是非常重要的，在有些断点中，有些时候需要通过一个痛苦的循环或者递归函数才能让我们的对象等于某个确定的值。此时我们可以使用条件断点！</p>

<p>条件断点是这样的一类断点：只有当满足某个确定的条件时，才会命中断点。可以想象一下：我们只希望当对象在某个确定的状态，或者循环迭代到第nth次时才命中断点。单击Xcode editor中的‘gutter’可以添加一个断点，在断点上单击右键，然后选择‘edit breakpoint’，就可以设置特定的条件了。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/conditionalBreakpoints.png"><img class="alignnone size-full wp-image-617" alt="conditionalBreakpoints" src="http://beyondvincent.com/wp-content/uploads/2013/05/conditionalBreakpoints.png" width="513" height="223" /></a></p>

<p>可以提供一个条件（例如i==12），或者断点忽略次数。另外还可以添加动作，该动作可根据断点自动发生，例如一个debugger command——打印一个值。</p>

<p><span style="color: #339966;"><strong>提示</strong></span>：添加/删除断点的键盘快捷键是command+\</p>

<p>另外一个重要的断点技巧是添加一个异常断点(exception breakpoint)。当遇到异常时，基本99%次Xcode都会自动转到main方法中的autorelease pool中。</p>

<div id="attachment_618" class="wp-caption alignnone" style="width: 682px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/05/unhelpful_break.png"><img class="size-full wp-image-618 " alt="unhelpful_break" src="http://beyondvincent.com/wp-content/uploads/2013/05/unhelpful_break.png" width="672" height="179" /></a><p class="wp-caption-text">
    感谢Xcode&#8230;真的太有用了！
  </p>
</div>


<p>通过异常断点，可以方便的定位到引起异常发生的具体代码行。异常断点的添加方法：打开异常断点tab（command+6）。选择窗口左下角的&#8221;+&#8221;按钮，并添加一个‘exception breakpoint’，这样，当Xcode遇到异常时，将会在引起异常代码的地方发生断点停留。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/Exception-breakpoint.png"><img class="alignnone size-full wp-image-619" alt="Exception-breakpoint" src="http://beyondvincent.com/wp-content/uploads/2013/05/Exception-breakpoint.png" width="501" height="194" /></a></p>

<h2><strong><span style="color: #339966;">在控制台进行手动打印</span></strong></h2>

<p>一般情况下，我们在程序代码中添加断点，是为了通过Xcode提供的‘variables view’（该view在Xcode底部console旁边）来查看变量的状态 。理论上，该窗口可以显示出与当前上下文相关的所有值的状态。实际上，这有点小问题，有时候断点过了之后，该窗口并不会进行相关的更新。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/variables-view.png"><img class="alignnone size-full wp-image-620" alt="variables view" src="http://beyondvincent.com/wp-content/uploads/2013/05/variables-view.png" width="579" height="210" /></a></p>

<p>&nbsp;</p>

<p>很不错的一个功能是：我们可以使用控制台的命令来检查某个特定的对象——这非常有用。在控制台输入‘<span style="color: #339966;">po</span>’就可以打印出指定对象的即时信息（处理scalar值时使用‘p’）。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/po_command.png"><img class="alignnone size-full wp-image-621" alt="po_command" src="http://beyondvincent.com/wp-content/uploads/2013/05/po_command.png" width="818" height="92" /></a></p>

<p>&nbsp;</p>

<p>在查看一个已经存在的对象时，这非常有用（如果对象不存在的话会打印出nil）——确定对象的值，查看数组/字典在运行时的信息，甚至是两个对象的比较（这个命令可以打印出相关对象的内存地址，我们可以打印出两个对象的信息，然后看看它们的内存地址是否相同）。</p>

<p>另外非常有用（但是被隐藏的命令）可以非常容易的对view进行检查——<span style="color: #339966;">the<em>recursiveDescription</em></span>命令——在view上调用这个命令可以打印出view的继承关系。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/recursiveDescription.png"><img class="alignnone size-full wp-image-622" alt="recursiveDescription" src="http://beyondvincent.com/wp-content/uploads/2013/05/recursiveDescription.png" width="607" height="89" /></a></p>

<h2><strong><span style="color: #339966;"> 有效的进行Log</span></strong></h2>

<p>&nbsp;</p>

<p>有时候在进行程序调试的某个确定时间里，我们希望将消息打印到控制台，此时可以使用<span style="color: #339966;">NSLog</span>函数，通过该函数可以将任意的输出打印到控制台。在不使用断点时，这个功能非常有用。NSLog遵从的格式与<em>[NSString StringWithFormat]</em>方法遵从的格式一样。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/nslog_use.png"><img class="alignnone size-full wp-image-623" alt="nslog_use" src="http://beyondvincent.com/wp-content/uploads/2013/05/nslog_use.png" width="595" height="78" /></a></p>

<p><strong>提示</strong>：这里可以看到Objective-C中关于字符串格式化的信息：<span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"> <a title="String Programming Guide" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Strings/Articles/FormatStrings.html"><span style="color: #339966; text-decoration: underline;">String Programming Guide</span></a></span></span></p>

<h3><strong><span style="color: #339966;">让NSLog更加智能</span></strong></h3>

<p>虽然NSLog非常有用，但是在真机上，从NSLog打印出来的任何内容都会被保留，隐藏所有人都可以看到——只需要将设备连接到电脑，然后打开XCode中的organiser，并定位到console，就可以看到每条log信息。可能你会意识到，这会带来一些严重的影响！想一下，如果你将一些保密的算法逻辑，或者用户密码打印到控制台！因此，如果苹果检测到在production build中，输出许多内容到控制台时，你的应用可能会被苹果拒绝上架到商店。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/nslog_public.png"><img class="alignnone size-full wp-image-624" alt="nslog_public" src="http://beyondvincent.com/wp-content/uploads/2013/05/nslog_public.png" width="981" height="292" /></a></p>

<p>&nbsp;</p>

<p>幸运的是，这里有一个最简单的办法进行log——通过一个宏，让NSLog只在debug build的时候起作用。将这个功能添加到全局都能访问得到的头文件中。这样你就可以尽情的使用log了，并且当进行production时，不会包含log相关代码。如下代码：</p>

<pre class="wp-code-highlight prettyprint linenums:1">#ifdef DEBUG
#define DMLog(...) NSLog(@"%s %@", __PRETTY_FUNCTION__, [NSString stringWithFormat:__VA_ARGS__])
#else
#define DMLog(...) do { } while (0)</pre>


<p>现在如果使用DMLog，那么将只会在debug build期间打印出log。而production build时则不会有任何log。通过<em>__PRETTY_FUNCTION\__</em> 可以打印出打印log所在的函数。</p>

<h3><strong><span style="color: #339966;">下一步</span></strong></h3>

<p>虽然NSLog非常出色，但它也有一些限制：</p>

<ul>
<li>只能在本地打印</li>
<li>不支持带级别的log（例如严重、警告等）</li>
<li>NSLog效率低。在进行大量处理时，NSLog会严重影响程序的执行效率</li>
</ul>


<p>互联网上也有一些框架可以进行日志记录，通过这些框架可以避免NSLog的一些限制。下面有两个不错的：</p>

<ul>
<li><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;"><a href="https://github.com/robbiehanson/CocoaLumberjack" target="_blank"><span style="color: #339966; text-decoration: underline;">Cocoa LumberJack</span></a> </span></span>– 这是针对Cocoa非常出名的一个日志框架。虽然刚开始用的时候会费劲点，但是它非常强大。</li>
<li><span style="text-decoration: underline; color: #339966;"><a href="https://www.assembla.com/wiki/show/snlog" target="_blank"><span style="color: #339966; text-decoration: underline;">SNLog</span></a></span> – NSLog的一个替代品。</li>
</ul>


<h2><strong><span style="color: #339966;">跟踪对象的生命周期</span></strong></h2>

<p>虽然ARC可以对内存进行有效的管理，不过在对象的生命周期内跟踪一些重要的事件仍然是重要的。毕竟ARC并不能完全消除内存泄露的可能性，或者确保访问的是一个被release掉的对象（ARC只是尽量避免这样的情况发生）。为此，我们可以使用一些方法和工具来观察并留意对象在做些什么。</p>

<h3><strong><span style="color: #339966;"> Log一些重要的事件</span></strong></h3>

<p>在一个Objective-C对象的生命周期中有两个重要的方法：init和dealloc。将这两个方法调用的事件log到控制台是不错的选择——你可以通过控制台观察到对象生命的开始，更重要的是，可以确保对象的释放。</p>

<pre class="wp-code-highlight prettyprint linenums:1">- (id)init
{
    self = [super init];
    if (self)
    {
        NSLog(@"%@: %@", NSStringFromSelector(_cmd), self);
    }
    return self;
}
- (void)dealloc
{
    NSLog(@"%@: %@", NSStringFromSelector(_cmd), self);
}</pre>


<h3><strong><span style="color: #339966;">静态分析器(Analyzer) 和检查器</span></strong></h3>

<p>在Xcode中有两个工具可以用来清理代码，以减少代码的错误率。静态分析器工具可以对我们的代码提出改进意见，比如检测出没有使用过的对象，没有release对象（针对Core Foundation对象，ARC仍然会有这样的问题）。通过选择Product菜单中的‘Anlayze’可以查看到相关建议。</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/analyse.png"><img class="alignnone size-full wp-image-633" alt="analyse" src="http://beyondvincent.com/wp-content/uploads/2013/05/analyse.png" width="987" height="115" /></a></p>

<p>&nbsp;</p>

<p>检查器是非常强大的一组工具，通过检查器不仅可以从不同的角度检查我们程序对内存的使用情况，文件系统的使用情况（增加、删除、修改等），甚至还提供了自动UI交互的方法。通过选择Product菜单中的‘Profile’可以查看到这些检查器。</p>

<p>选择‘Profile’会打开一个Instrument窗口，这里可以选择一个配置模板进行运行。最常用的模板有zombies（稍后会讨论），activity monitor和leaks。在程序运行时，对内存泄露进行捕捉时，Leaks可能是最有用的一个模板。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/Screen-Shot-2012-12-09-at-1.23.38-PM.png"><img class="alignnone size-full wp-image-634" alt="Screen-Shot-2012-12-09-at-1.23.38-PM" src="http://beyondvincent.com/wp-content/uploads/2013/05/Screen-Shot-2012-12-09-at-1.23.38-PM.png" width="513" height="193" /></a></p>

<p><strong style="font-size: 1.17em;"><span style="color: #339966;">Zombies是你的朋友</span></strong></p>

<p>虽然在有ARC的地方很难再遇到让人难受的EXC_BAD_ACCESS错误了，但是在某些确定的情况下，该错误还是会发生的。当在处理UIPopoverController或者core foundation对象时，我们可以访问一个已经被release掉的对象。一般，当我们release内存中的一个对象时，该对象将被销毁。但是，当Zombies开启时，只是将对象标记为release，实际上该对象还停留在内存中。当我们访问一个Zombie对象时，Xcode可以告诉我们正在访问的对象是一个不应该存在的对象了。因为Xcode知道这个对象是什么，所以可以让我们知道这个对象在哪里，以及这是什么时候发生的。</p>

<p>这里有两种方法可以查找出Zombies对象。使用检查器中的Zombie配置模板，或者在‘Run’ build选项中开启Zombie诊断选项。在Stop按钮的旁边，点击scheme名称，然后选择‘Edit Scheme’，点击diagnostic tab项，并勾选上‘Enable Zombie Objects’。注意，Zombie只能用在模拟器调试中，真机上不能使用。</p>

<p><a href="http://beyondvincent.com/wp-content/uploads/2013/05/Enabling-Zombies.png"><img class="alignnone size-full wp-image-635" alt="Enabling-Zombies" src="http://beyondvincent.com/wp-content/uploads/2013/05/Enabling-Zombies.png" width="613" height="227" /></a></p>

<h2><strong><span style="color: #339966;">结论</span></strong></h2>

<p>希望上面的这些关于调试技巧能给你带来帮助。通过上面的这些技巧，可以帮助你减少修改bug的时间，从而把更多的时间用在重要的地方——构建出色的程序！</p>

<p>上面列出来的不是一个完整的调试技巧。另外还有许多技术没有进行讨论，例如在真机中调试问题，远程bug报告，crash报告等。</p>

<p>祝编程愉快！</p>

<p>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____</p>

<p>本文由破船译自：<span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://mobile.tutsplus.com/tutorials/iphone/debugging-in-ios-essential-tips/" target="_blank"><span style="color: #339966; text-decoration: underline;">tutsplus</span></a></span></span><br/>
转载请注明出处：<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://www.beyondvincent.com/" target="_blank"><span style="color: #339966; text-decoration: underline;">BeyondVincent的博客</span></a></strong></span></span><br/>
_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_<strong>_</strong>_____</p>
]]></content>
  </entry>
  
</feed>

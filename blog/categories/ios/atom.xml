<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.github.io/"/>
  <updated>2014-04-07T17:27:27+08:00</updated>
  <id>http://yulingtianxia.github.io/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS单例模式orNSUserDefaults]]></title>
    <link href="http://yulingtianxia.github.io/blog/2014/04/07/iosdan-li-mo-shi-ornsuserdefaults/"/>
    <updated>2014-04-07T15:07:08+08:00</updated>
    <id>http://yulingtianxia.github.io/blog/2014/04/07/iosdan-li-mo-shi-ornsuserdefaults</id>
    <content type="html"><![CDATA[<p>本文内容：</p>

<ul>
<li>iOS的单例模式</li>
<li>NSUserDefaults的使用</li>
<li>总结</li>
</ul>


<h1>iOS的单例模式</h1>

<p>提起单例模式大家都不陌生，什么懒汉式，饿汉式，老汉式。。。扯远了
一开始觉得Objective－C中没有绝对的私有方法，该如何实现单例模式呢？后来觉得想多了，限制构造方法的使用式徒劳的，因为程序是人写的，既然是单例了，那就老老实实调用自己写的getInstance吧。Java笑了？一个反射打趴下！
在ARC时代，程序员不用费心计算static的实例被引用多少次，需要release巴拉巴拉。。。而自从有了GCD，iOS的单例模式变得超级简单了：</p>

<p>``` <br/>
+ (Singleton *)sharedInstance{</p>

<pre><code>static id instance = nil;
static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    instance = [[self alloc] init];
});
return instance;
</code></pre>

<p>}
```
instance为将被实例化的对象，为了让instance只被实例化一次，用到了GCD(Grand Central Dispatch)中的dispatch_once方法。该方法有两个参数，第二个参数是一个block，只会被执行一次。而第一个参数是一个谓词，用于判断代码块（block）是否执行完，这个谓词只能是全局或静态变量，类型为dispatch_once_t，其实dispatch_once_t就是long类型。你可以理解为第一个参数是个标识位，能保证记录第二个参数block的执行情况，即使是在最复杂的多线程并发执行的情况下，也就是说，GCD的这个方法是线程安全的。如果你对block这种类型比较陌生，可以把它暂时当作函数指针，当然，它比函数指针还要强大。<br/>
你可以重写init方法来实现饿汉式单例，也可以自定义initwithXXX来在需要实例化的时候调用之，实现懒汉式单例。</p>

<h1>NSUserDefaults</h1>

<p>很多APP启动时需要读取上次运行保存的一些状态，如何保存呢？Core Data，SQlite和UIDocuments未免杀鸡用牛刀了，而NSUserDefaults很适用于快速读取小规模的数据</p>

<p><code>
NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
</code>
写入数据</p>

<p><code>
NSString *string = [NSString stringWithString @"hahaha"];
[standardDefaults setObject:string forKey:@"myKey"];
[standardDefaults synchronize];//写完别忘了同步
</code>
读取数据</p>

<p><code>
NSString *value = [standardDefaults objectForKey:"myKey"];  
</code>
NSUserDefaults可以很好地理解成键值对</p>

<p>有时在写数据之前，想判断下这个健是否已经设置过默认值</p>

<p><code>
NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
if ([standardDefaults stringForKey:@"favoriteColor"] == nil) {
[standardDefaults setObject:@"Green" forKey:@"favoriteColor"];
[standardDefaults synchronize];
}
</code>
其实大可不必这么麻烦，摘自<a href="http://beyondvincent.com/blog/2013/04/20/13/">破船</a>推荐的方法<code>registerDefaults:</code></p>

<p><code>
NSUserDefaults *standardDefaults = [NSUserDefaults standardUserDefaults];
[standardDefaults registerDefaults:@{@"favoriteColor": @"Green"}];
[standardDefaults synchronize];
</code>
每次程序启动的时候调用<code>registerDefaults:</code> 方法都是安全的。完全可以将这个方法的调用放到<code>applicationDidFinishLaunching:</code>方法中. 这个方法永远都不会覆盖用户设置的值。<br/>
但是并不是所有类型的对象都能够直接放入NSUserDefaults，NSUserDefaults只支持： NSString, NSNumber, NSDate, NSArray, NSDictionary<br/>
解决方法：让这个自定义的类实现<NSCoding>协议，举个例子：</p>

<p>```
//SNShops.h</p>

<p>@interface SNShops : NSObject<NSCoding></p>

<p>@property (nonatomic,strong) NSString<em> sid;
@property (nonatomic,strong) NSString</em> name;</p>

<ul>
<li>(id) initWithCoder: (NSCoder *)coder;</li>
<li>(void) encodeWithCoder: (NSCoder *)coder;</li>
</ul>


<p>//SNShops.m
@implementation SNShops
&ndash; (id) initWithCoder: (NSCoder *)coder
{</p>

<pre><code>if (self = [super init])
{
    self.sid = [coder decodeObjectForKey:@"sid"];
    self.name = [coder decodeObjectForKey:@"name"];
}
return self;
</code></pre>

<p>}
&ndash; (void) encodeWithCoder: (NSCoder *)coder
{</p>

<pre><code>[coder encodeObject:self.sid forKey:@"sid"];
[coder encodeObject:self.name forKey:@"name"];
</code></pre>

<p>}</p>

<p>```</p>

<p>然后再存取时通过NSData做载体：<br/>
存入</p>

<p>```
NSUserDefaults <em>standardDefaults = [NSUserDefaults standardUserDefaults];
SNShops </em>shop = [[SNShops alloc]init];
NSData *shopData = [NSKeyedArchiver archivedDataWithRootObject:shop];
[standardDefaults setObject:shopData forKey:@&ldquo;myshop&rdquo;];
[standardDefaults synchronize];</p>

<p>```
读取</p>

<p><code>
NSData *newshopData = [standardDefaults objectForKey:"myshop"];
SNShops *newshop = [NSKeyedUnarchiver unarchiveObjectWithData:newshopData];
</code></p>

<h1>总结</h1>

<p>单例模式虽然能存入任何类型的对象，但是它会随着程序的挂起而消亡。而NSUserDefaults在读取自定义类型时有些繁琐，降低编码效率和可读性，好处是程序下次启动依然能读取到上次的状态。<br/>
笔者在实际应用中采取了二者结合的模式：让单例模式的类实现<NSCoding>协议，程序第一次启动的时候通过NSData做载体读取单例类的实例，并存入单例，程序运行中一直对单例做存储操作，当程序快要进入到后台挂起的时候，通过NSData做载体存入NSUserDefaults，一举两得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS程序员必备网站]]></title>
    <link href="http://yulingtianxia.github.io/blog/2014/04/07/ioscheng-xu-yuan-bi-bei-wang-zhan/"/>
    <updated>2014-04-07T13:50:00+08:00</updated>
    <id>http://yulingtianxia.github.io/blog/2014/04/07/ioscheng-xu-yuan-bi-bei-wang-zhan</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>记得最早接触iOS开发是在大二，那时国内相关资源还很少，比较适合新手入门的文章和视频也很少，感觉斯坦福大学的iPhone开发公开课算是最喜欢的了，还有<a href="http://blog.csdn.net/nicktang">NickTang</a>和<a href="http://www.cnblogs.com/dotey/">宝玉</a>的博客也给了我很多启发。那时正逢Objective－C刚刚推出了ARC，正处于是否用ARC的讨论中，这让我更加迷茫。<br/>
英文菜成渣的我开始看Apple官方的文档，download官方的demo，光是一个OC内存管理就看了好久；而如今国内中文的开发资源可以说比那时多很多了，所以想总结一下，方便大家。（PS：其实发现写博客最大的好处就是免得以后再用到某些东西的时候重复的查找，以前一直觉得应该把经验记录下来，但是一直懒得写，这次终于动手了^_^）</p>

<!-- more-->


<h1>正题</h1>

<h2>比较适合入门的 </h2>

<ul>
<li><a href="http://www.cocoachina.com/">CocoaChina</a>创立于2008年3月，是一个苹果产品和 iOS 开发的中文社区网站，主要为苹果产品开发者提供资讯、信息及服务。</li>
<li>Apple的官方文档，尤其是关于人机界面设计的和OC的，网址不固定，XCode中可以查看。（这里还建议使用Dash管理API文档）</li>
</ul>


<h2>学习进阶参考</h2>

<ul>
<li><a href="http://beyondvincent.com">破船之家</a> 翻译和汇总了很多来自<a href="http://www.raywenderlich.com">Ray</a>的教程，很经典实用，也有大量原创文章</li>
<li><a href="http://www.ityran.com">泰然网</a> 感觉做游戏比较多</li>
<li><a href="http://code4app.com/">Code4App</a> 偶然发现这个网站，集合了大量实例代码，超赞</li>
<li><a href="http://blog.devtang.com/">唐巧的博客</a> 大神人物，总怀疑当初启蒙我的Nick Tang就是他</li>
<li><a href="http://onevcat.com">王巍的博客</a> 精力充沛的大神，工作之余还上架了一些App，他的博客令我大开眼界</li>
<li><a href="http://www.cocos2d-x.org">cocos2d-x</a> 跨平台游戏制作神器，虽然我已经用上了Sprite Kit，但是这种重量级的游戏引擎还是必须mark下</li>
</ul>


<h2>工具类网站</h2>

<ul>
<li><a href="https://github.com/">Github</a> 代码托管版本控制，不解释</li>
<li><a href="http://stackoverflow.com/">Stackoverflow</a> 最令我佩服的就是80%的疑难杂症最后都在这里找到解决方案，这里有好多耐心的老外！</li>
</ul>


<p>其实还有很多优秀的网站没有收录，本文只是收录了本人能看懂的网址（英文伤不起），其实大量优秀的教程都是英文的啊！碰到问题现用现查还是最快，没事儿的时候可以看看本文提到的网站充充电。</p>
]]></content>
  </entry>
  
</feed>

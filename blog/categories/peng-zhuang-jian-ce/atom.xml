<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 碰撞检测 | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/peng-zhuang-jian-ce/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-08-09T16:41:44+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Double Dispatch模式及其在iOS开发中实践]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan/"/>
    <updated>2014-04-13T15:51:03+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>在一个太空大战游戏中，导弹可以撞向飞船，也可能撞向行星，所以在碰撞检测的时候就需要判断碰撞的结果。假设游戏有四种物体：飞船，陨石，行星，导弹，那么就产生了<code>4*3/2+4</code>种情形（一枚导弹撞上另一枚导弹）。这种排列组合计算出的结果会随着物体种类N的增多爆炸性增长，如果这个时候还用一堆if－else来检测碰撞，那真是<code>Naive</code>了。这时我们可以利用面向对象语言的多态性质来在程序运行时动态绑定，因为碰撞检测是一种“双向选择”，所以我们需要<code>double dispatch</code>（双分派），<code>Visitor</code>模式就是<code>double dispatch</code>的一种应用。<br/>
<img src="http://img41.wal8.com/img41/425047_20140623222918/14035338896.jpg" alt="Visitor模式" /></p>

<p>DD模式适合于处理多个对象之间的相互作用。假如不用DD模式的话，那么每个对象跟别的对象发生关系时，就必须辛辛苦苦的进行if&hellip;else&hellip;枚举，因为它并不知道对方是何神圣。DD模式的引入解决了这个问题，其实说白了就是利用语言内置的虚函数机制来替你干活，把工作移交给编译器去做了。</p>

<h2>本文内容</h2>

<ul>
<li>C++中的Double Dispatch实例</li>
<li>Java中的Double Dispatch实例</li>
<li>Objective-C中实现碰撞检测用到的Visitor模式</li>
</ul>


<!-- more-->


<h2>C++中的Double Dispatch实例</h2>

<p>本节内容摘自<a href="http://www.cnblogs.com/west-link/archive/2011/07/26/2116887.html">这里</a><br/>
我们先从字面上去理解它吧，直观地说，它指的是两次dispatch。这里的dispatch指的是什么呢？举个例子：</p>

<p>``` cpp
class Event
   {</p>

<pre><code>   public:
       virtual void PrintName()
       {
            cout&lt;&lt;"我是通用事件"&lt;&lt;endl;           
       }
</code></pre>

<p>   }</p>

<p>   class KeyEvent:public Event
   {</p>

<pre><code>  public:
       virtual void PrintName()
       {
            cout&lt;&lt;"我是按键事件"&lt;&lt;endl;           
       }
</code></pre>

<p>   }</p>

<p>   class ClickEvent:public Event
   {</p>

<pre><code>   public:
       virtual void PrintName()
       {
            cout&lt;&lt;"我是单击事件"&lt;&lt;endl;           
       }
</code></pre>

<p>   }
```</p>

<p>多态性是动态的，被调用的方法由对象的真正类型确定，这个过程就被称之为dispatch。例如在C++中，每个对象都有一个虚函数表，当用基类的类型引用子类对象时，虚函数指针指向的是子类的虚函数表，调用的虚函数都是子类中的版本，所以下面代码输出的是：“我是按键事件”，这就算是一次dispatch的过程，即根据对象类型来动态确定调用哪个函数的过程。</p>

<p><code>
Event* pEvent = new KeyEvent();
pEvent-&gt;PrintName();
</code></p>

<p>什么时候会用到两次dispatch呢? 继续往下看：</p>

<p>```
class EventRecorder
   {</p>

<pre><code>   public:
       virtual void RecordEvent(Event* event)
       {
           cout&lt;&lt;"使用EventRecorder记录通用事件"&lt;&lt; endl;           
       }

       virtual void RecordEvent(KeyEvent* event)
       {
           cout&lt;&lt;"使用EventRecorder记录按键事件"&lt;&lt; endl;           
       }

       virtual void RecordEvent(ClickEvent* event)
       {
           cout&lt;&lt;"使用EventRecorder记录单击事件"&lt;&lt; endl;           
       }
</code></pre>

<p>   }</p>

<p>   class AdvanceEventRecorder:public EventRecorder
   {</p>

<pre><code>   public:
       virtual void RecordEvent(Event* event)
       {
           cout&lt;&lt;"使用高级EventRecorder记录通用事件"&lt;&lt; endl;           
       }

       virtual void RecordEvent(KeyEvent* event)
       {
           cout&lt;&lt;"使用高级EventRecorder记录按键事件"&lt;&lt; endl;           
       }

       virtual void RecordEvent(ClickEvent* event)
       {
           cout&lt;&lt;"使用高级EventRecorder记录单击事件"&lt;&lt; endl;           
       }
</code></pre>

<p>   }
```</p>

<p>这两个类中分别包含三个重载函数，多态是动态的，而函数重载则是静态的，它在编译时期就确定下来了，所以，下面代码片段的运行结果并不是我们所期望的:</p>

<p>```</p>

<pre><code>EventRecorder* pRecorder = new AdvanceEventRecorder();
Event* pEvent = new KeyEvent();
pRecorder-&gt;RecordEvent(pEvent);
</code></pre>

<p>```
输出内容为：使用高级EventRecorder记录通用事件<br/>
实际上，在这个场景中，我们期望调用的是：AdvanceEventRecorder::RecordEvent(KeyEvent* event)<br/>
下面我们使用Double Dispatch设计模式来达到上面的代码片段的目的，在所有Event对象中增加下面的函数：</p>

<p>```
   virtual void RecordEvent(EventRecorder* recorder)
   {</p>

<pre><code>  recorder-&gt;RecordEvent(this);
</code></pre>

<p>   }
```
下面的代码片段将输出：使用高级EventRecorder记录按键事件</p>

<p>```</p>

<pre><code>EventRecorder* pRecorder = new AdvanceEventRecorder();
Event* pEvent = new KeyEvent();
pEvent-&gt;RecordEvent(pRecorder);
</code></pre>

<p><code>``
可以看出，第一次dispatch正确地找到了</code>KeyEvent<code>的</code>RecordEvent(EventRecorder<em> recorder)<code>，第二次dispatch找到了</code>AdvanceEventRecorder<code>的</code>RecordEvent(KeyEvent</em> event)`。
   Visitor模式就是对Double Dispatch的应用，另外，在碰撞检测算法中也会经常用到。</p>

<h2>Java中的Double Dispatch实例</h2>

<p>本节参考自<a href="http://www.blogjava.net/chaocai/archive/2009/02/19/255640.html">这里</a>
相对于C++中使用继承来说，Java提供的接口和函数重载让Double Dispatch模式更容易实现</p>

<h3>1 根据对象来选择行为问题</h3>

<p><code>java
public interface Event {
}
public class BlueEvent implements Event {
}
public class RedEvent implements Event {
}
public class Handler {
public void handle(Event event){
System.out.println("It is event");
}
public void handle(RedEvent event){
System.out.println("It is RedEvent");
}
public void handle(BlueEvent event){
System.out.println("It is BlueEvent");
}
}
public class Main {
public static void main(String[] args) {
Event evt=new BlueEvent();
new Handler().handle(evt);
}
}
</code></p>

<p>你认为运行结果是什么呢？<br/>
结果：It is event<br/>
是不是有点出乎意料，不是It is BlueEvent，<strong>这是因为Overload并不支持在运行时根据参数的运行时类型来绑定方法</strong>，所以要执行哪个方法是在编译时就选定了的。</p>

<h3>2 Double Dispatch Pattern</h3>

<p>由于Java,C++及C#都具有上述局限，通常我们只能通过Switch或if结构来实现，当然这种实现方式既不优雅而且影响代码的可维护性。<br/>
通过以下的Double Dispatch Pattern便可以优雅的实现。</p>

<p><code>
public interface Event {
public void injectHandler(EventHandler v);
}
public class BlueEvent implements Event {
public void injectHandler(EventHandler v) {
v.handle(this);
}
}
public class RedEvent implements Event {
public void injectHandler(EventHandler v) {
v.handle(this);
}
}
public class EventHandler {
public void handle(BlueEvent e){
System.out.println("It is BlueEvent");
}
public void handle(RedEvent e){
System.out.println("It is RedEvent");
}
}
public class Main {
public static void main(String[] args) {
Event evt=new BlueEvent();
evt.injectHandler(new EventHandler());
}
}
</code></p>

<h2>Objective-C中实现碰撞检测用到的Visitor模式</h2>

<p>虽然OC不支持函数重载，但是我们可以老老实实的用方法名来区分类似<code>visitXXX</code>的访问方法，并利用OC其独有的SEL类型可以很好的在运行时判断该调用哪个方法</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389425.jpg" alt="" /></p>

<p>感谢kouky提供的iOS上碰撞检测的<a href="https://github.com/kouky/iOS-SpriteKit-Pong">Demo</a>，这里他用到了Visitor模式<br/>
由于判断物体类型是用一个32位掩码来标记，所以这里不可避免的要用到if语句，这不代表它不是动态绑定，因为if语句是在初始化方法<code>+ (id)contactVisitorWithBody:(SKPhysicsBody *)body forContact:(SKPhysicsContact *)contact</code>中其作用的，只是为了判断物体类型，而不是判断碰撞两者的组合类型<br/>
可以参考我写的例子<a href="https://github.com/yulingtianxia/MyFirstGame/tree/master/ColorAtom">ColorAtom</a></p>

<p>首先新建一个访问者基本类<code>ContactVisitor</code>，其本质为对SKPhysicsBody和SKPhysicsContact对象的封装，而SKPhysicsContact在本例中虽未用到（因为碰撞检测后啥也没干，只输出了碰撞双方name），但其保存着碰撞坐标等信息，也很重要。两次dispatch都是在访问者基本类实现的，而碰撞后具体操作则卸载了访问者具体类（如AtomNodeContactVisitor）</p>

<p>``` objc</p>

<p>//  ContactVisitor.h
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>import &lt;SpriteKit/SpriteKit.h></h1>

<p>@interface ContactVisitor : NSObject</p>

<p>@property (nonatomic,readonly, strong) SKPhysicsBody <em>body;
@property (nonatomic, readonly, strong) SKPhysicsContact </em>contact;</p>

<ul>
<li>(id)contactVisitorWithBody:(SKPhysicsBody <em>)body forContact:(SKPhysicsContact </em>)contact;</li>
<li>(void)visit:(SKPhysicsBody *)body;</li>
</ul>


<p>@end
```</p>

<p>属性body即为访问者的SKPhysicsBody，而方法<code>visit:</code>的参数为被访问者的SKPhysicsBody<br/>
<code>contactVisitorWithBody:forContact:</code>方法的作用是根据掩码类型初始化对应类型的访问者具体类</p>

<p>```
//
//  ContactVisitor.m
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;ContactVisitor.h&rdquo;</h1>

<h1>import &lt;objc/runtime.h></h1>

<h1>import &ldquo;NodeCategories.h&rdquo;</h1>

<h1>import &ldquo;AtomNodeContactVisitor.h&rdquo;</h1>

<h1>import &ldquo;PlayFieldSceneContactVisitor.h&rdquo;</h1>

<p>@implementation ContactVisitor
+ (id)contactVisitorWithBody:(SKPhysicsBody <em>)body forContact:(SKPhysicsContact </em>)contact
{</p>

<pre><code>//第一次dispatch，通过node类别返回对应的实例
if ((body.categoryBitMask&amp;AtomCategory)!=0) {
    return [[AtomNodeContactVisitor alloc] initWithBody:body forContact:contact];
}
if ((body.categoryBitMask&amp;PlayFieldCategory)!=0) {
    return [[PlayFieldSceneContactVisitor alloc] initWithBody:body forContact:contact];
}
else{
    return nil;
}
</code></pre>

<p>}</p>

<ul>
<li><p>(id)initWithBody:(SKPhysicsBody <em>)body forContact:(SKPhysicsContact </em>)contact
{
  self = [super init];
  if (self) {
      <em>contact = contact;
      </em>body = body;
  }
  return self;
}</p></li>
<li><p>(void)visit:(SKPhysicsBody <em>)body
{
  //第二次dispatch，通过构造方法名来执行对应方法
  // 生成node的名字，比如"AtomNode"
  NSString </em>bodyClassName = [NSString stringWithUTF8String:class_getName(body.node.class)];</p>

<p>  // 生成方法名，比如"visitAtomBody"
  NSMutableString *contactSelectorString = [NSMutableString stringWithFormat:@&ldquo;visit&rdquo;];
  [contactSelectorString appendString:bodyClassName];
  [contactSelectorString appendString:@&ldquo;:&rdquo;];</p>

<p>  SEL selector = NSSelectorFromString(contactSelectorString);
  //判断是否存在此方法
  if ([self respondsToSelector:selector]) {
      [self performSelector:selector withObject:body];
  }</p></li>
</ul>


<p>}</p>

<p>```</p>

<p>以访问者具体类以<code>AtomNodeContactVisitor</code>类为例，它继承自访问者基本类ContactVisitor</p>

<p>```</p>

<p>//
//  AtomNodeContactVisitor.h
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;ContactVisitor.h&rdquo;</h1>

<p>@interface AtomNodeContactVisitor : ContactVisitor</p>

<p>/<em>Atom访问了Atom，同类碰撞</em>/
&ndash;(void) visitAtomNode:(SKPhysicsBody<em>) anotherAtomBody;
/</em>Atom访问了边界，也就是球撞墙上了<em>/
&ndash;(void) visitPlayFieldScene:(SKPhysicsBody</em>) playfieldBody;
@end</p>

<p>```</p>

<p>在处理碰撞后的visitXXX方法中，我将碰撞双方的访问者和被访问者的关系输出</p>

<p>```
//
//  AtomNodeContactVisitor.m
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;AtomNodeContactVisitor.h&rdquo;</h1>

<h1>import &ldquo;AtomNode.h&rdquo;</h1>

<h1>import &ldquo;PlayFieldScene.h&rdquo;</h1>

<p>@implementation AtomNodeContactVisitor
&ndash;(void) visitAtomNode:(SKPhysicsBody*) anotherAtomBody
{</p>

<pre><code>AtomNode *thisAtom = (AtomNode*)self.body.node;
AtomNode *anotherAtom = (AtomNode*)anotherAtomBody.node;
//处理碰撞后的结果
NSLog(@"%@-&gt;%@",thisAtom.name,anotherAtom.name);
</code></pre>

<p>}
&ndash;(void) visitPlayFieldScene:(SKPhysicsBody*) playfieldBody
{</p>

<pre><code>AtomNode *atom = (AtomNode*)self.body.node;
PlayFieldScene *playfield = (PlayFieldScene*) playfieldBody.node;
NSLog(@"%@-&gt;%@",atom.name,playfield.name);
</code></pre>

<p>}
@end
```
下面建立被访问者类，其本质就是对SKPhysicsBody的封装，并接受Visitor的注入</p>

<p>```
//
//  VisitablePhysicsBody.h
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>import &ldquo;ContactVisitor.h&rdquo;</h1>

<p>@interface VisitablePhysicsBody : NSObject
@property (nonatomic, readonly, strong) SKPhysicsBody *body;</p>

<ul>
<li>(id) initWithBody:(SKPhysicsBody *)body;</li>
<li>(void) acceptVisitor:(ContactVisitor *)visitor;</li>
</ul>


<p>@end
```</p>

<p>关键的一步：在<code>acceptVisitor:</code>方法中调用访问者的<code>visit:</code>方法</p>

<p>```
//
//  VisitablePhysicsBody.m
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;VisitablePhysicsBody.h&rdquo;</h1>

<p>@implementation VisitablePhysicsBody
&ndash; (id)initWithBody:(SKPhysicsBody *)body
{</p>

<pre><code>self = [super init];
if (self) {
    _body = body;
}
return self;
</code></pre>

<p>}</p>

<ul>
<li>(void)acceptVisitor:(ContactVisitor *)visitor
{
  [visitor visit:self.body];
}</li>
</ul>


<p>@end</p>

<p>```</p>

<p>可能有人会有疑问，<code>visit:</code>方法穿入的参数类型永远是<code>SKPhysicsBody</code>，这哪里是动态绑定啊，其实是由于本例的特殊性，碰撞检测时区分物体类型不是靠<code>SKPhysicsBody</code>子类化来区分和绑定，而是靠SKPhysicsBody类中的<code>categoryBitMask</code>属性来区分，这也就免不了需要在<code>ContactVisitor</code>初始化的时候通过if语句来判断具体初始化哪个子类<br/>
最后，在Scene实现SKPhysicsContactDelegate协议</p>

<p>```</p>

<h1>pragma mark SKPhysicsContactDelegate</h1>

<p>&ndash;(void)didBeginContact:(SKPhysicsContact *)contact
{</p>

<pre><code>//A-&gt;B
ContactVisitor *visitorA = [ContactVisitor contactVisitorWithBody:contact.bodyA forContact:contact];
VisitablePhysicsBody *visitableBodyB = [[VisitablePhysicsBody alloc] initWithBody:contact.bodyB];
[visitableBodyB acceptVisitor:visitorA];
//B-&gt;A
ContactVisitor *visitorB = [ContactVisitor contactVisitorWithBody:contact.bodyB forContact:contact];
VisitablePhysicsBody *visitableBodyA = [[VisitablePhysicsBody alloc] initWithBody:contact.bodyA];
[visitableBodyA acceptVisitor:visitorB];
</code></pre>

<p>}
```
物理老师总说力的作用时相互的，所以我们需要两次访问：A访问B和B访问A，但是这样会调用两次visitXXX方法，原则上这两个逻辑上对称的方法我们只需要实现其中一个就可以，但必须得像上面代码一样，A->B和B->A缺一不可，因为碰撞的时候我们不知道bodyA和bodyB的类型，也就无法判断visitXXX方法是A->B时能调用还是B->A时能调用到<br/>
当然，你也可以两个visit方法都实现，但只对visitor的node做操作，或只对visitable的node操作，总之仁者见仁智者见智啦</p>
]]></content>
  </entry>
  
</feed>

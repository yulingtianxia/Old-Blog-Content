<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 碰撞检测 | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/peng-zhuang-jian-ce/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-09-26T18:38:38+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Double Dispatch模式及其在iOS开发中实践]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan/"/>
    <updated>2014-04-13T15:51:03+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>在一个太空大战游戏中，导弹可以撞向飞船，也可能撞向行星，所以在碰撞检测的时候就需要判断碰撞的结果。假设游戏有四种物体：飞船，陨石，行星，导弹，那么就产生了<code>4*3/2+4</code>种<a href="http://yulingtianxia.qiniudn.com/%E6%83%85%E5%BD%A2%EF%BC%88%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9%E6%92%9E%E4%B8%8A%E5%8F%A6%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9%EF%BC%89%E3%80%82%E8%BF%99%E7%A7%8D%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E8%AE%A1%E7%AE%97%E5%87%BA%E7%9A%84%E7%BB%93%E6%9E%9C%E4%BC%9A%E9%9A%8F%E7%9D%80%E7%89%A9%E4%BD%93%E7%A7%8D%E7%B1%BBN%E7%9A%84%E5%A2%9E%E5%A4%9A%E7%88%86%E7%82%B8%E6%80%A7%E5%A2%9E%E9%95%BF%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E8%BF%98%E7%94%A8%E4%B8%80%E5%A0%86if%EF%BC%8Delse%E6%9D%A5%E6%A3%80%E6%B5%8B%E7%A2%B0%E6%92%9E%EF%BC%8C%E9%82%A3%E7%9C%9F%E6%98%AF">http://yulingtianxia.qiniudn.com/%E6%83%85%E5%BD%A2%EF%BC%88%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9%E6%92%9E%E4%B8%8A%E5%8F%A6%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9%EF%BC%89%E3%80%82%E8%BF%99%E7%A7%8D%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E8%AE%A1%E7%AE%97%E5%87%BA%E7%9A%84%E7%BB%93%E6%9E%9C%E4%BC%9A%E9%9A%8F%E7%9D%80%E7%89%A9%E4%BD%93%E7%A7%8D%E7%B1%BBN%E7%9A%84%E5%A2%9E%E5%A4%9A%E7%88%86%E7%82%B8%E6%80%A7%E5%A2%9E%E9%95%BF%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E8%BF%98%E7%94%A8%E4%B8%80%E5%A0%86if%EF%BC%8Delse%E6%9D%A5%E6%A3%80%E6%B5%8B%E7%A2%B0%E6%92%9E%EF%BC%8C%E9%82%A3%E7%9C%9F%E6%98%AF</a><code>Naive</code>了。这时我们可以利用面向对象语言的多态性质来在程序运行时动态绑定，因为碰撞检测是一种“双向选择”，所以我们需要<code>double dispatch</code>（双分派），<code>Visitor</code>模式就是<code>double dispatch</code>的一种应用。<br/>
<img src="http://yulingtianxia.qiniudn.com/14035338896.jpg" alt="Visitor模式" /></p>

<p>DD模式适合于处理多个对象之间的相互作用。假如不用DD模式的话，那么每个对象跟别的对象发生关系时，就必须辛辛苦苦的进行if&hellip;else&hellip;枚举，因为它并不知道对方是何神圣。DD模式的引入解决了这个问题，其实说白了就是利用语言内置的虚函数机制来替你干活，把工作移交给编译器去做了。</p>

<h2>本文内容</h2>

<ul>
<li>C++中的Double Dispatch实例</li>
<li>Java中的Double Dispatch实例</li>
<li>Objective-C中实现碰撞检测用到的Visitor模式</li>
</ul>


<!-- more-->


<h2>C++中的Double Dispatch实例</h2>

<p>本节内容摘自<a href="http://www.cnblogs.com/west-link/archive/2011/07/26/2116887.html">这里</a><br/>
我们先从字面上去理解它吧，直观地说，它指的是两次dispatch。这里的dispatch指的是什么呢？举个例子：</p>

<p>&#8220;` cpp
class Event
   {</p>

<pre><code>   public:
       virtual void PrintName()
       {
            cout&lt;&lt;"我是通用事件"&lt;&lt;endl;           
       }
</code></pre>

<p>   }</p>

<p>   class KeyEvent:public Event
   {</p>

<pre><code>  public:
       virtual void PrintName()
       {
            cout&lt;&lt;"我是按键事件"&lt;&lt;endl;           
       }
</code></pre>

<p>   }</p>

<p>   class ClickEvent:public Event
   {</p>

<pre><code>   public:
       virtual void PrintName()
       {
            cout&lt;&lt;"我是单击事件"&lt;&lt;endl;           
       }
</code></pre>

<p>   }
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">多态性是动态的，被调用的方法由对象的真正类型确定，这个过程就被称之为</span><span class="n">dispatch</span><span class="err">。例如在</span><span class="n">C</span><span class="o">++</span><span class="err">中，每个对象都有一个虚函数表，当用基类的类型引用子类对象时，虚函数指针指向的是子类的虚函数表，调用的虚函数都是子类中的版本，所以下面代码输出的是：“我是按键事件”，这就算是一次</span><span class="n">dispatch</span><span class="err">的过程，即根据对象类型来动态确定调用哪个函数的过程。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">Event</span><span class="o">*</span> <span class="n">pEvent</span> <span class="o">=</span> <span class="n">new</span> <span class="n">KeyEvent</span><span class="p">();</span>
</span><span class='line'><span class="n">pEvent</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">PrintName</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">什么时候会用到两次</span><span class="n">dispatch</span><span class="err">呢</span><span class="o">?</span> <span class="err">继续往下看：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="n">EventRecorder</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="nl">public</span><span class="p">:</span>
</span><span class='line'>       <span class="n">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">Event</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;使用EventRecorder记录通用事件&quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;使用EventRecorder记录按键事件&quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">ClickEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;使用EventRecorder记录单击事件&quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="k">class</span> <span class="nl">AdvanceEventRecorder</span><span class="p">:</span><span class="n">public</span> <span class="n">EventRecorder</span>
</span><span class='line'>   <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>   <span class="nl">public</span><span class="p">:</span>
</span><span class='line'>       <span class="n">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">Event</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;使用高级EventRecorder记录通用事件&quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;使用高级EventRecorder记录按键事件&quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="n">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">ClickEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="n">cout</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="s">&quot;使用高级EventRecorder记录单击事件&quot;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这两个类中分别包含三个重载函数，多态是动态的，而函数重载则是静态的，它在编译时期就确定下来了，所以，下面代码片段的运行结果并不是我们所期望的:</p>

<p>&#8220;`</p>

<pre><code>EventRecorder* pRecorder = new AdvanceEventRecorder();
Event* pEvent = new KeyEvent();
pRecorder-&gt;RecordEvent(pEvent);
</code></pre>

<p>&#8220;`
输出内容为：使用高级EventRecorder记录通用事件<br/>
实际上，在这个场景中，我们期望调用的是：AdvanceEventRecorder::RecordEvent(KeyEvent* event)<br/>
下面我们使用Double Dispatch设计模式来达到上面的代码片段的目的，在所有Event对象中增加下面的函数：</p>

<p>&#8220;`
   virtual void RecordEvent(EventRecorder* recorder)
   {</p>

<pre><code>  recorder-&gt;RecordEvent(this);
</code></pre>

<p>   }
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">下面的代码片段将输出：使用高级</span><span class="n">EventRecorder</span><span class="err">记录按键事件</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">EventRecorder</span><span class="o">*</span> <span class="n">pRecorder</span> <span class="o">=</span> <span class="n">new</span> <span class="n">AdvanceEventRecorder</span><span class="p">();</span>
</span><span class='line'><span class="n">Event</span><span class="o">*</span> <span class="n">pEvent</span> <span class="o">=</span> <span class="n">new</span> <span class="n">KeyEvent</span><span class="p">();</span>
</span><span class='line'><span class="n">pEvent</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">RecordEvent</span><span class="p">(</span><span class="n">pRecorder</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="err">可以看出，第一次</span><span class="n">dispatch</span><span class="err">正确地找到了</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">KeyEvent</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecordEvent</span><span class="p">(</span><span class="n">EventRecorder</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">recorder</span><span class="p">)</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，第二次</span><span class="n">dispatch</span><span class="err">找到了</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AdvanceEventRecorder</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecordEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">event</span><span class="p">)</span><span class="err">`。</span>
</span><span class='line'>   <span class="n">Visitor</span><span class="err">模式就是对</span><span class="n">Double</span> <span class="n">Dispatch</span><span class="err">的应用，另外，在碰撞检测算法中也会经常用到。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">Java</span><span class="err">中的</span><span class="n">Double</span> <span class="n">Dispatch</span><span class="err">实例</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">本节参考自</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.blogjava.net/chaocai/archive/2009/02/19/255640.html&quot;</span><span class="o">&gt;</span><span class="err">这里</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">相对于</span><span class="n">C</span><span class="o">++</span><span class="err">中使用继承来说，</span><span class="n">Java</span><span class="err">提供的接口和函数重载让</span><span class="n">Double</span> <span class="n">Dispatch</span><span class="err">模式更容易实现</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="mi">1</span> <span class="err">根据对象来选择行为问题</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">java</span>
</span><span class='line'><span class="n">public</span> <span class="n">interface</span> <span class="n">Event</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">BlueEvent</span> <span class="n">implements</span> <span class="n">Event</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">RedEvent</span> <span class="n">implements</span> <span class="n">Event</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">Handler</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">handle</span><span class="p">(</span><span class="n">Event</span> <span class="n">event</span><span class="p">){</span>
</span><span class='line'><span class="n">System</span><span class="p">.</span><span class="k">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It is event&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">handle</span><span class="p">(</span><span class="n">RedEvent</span> <span class="n">event</span><span class="p">){</span>
</span><span class='line'><span class="n">System</span><span class="p">.</span><span class="k">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It is RedEvent&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">handle</span><span class="p">(</span><span class="n">BlueEvent</span> <span class="n">event</span><span class="p">){</span>
</span><span class='line'><span class="n">System</span><span class="p">.</span><span class="k">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It is BlueEvent&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">Main</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">Event</span> <span class="n">evt</span><span class="o">=</span><span class="n">new</span> <span class="n">BlueEvent</span><span class="p">();</span>
</span><span class='line'><span class="n">new</span> <span class="nf">Handler</span><span class="p">().</span><span class="n">handle</span><span class="p">(</span><span class="n">evt</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">你认为运行结果是什么呢？</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">结果：</span><span class="n">It</span> <span class="n">is</span> <span class="n">event</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">是不是有点出乎意料，不是</span><span class="n">It</span> <span class="n">is</span> <span class="n">BlueEvent</span><span class="err">，</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">这是因为</span><span class="n">Overload</span><span class="err">并不支持在运行时根据参数的运行时类型来绑定方法</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">，所以要执行哪个方法是在编译时就选定了的。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="mi">2</span> <span class="n">Double</span> <span class="n">Dispatch</span> <span class="n">Pattern</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">由于</span><span class="n">Java</span><span class="p">,</span><span class="n">C</span><span class="o">++</span><span class="err">及</span><span class="n">C</span><span class="err">#都具有上述局限，通常我们只能通过</span><span class="n">Switch</span><span class="err">或</span><span class="k">if</span><span class="err">结构来实现，当然这种实现方式既不优雅而且影响代码的可维护性。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">通过以下的</span><span class="n">Double</span> <span class="n">Dispatch</span> <span class="n">Pattern</span><span class="err">便可以优雅的实现。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">public</span> <span class="n">interface</span> <span class="n">Event</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">injectHandler</span><span class="p">(</span><span class="n">EventHandler</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">BlueEvent</span> <span class="n">implements</span> <span class="n">Event</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">injectHandler</span><span class="p">(</span><span class="n">EventHandler</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">handle</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">RedEvent</span> <span class="n">implements</span> <span class="n">Event</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">injectHandler</span><span class="p">(</span><span class="n">EventHandler</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">handle</span><span class="p">(</span><span class="n">this</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">EventHandler</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">handle</span><span class="p">(</span><span class="n">BlueEvent</span> <span class="n">e</span><span class="p">){</span>
</span><span class='line'><span class="n">System</span><span class="p">.</span><span class="k">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It is BlueEvent&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="kt">void</span> <span class="n">handle</span><span class="p">(</span><span class="n">RedEvent</span> <span class="n">e</span><span class="p">){</span>
</span><span class='line'><span class="n">System</span><span class="p">.</span><span class="k">out</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It is RedEvent&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="k">class</span> <span class="n">Main</span> <span class="p">{</span>
</span><span class='line'><span class="n">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">Event</span> <span class="n">evt</span><span class="o">=</span><span class="n">new</span> <span class="n">BlueEvent</span><span class="p">();</span>
</span><span class='line'><span class="n">evt</span><span class="p">.</span><span class="n">injectHandler</span><span class="p">(</span><span class="n">new</span> <span class="n">EventHandler</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">中实现碰撞检测用到的</span><span class="n">Visitor</span><span class="err">模式</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">虽然</span><span class="n">OC</span><span class="err">不支持函数重载，但是我们可以老老实实的用方法名来区分类似</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">visitXXX</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的访问方法，并利用</span><span class="n">OC</span><span class="err">其独有的</span><span class="kt">SEL</span><span class="err">类型可以很好的在运行时判断该调用哪个方法</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353389425.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">感谢</span><span class="n">kouky</span><span class="err">提供的</span><span class="n">iOS</span><span class="err">上碰撞检测的</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/kouky/iOS-SpriteKit-Pong&quot;</span><span class="o">&gt;</span><span class="n">Demo</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">，这里他用到了</span><span class="n">Visitor</span><span class="err">模式</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">由于判断物体类型是用一个</span><span class="mi">32</span><span class="err">位掩码来标记，所以这里不可避免的要用到</span><span class="k">if</span><span class="err">语句，这不代表它不是动态绑定，因为</span><span class="k">if</span><span class="err">语句是在初始化方法</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">contactVisitorWithBody</span><span class="p">:(</span><span class="bp">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="n">body</span> <span class="nl">forContact</span><span class="p">:(</span><span class="bp">SKPhysicsContact</span> <span class="o">*</span><span class="p">)</span><span class="n">contact</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中其作用的，只是为了判断物体类型，而不是判断碰撞两者的组合类型</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">可以参考我写的例子</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/yulingtianxia/MyFirstGame/tree/master/ColorAtom&quot;</span><span class="o">&gt;</span><span class="n">ColorAtom</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">首先新建一个访问者基本类</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ContactVisitor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，其本质为对</span><span class="bp">SKPhysicsBody</span><span class="err">和</span><span class="bp">SKPhysicsContact</span><span class="err">对象的封装，而</span><span class="bp">SKPhysicsContact</span><span class="err">在本例中虽未用到（因为碰撞检测后啥也没干，只输出了碰撞双方</span><span class="n">name</span><span class="err">），但其保存着碰撞坐标等信息，也很重要。两次</span><span class="n">dispatch</span><span class="err">都是在访问者基本类实现的，而碰撞后具体操作则卸载了访问者具体类（如</span><span class="n">AtomNodeContactVisitor</span><span class="err">）</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span> <span class="n">objc</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//  ContactVisitor.h</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright &amp;copy; 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">SpriteKit</span><span class="o">/</span><span class="n">SpriteKit</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">ContactVisitor</span> : <span class="bp">NSObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">readonly</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">SKPhysicsBody</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">body</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">SKPhysicsContact</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">contact</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">contactVisitorWithBody</span><span class="p">:(</span><span class="bp">SKPhysicsBody</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">body</span> <span class="nl">forContact</span><span class="p">:(</span><span class="bp">SKPhysicsContact</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">contact</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">visit</span><span class="p">:(</span><span class="bp">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="n">body</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>属性body即为访问者的SKPhysicsBody，而方法<code>visit:</code>的参数为被访问者的SKPhysicsBody<br/>
<code>contactVisitorWithBody:forContact:</code>方法的作用是根据掩码类型初始化对应类型的访问者具体类</p>

<p>&#8220;`
//
//  ContactVisitor.m
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;ContactVisitor.h&rdquo;</h1>

<h1>import &lt;objc/runtime.h></h1>

<h1>import &ldquo;NodeCategories.h&rdquo;</h1>

<h1>import &ldquo;AtomNodeContactVisitor.h&rdquo;</h1>

<h1>import &ldquo;PlayFieldSceneContactVisitor.h&rdquo;</h1>

<p>@implementation ContactVisitor
+ (id)contactVisitorWithBody:(SKPhysicsBody <em>)body forContact:(SKPhysicsContact </em>)contact
{</p>

<pre><code>//第一次dispatch，通过node类别返回对应的实例
if ((body.categoryBitMask&amp;AtomCategory)!=0) {
    return [[AtomNodeContactVisitor alloc] initWithBody:body forContact:contact];
}
if ((body.categoryBitMask&amp;PlayFieldCategory)!=0) {
    return [[PlayFieldSceneContactVisitor alloc] initWithBody:body forContact:contact];
}
else{
    return nil;
}
</code></pre>

<p>}</p>

<ul>
<li><p>(id)initWithBody:(SKPhysicsBody <em>)body forContact:(SKPhysicsContact </em>)contact
{
  self = [super init];
  if (self) {
      <em>contact = contact;
      </em>body = body;
  }
  return self;
}</p></li>
<li><p>(void)visit:(SKPhysicsBody <em>)body
{
  //第二次dispatch，通过构造方法名来执行对应方法
  // 生成node的名字，比如&#8221;AtomNode&#8221;
  NSString </em>bodyClassName = [NSString stringWithUTF8String:class_getName(body.node.class)];</p>

<p>  // 生成方法名，比如&#8221;visitAtomBody&#8221;
  NSMutableString *contactSelectorString = [NSMutableString stringWithFormat:@&ldquo;visit&rdquo;];
  [contactSelectorString appendString:bodyClassName];
  [contactSelectorString appendString:@&ldquo;:&rdquo;];</p>

<p>  SEL selector = NSSelectorFromString(contactSelectorString);
  //判断是否存在此方法
  if ([self respondsToSelector:selector]) {
      [self performSelector:selector withObject:body];
  }</p></li>
</ul>


<p>}</p>

<p>&#8220;`</p>

<p>以访问者具体类以<code>AtomNodeContactVisitor</code>类为例，它继承自访问者基本类ContactVisitor</p>

<p>&#8220;`</p>

<p>//
//  AtomNodeContactVisitor.h
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;ContactVisitor.h&rdquo;</h1>

<p>@interface AtomNodeContactVisitor : ContactVisitor</p>

<p>/<em>Atom访问了Atom，同类碰撞</em>/
&ndash;(void) visitAtomNode:(SKPhysicsBody<em>) anotherAtomBody;
/</em>Atom访问了边界，也就是球撞墙上了<em>/
&ndash;(void) visitPlayFieldScene:(SKPhysicsBody</em>) playfieldBody;
@end</p>

<p>&#8220;`</p>

<p>在处理碰撞后的visitXXX方法中，我将碰撞双方的访问者和被访问者的关系输出</p>

<p>&#8220;`
//
//  AtomNodeContactVisitor.m
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;AtomNodeContactVisitor.h&rdquo;</h1>

<h1>import &ldquo;AtomNode.h&rdquo;</h1>

<h1>import &ldquo;PlayFieldScene.h&rdquo;</h1>

<p>@implementation AtomNodeContactVisitor
&ndash;(void) visitAtomNode:(SKPhysicsBody*) anotherAtomBody
{</p>

<pre><code>AtomNode *thisAtom = (AtomNode*)self.body.node;
AtomNode *anotherAtom = (AtomNode*)anotherAtomBody.node;
//处理碰撞后的结果
NSLog(@"%@-&gt;%@",thisAtom.name,anotherAtom.name);
</code></pre>

<p>}
&ndash;(void) visitPlayFieldScene:(SKPhysicsBody*) playfieldBody
{</p>

<pre><code>AtomNode *atom = (AtomNode*)self.body.node;
PlayFieldScene *playfield = (PlayFieldScene*) playfieldBody.node;
NSLog(@"%@-&gt;%@",atom.name,playfield.name);
</code></pre>

<p>}
@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">下面建立被访问者类，其本质就是对</span><span class="bp">SKPhysicsBody</span><span class="err">的封装，并接受</span><span class="n">Visitor</span><span class="err">的注入</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  VisitablePhysicsBody.h</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright &amp;copy; 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ContactVisitor</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">VisitablePhysicsBody</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">SKPhysicsBody</span> <span class="o">*</span><span class="n">body</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">initWithBody</span><span class="p">:(</span><span class="bp">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="n">body</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">acceptVisitor</span><span class="p">:(</span><span class="n">ContactVisitor</span> <span class="o">*</span><span class="p">)</span><span class="n">visitor</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>关键的一步：在<code>acceptVisitor:</code>方法中调用访问者的<code>visit:</code>方法</p>

<p>&#8220;`
//
//  VisitablePhysicsBody.m
//  ColorAtom
//
//  Created by 杨萧玉 on 14-4-13.
//  Copyright &copy; 2014年 杨萧玉. All rights reserved.
//</p>

<h1>import &ldquo;VisitablePhysicsBody.h&rdquo;</h1>

<p>@implementation VisitablePhysicsBody
&ndash; (id)initWithBody:(SKPhysicsBody *)body
{</p>

<pre><code>self = [super init];
if (self) {
    _body = body;
}
return self;
</code></pre>

<p>}</p>

<ul>
<li>(void)acceptVisitor:(ContactVisitor *)visitor
{
  [visitor visit:self.body];
}</li>
</ul>


<p>@end</p>

<p>&#8220;`</p>

<p>可能有人会有疑问，<code>visit:</code>方法穿入的参数类型永远是<code>SKPhysicsBody</code>，这哪里是动态绑定啊，其实是由于本例的特殊性，碰撞检测时区分物体类型不是靠<code>SKPhysicsBody</code>子类化来区分和绑定，而是靠SKPhysicsBody类中的<code>categoryBitMask</code>属性来区分，这也就免不了需要在<code>ContactVisitor</code>初始化的时候通过if语句来判断具体初始化哪个子类<br/>
最后，在Scene实现SKPhysicsContactDelegate协议</p>

<p>&#8220;`</p>

<h1>pragma mark SKPhysicsContactDelegate</h1>

<p>&ndash;(void)didBeginContact:(SKPhysicsContact *)contact
{</p>

<pre><code>//A-&gt;B
ContactVisitor *visitorA = [ContactVisitor contactVisitorWithBody:contact.bodyA forContact:contact];
VisitablePhysicsBody *visitableBodyB = [[VisitablePhysicsBody alloc] initWithBody:contact.bodyB];
[visitableBodyB acceptVisitor:visitorA];
//B-&gt;A
ContactVisitor *visitorB = [ContactVisitor contactVisitorWithBody:contact.bodyB forContact:contact];
VisitablePhysicsBody *visitableBodyA = [[VisitablePhysicsBody alloc] initWithBody:contact.bodyA];
[visitableBodyA acceptVisitor:visitorB];
</code></pre>

<p>}
&#8220;`
物理老师总说力的作用时相互的，所以我们需要两次访问：A访问B和B访问A，但是这样会调用两次visitXXX方法，原则上这两个逻辑上对称的方法我们只需要实现其中一个就可以，但必须得像上面代码一样，A->B和B->A缺一不可，因为碰撞的时候我们不知道bodyA和bodyB的类型，也就无法判断visitXXX方法是A->B时能调用还是B->A时能调用到<br/>
当然，你也可以两个visit方法都实现，但只对visitor的node做操作，或只对visitable的node操作，总之仁者见仁智者见智啦</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-09-26T18:30:58+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Swift和SpriteKit开发iOS游戏]]></title>
    <link href="http://yulingtianxia.com/blog/2014/07/17/a-ios-game-developed-by-swift-and-spritekit/"/>
    <updated>2014-07-17T12:54:13+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/07/17/a-ios-game-developed-by-swift-and-spritekit</id>
    <content type="html"><![CDATA[<p>之前用SpriteKit做过一个叫做<a href="https://github.com/yulingtianxia/ColorAtom">ColorAtom</a>的小游戏，用了访问者模式处理碰撞检测，还用了SpriteKit中的粒子系统、连接体、力场和动画等，可以说是一个学习SpriteKit比较不错的Demo，随着Swift的火热，我也用Swift和SpriteKit写了一个更为简单的小游戏<a href="https://github.com/yulingtianxia/Spiral">Spiral</a></p>

<!--more-->


<p>附上Spiral的动图：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140557437844.gif" alt="" /></p>

<p>游戏规则是：玩家是五角星小球，小球自动沿着陀螺线向外运动，当玩家点击屏幕时五角星小球会跳跃到内层螺旋，当五角星小球碰到红色旋风或滚动到螺旋线终点时游戏结束。玩家吃掉绿色旋风来得2分，吃到紫色三角得一分并获得保护罩，保护罩用来抵挡一次红色旋风。随着分数的增加游戏会升级，速度加快。游戏结束后可以截屏分享到社交网络，也可以选择重玩。</p>

<p>以下是本文内容：</p>

<ol>
<li>准备工作</li>
<li>绘制基本界面</li>
<li>Swift中用访问者模式处理碰撞</li>
<li>界面数据显示</li>
<li>按钮的绘制和截图分享</li>
</ol>


<h2>准备工作</h2>

<p>SpriteKit是苹果iOS7新推出的2D游戏引擎，这里不再过多介绍。我们新建工程的时候选取iOS中的Game，然后选择SpriteKit作为游戏引擎，语言选择Swift，Xcode6会为我们自动创建一个游戏场景<code>GameScene</code>，它包含<code>GameScene.swift</code>和<code>GameScene.sks</code>两个文件，<code>sks</code>文件可以让我们可视化拖拽游戏控件到场景上，然后再代码中加载<code>sks</code>文件来完成场景的初始化：</p>

<p>&#8220;` js</p>

<p>extension SKNode {</p>

<pre><code>class func unarchiveFromFile(file : NSString) -&gt; SKNode? {

    let path = NSBundle.mainBundle().pathForResource(file, ofType: "sks")

    var sceneData = NSData.dataWithContentsOfFile(path, options: .DataReadingMappedIfSafe, error: nil)
    var archiver = NSKeyedUnarchiver(forReadingWithData: sceneData)

    archiver.setClass(self.classForKeyedUnarchiver(), forClassName: "SKScene")
    let scene = archiver.decodeObjectForKey(NSKeyedArchiveRootObjectKey) as GameScene
    archiver.finishDecoding()
    return scene
}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">但我比较喜欢纯写代码的方式来搭接面，因为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sks</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">文件作为游戏场景布局还不成熟，它是</span><span class="n">iOS8</span><span class="err">新加入的功能，以前在</span><span class="n">iOS7</span><span class="err">的时候</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sks</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">文件只是作为粒子系统的可视化编辑文件。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">所以我们修改</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">GameViewController</span><span class="p">.</span><span class="n">swift</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">文件的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">viewDidLoad</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">函数，像以前那样直接用代码加载游戏场景：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Configure the view.</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">skView</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="n">as</span> <span class="bp">SKView</span>
</span><span class='line'>    <span class="cm">/* Sprite Kit applies additional optimizations to improve rendering performance */</span>
</span><span class='line'>    <span class="n">skView</span><span class="p">.</span><span class="n">ignoresSiblingOrder</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="n">GameScene</span><span class="p">(</span><span class="nl">size</span><span class="p">:</span> <span class="n">skView</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="cm">/* Set the scale mode to scale to fit the window */</span>
</span><span class='line'>    <span class="n">scene</span><span class="p">.</span><span class="n">scaleMode</span> <span class="o">=</span> <span class="p">.</span><span class="n">AspectFill</span>
</span><span class='line'>    <span class="n">skView</span><span class="p">.</span><span class="n">presentScene</span><span class="p">(</span><span class="n">scene</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">GameScene</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">虽然是</span><span class="n">Xcode</span><span class="err">自动生成的，但是只是个空架子，我们需要把它生成的没用的代码删掉，比如初始化函数里内容为“</span><span class="n">HelloWorld</span><span class="err">”的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKLabelNode</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，还有</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">touchesBegan</span><span class="p">(</span><span class="nl">touches</span><span class="p">:</span> <span class="bp">NSSet</span><span class="p">,</span> <span class="n">withEvent</span> <span class="nl">event</span><span class="p">:</span> <span class="bp">UIEvent</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中绘制飞船的代码。把这些删光后，我们还需要有图片素材来绘制这四类精灵节点：</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">（五角星），</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Killer</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">（红色旋风），</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Score</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">（绿色旋风）和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shield</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">（紫色三角）。我是用</span><span class="n">Sketch</span><span class="err">来绘制这些矢量图形的，文件名为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">spiral</span><span class="p">.</span><span class="n">sketch</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，随同工程文件一同放到</span><span class="n">GitHub</span><span class="err">上了。当然你不需要手动导出图片到工程，直接下载工程文件就好了：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/yulingtianxia/Spiral&quot;</span><span class="o">&gt;</span><span class="nl">https</span><span class="p">:</span><span class="c1">//github.com/yulingtianxia/Spiral&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">绘制基本界面</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这部分的工作主要是绘制出螺旋线作为地图，并让四种精灵节点动起来。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">螺旋线的绘制</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKNode</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">有一个子类</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKShapeNode</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，专门用于绘制线条的，我们新建一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Map</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类，继承</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKShapeNode</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。下面我们需要生成一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">CGPath</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来赋值给</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Map</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">path</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'><span class="n">import</span> <span class="n">SpriteKit</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Map</span><span class="p">:</span> <span class="bp">SKShapeNode</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">let</span> <span class="nl">spacing</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">35</span>
</span><span class='line'><span class="n">var</span> <span class="nl">points</span><span class="p">:[</span><span class="bp">CGPoint</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span><span class="bp">CGPoint</span><span class="p">,</span><span class="nl">layer</span><span class="p">:</span><span class="n">CGFloat</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">x</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">y</span><span class="p">:</span><span class="n">CGFloat</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">path</span> <span class="o">=</span> <span class="n">CGPathCreateMutable</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="n">CGPathMoveToPoint</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="nb">nil</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">layer</span><span class="p">{</span>
</span><span class='line'>        <span class="n">y</span><span class="o">-=</span><span class="n">spacing</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">CGPathAddLineToPoint</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="nb">nil</span> <span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>        <span class="n">x</span><span class="o">-=</span><span class="n">spacing</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">CGPathAddLineToPoint</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="nb">nil</span> <span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>        <span class="n">y</span><span class="o">+=</span><span class="n">spacing</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="n">index</span>
</span><span class='line'>        <span class="n">CGPathAddLineToPoint</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="nb">nil</span> <span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>        <span class="n">x</span><span class="o">+=</span><span class="n">spacing</span><span class="o">*</span><span class="mi">2</span><span class="o">*</span><span class="n">index</span>
</span><span class='line'>        <span class="n">CGPathAddLineToPoint</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="nb">nil</span> <span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>        <span class="n">points</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">glowWidth</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">antialiased</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="n">CGPathGetCurrentPoint</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>算法很简单，就是顺时针计算点坐标然后画线，这里把每一步的坐标都存入了<code>points</code>数组里，是为了以后计算其他数据时方便。因为这部分算法不难而且不是我们的重点，这里不过多介绍了。</p>

<h3>四种精灵的绘制</h3>

<p>因为四种精灵都是沿着<code>Map</code>类的路径来顺时针运动，它们的动画绘制是相似的，所以我建立了一个<code>Shape</code>类作为基类来绘制动画，它继承于<code>SKSpriteKit</code>类，并拥有半径（<code>radius</code>）、移动速度（<code>moveSpeed</code>）和线段计数（<code>lineNum</code>）这三个属性。其中<code>lineNum</code>是用于标记精灵在螺旋线第几条线段上的，这样比较方便计算动画的参数。</p>

<p>&#8220;`
class Shape: SKSpriteNode {</p>

<pre><code>let radius:CGFloat = 10
var moveSpeed:CGFloat = 50
var lineNum = 0
init(name:String,imageName:String){
    super.init(texture: SKTexture(imageNamed: imageName),color:SKColor.clearColor(), size: CGSizeMake(radius*2, radius*2))
    self.physicsBody = SKPhysicsBody(circleOfRadius: radius)
    self.physicsBody.usesPreciseCollisionDetection = true
    self.physicsBody.collisionBitMask = 0
    self.physicsBody.contactTestBitMask = playerCategory|killerCategory|scoreCategory
    moveSpeed += CGFloat(Data.speedScale) * self.moveSpeed
    self.name = name
    self.physicsBody.angularDamping = 0

}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">构造函数中设定了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shape</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类的一些物理参数，比如物理体的形状大小，碰撞检测掩码等。这里设定</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">usesPreciseCollisionDetection</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">true</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是为了增加碰撞检测的精度，常用于体积小速度快的物体。</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">collisionBitMask</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性标记了需要模拟物理碰撞的类别，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">contactTestBitMask</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性标记了需要检测到碰撞的类别。这里说的“类别”指的是物体的类别：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">playerCategory</span><span class="p">:</span><span class="kt">UInt32</span>      <span class="o">=</span>  <span class="mh">0x1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">killerCategory</span><span class="p">:</span><span class="kt">UInt32</span>      <span class="o">=</span>  <span class="mh">0x1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">scoreCategory</span><span class="p">:</span><span class="kt">UInt32</span>       <span class="o">=</span>  <span class="mh">0x1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">shieldCategory</span><span class="p">:</span><span class="kt">UInt32</span>      <span class="o">=</span>  <span class="mh">0x1</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">这种用位运算来判断和存储物体类别的方式很常用，上面这段代码写在了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NodeCategories</span><span class="p">.</span><span class="n">swift</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">文件中。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">为了描述</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shape</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的速度随着游戏等级上升而增加，这里速度的计算公式含有</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Data</span><span class="p">.</span><span class="n">speedScale</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">作为参数，关于</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Data</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">“类”在后面会讲到。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">为了让精灵动起来，需要知道动画的移动目的地是什么。虽然</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKAction</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">有</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">followPath</span><span class="p">(</span><span class="nl">path</span><span class="p">:</span> <span class="bp">CGPath</span><span class="o">?</span><span class="p">,</span> <span class="nl">speed</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法，但是在这里并不实用，因为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">会经常改变路线，所以我写了一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">runInMap</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span><span class="n">Map</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法让精灵每次只移动到路径上的下一个节点（之前</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Map</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类存储的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">points</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性用到了吧！嘿嘿）</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">func</span> <span class="n">runInMap</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span><span class="n">Map</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">let</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">calDistanceInMap</span><span class="p">(</span><span class="n">map</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="n">distance</span><span class="o">/</span><span class="n">moveSpeed</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">rotate</span> <span class="o">=</span> <span class="bp">SKAction</span><span class="p">.</span><span class="n">rotateByAngle</span><span class="p">(</span><span class="n">distance</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">move</span> <span class="o">=</span> <span class="bp">SKAction</span><span class="p">.</span><span class="n">moveTo</span><span class="p">(</span><span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">[</span><span class="n">lineNum</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">group</span> <span class="o">=</span> <span class="bp">SKAction</span><span class="p">.</span><span class="n">group</span><span class="p">([</span><span class="n">rotate</span><span class="p">,</span><span class="n">move</span><span class="p">])</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">runAction</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">lineNum</span><span class="o">++</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="n">lineNum</span><span class="o">==</span><span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">.</span><span class="n">count</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">self</span> <span class="n">is</span> <span class="n">Player</span><span class="p">{</span>
</span><span class='line'>                <span class="n">Data</span><span class="p">.</span><span class="n">gameOver</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">self</span> <span class="n">is</span> <span class="n">Killer</span><span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">removeFromParent</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">self</span> <span class="n">is</span> <span class="n">Score</span><span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">removeFromParent</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">self</span> <span class="n">is</span> <span class="n">Shield</span><span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">removeFromParent</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">runInMap</span><span class="p">(</span><span class="n">map</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">上面的代码先是调用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">calDistanceInMap</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span><span class="n">Map</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">CGFloat</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法计算精灵距离下一个节点的距离（也就是需要移动的距离），然后计算精灵需要旋转动画时间和移动动画时间，最后将两个动画作为一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">group</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来运行，在动画运行结束后判断精灵是否运行到了最后一个节点，也就是螺旋线的终点：如果到终点了则移除精灵，否则开始递归调用方法，来开始下一段动画（奔向下一个节点）。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">计算距离的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">calDistanceInMap</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span><span class="n">Map</span><span class="p">)</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">CGFloat</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法代码如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">func</span> <span class="n">calDistanceInMap</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span><span class="n">Map</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="n">CGFloat</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="n">lineNum</span><span class="o">==</span><span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">lineNum</span><span class="o">%</span><span class="mi">4</span><span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="o">-</span><span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">[</span><span class="n">lineNum</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">y</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">[</span><span class="n">lineNum</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">x</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">[</span><span class="n">lineNum</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">y</span><span class="o">-</span><span class="n">position</span><span class="p">.</span><span class="n">y</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">map</span><span class="p">.</span><span class="n">points</span><span class="p">[</span><span class="n">lineNum</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">x</span><span class="o">-</span><span class="n">position</span><span class="p">.</span><span class="n">x</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">到此为止</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shape</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类完成了，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Killer</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">、</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Score</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shield</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类比较简单，继承</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shape</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类并设置自身纹理和类别即可：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Killer</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">convenience</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span><span class="s">&quot;Killer&quot;</span><span class="p">,</span><span class="nl">imageName</span><span class="p">:</span><span class="s">&quot;killer&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">=</span> <span class="n">killerCategory</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Score</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">convenience</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span><span class="s">&quot;Score&quot;</span><span class="p">,</span><span class="nl">imageName</span><span class="p">:</span><span class="s">&quot;score&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">=</span> <span class="n">scoreCategory</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Shield</span><span class="p">:</span> <span class="n">Shape</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">convenience</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span><span class="s">&quot;Shield&quot;</span><span class="p">,</span><span class="nl">imageName</span><span class="p">:</span><span class="s">&quot;shield&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">categoryBitMask</span> <span class="o">=</span> <span class="n">shieldCategory</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>而<code>Player</code>因为有护盾状态并可以在螺旋线上跳跃到内层，所以稍微复杂些：</p>

<p>&#8220;`
class Player: Shape {</p>

<pre><code>var jump = false
var shield:Bool = false {
willSet{
    if newValue{
        self.texture = SKTexture(imageNamed: "player0")
    }
    else{
        self.texture = SKTexture(imageNamed: "player")
    }
}
}
convenience init() {
    self.init(name:"Player",imageName:"player")
    self.physicsBody.categoryBitMask = playerCategory
    self.moveSpeed = 70
    self.lineNum = 3
}
func restart(map:Map) {
    self.alpha = 1
    self.removeAllActions()
    self.lineNum = 3
    self.moveSpeed = 70
    self.jump = false
    self.shield = false
    self.position = map.points[self.lineNum]
    self.runInMap(map)
}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类的初始位置是螺旋线第四个节点，而且移动速度要略快于其他三种精灵，所以在这里设置为</span><span class="mi">70</span><span class="err">（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shape</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">默认速度</span><span class="mi">50</span><span class="err">）。</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">jump</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">shield</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是用来标记</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">当前状态的属性，其中</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">shield</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性还定义了属性监察器，这是</span><span class="n">Swift</span><span class="err">中存储属性具有的响应机制，类似于</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">KVO</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">shield</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">状态改变时也同时改变</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的纹理。</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">需要注意的是构造器中对属性的改变并不会调用属性检查器，在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">willSet</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">didSet</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中改变自身属性也不会调用属性检查器，因为那样会造成死循环。</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">restart</span><span class="p">(</span><span class="nl">map</span><span class="p">:</span><span class="n">Map</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法用于在游戏重新开始时重置</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的相关数据。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">Swift</span><span class="err">中用访问者模式处理碰撞</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">访问者模式是双分派（</span><span class="n">Double</span> <span class="n">Dispatch</span><span class="err">）模式的一种实现，关于双分派模式的详细解释，参考我的另一篇文章：</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan/&quot;</span><span class="o">&gt;</span><span class="n">Double</span> <span class="n">Dispatch</span><span class="err">模式及其在</span><span class="n">iOS</span><span class="err">开发中实践</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">，里面包含了</span><span class="n">C</span><span class="o">++</span><span class="err">，</span><span class="n">Java</span><span class="err">和</span><span class="n">Obje</span><span class="o">-</span><span class="n">C</span><span class="err">的实现，这次我们用</span><span class="n">Swift</span><span class="err">实现访问者模式。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">因为</span><span class="n">SpriteKit</span><span class="err">中物理碰撞检测到的都是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKPhysicsBody</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，所以我们的被访问者需要包含一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKPhysicsBody</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="n">VisitablePhysicsBody</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">let</span> <span class="nl">body</span><span class="p">:</span><span class="bp">SKPhysicsBody</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="nl">body</span><span class="p">:</span><span class="bp">SKPhysicsBody</span><span class="p">){</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">acceptVisitor</span><span class="p">(</span><span class="nl">visitor</span><span class="p">:</span><span class="n">ContactVisitor</span><span class="p">){</span>
</span><span class='line'>    <span class="n">visitor</span><span class="p">.</span><span class="n">visitBody</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>acceptVisitor</code>方法传入的是一个<code>ContactVisitor</code>类，它是访问者的基类（也相当于接口），访问者的<code>visitBody(body:SKPhysicsBody)</code>方法会根据传入的<code>body</code>实例来推断出被访问者的真实类别，然后调用对应的方法来处理碰撞：</p>

<p>&#8220;`
func visitBody(body:SKPhysicsBody){</p>

<pre><code>    //第二次dispatch，通过构造方法名来执行对应方法
    // 生成方法名，比如"visitPlayer"
    var contactSelectorString = "visit" + body.node.name + ":"
    let selector = NSSelectorFromString(contactSelectorString)
    if self.respondsToSelector(selector){
        dispatch_after(0, dispatch_get_main_queue(), {
            NSThread.detachNewThreadSelector(selector, toTarget:self, withObject: body)
            })
    }

}
</code></pre>

<p>&#8220;`</p>

<p>Swift废弃了<code>performSelector</code>方法，所以这里耍了个小聪明来将消息传给具体的访问者。有关Swift中替代<code>performSelector</code>的方案，参见<a href="http://www.cnblogs.com/yangzhou1030/p/3830592.html">这里</a></p>

<p>下面让<code>GameScene</code>实现<code>SKPhysicsContactDelegate</code>协议：</p>

<p>&#8220;`
func didBeginContact(contact:SKPhysicsContact){</p>

<pre><code>    //A-&gt;B
    let visitorA = ContactVisitor.contactVisitorWithBody(contact.bodyA, forContact: contact)
    let visitableBodyB = VisitablePhysicsBody(body: contact.bodyB)
    visitableBodyB.acceptVisitor(visitorA)
    //B-&gt;A
    let visitorB = ContactVisitor.contactVisitorWithBody(contact.bodyB, forContact: contact)
    let visitableBodyA = VisitablePhysicsBody(body: contact.bodyA)
    visitableBodyA.acceptVisitor(visitorB)
}
</code></pre>

<p><code>``
跟Objective-C中实现访问者模式类似，也是通过</code>ContactVisitor<code>类的工厂方法返回一个对应的子类实例来作为访问者，然后实例化一个被访问者，被访问者接受访问者的访问。A访问B和B访问A在大多数场合是相同的，但是你不知道谁是A谁是B，所以需要两种情况都调用。下面是</code>ContactVisitor`类的工厂方法和构造器：</p>

<p>&#8220;`
class ContactVisitor:NSObject{</p>

<pre><code>let body:SKPhysicsBody!
let contact:SKPhysicsContact!
class func contactVisitorWithBody(body:SKPhysicsBody,forContact contact:SKPhysicsContact)-&gt;ContactVisitor!{
    //第一次dispatch，通过node类别返回对应的实例
    if 0 != body.categoryBitMask&amp;playerCategory {
        return PlayerContactVisitor(body: body, forContact: contact)
    }
    if 0 != body.categoryBitMask&amp;killerCategory {
        return KillerContactVisitor(body: body, forContact: contact)
    }
    if 0 != body.categoryBitMask&amp;scoreCategory {
        return ScoreContactVisitor(body: body, forContact: contact)
    }
    if 0 != body.categoryBitMask&amp;shieldCategory {
        return ShieldContactVisitor(body: body, forContact: contact)
    }
    return nil

}
init(body:SKPhysicsBody, forContact contact:SKPhysicsContact){
    self.body = body
    self.contact = contact
    super.init()

}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">PS</span><span class="err">：上面的代码省略了已经提到过的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">visitBody</span><span class="p">(</span><span class="nl">body</span><span class="p">:</span><span class="bp">SKPhysicsBody</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">因为这个游戏逻辑比较简单，所有碰撞后的逻辑都写到了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">PlayerContactVisitor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类里：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">func</span> <span class="n">visitKiller</span><span class="p">(</span><span class="nl">body</span><span class="p">:</span><span class="bp">SKPhysicsBody</span><span class="p">){</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">let</span> <span class="n">thisNode</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">node</span> <span class="n">as</span> <span class="n">Player</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">otherNode</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="n">node</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//        println(thisNode.name+&amp;ldquo;&amp;ndash;&gt;&amp;rdquo;+otherNode.name)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">if</span> <span class="n">thisNode</span><span class="p">.</span><span class="n">shield</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">otherNode</span><span class="p">.</span><span class="n">removeFromParent</span><span class="p">()</span>
</span><span class='line'>        <span class="n">thisNode</span><span class="p">.</span><span class="n">shield</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Data</span><span class="p">.</span><span class="n">gameOver</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">visitScore</span><span class="p">(</span><span class="nl">body</span><span class="p">:</span><span class="bp">SKPhysicsBody</span><span class="p">){</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">thisNode</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">node</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">otherNode</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="n">node</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//        println(thisNode.name+&amp;ldquo;&amp;ndash;&gt;&amp;rdquo;+otherNode.name)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">otherNode</span><span class="p">.</span><span class="n">removeFromParent</span><span class="p">()</span>
</span><span class='line'>    <span class="n">Data</span><span class="p">.</span><span class="n">score</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">visitShield</span><span class="p">(</span><span class="nl">body</span><span class="p">:</span><span class="bp">SKPhysicsBody</span><span class="p">){</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">thisNode</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">node</span> <span class="n">as</span> <span class="n">Player</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">otherNode</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="n">node</span>
</span><span class='line'>    <span class="n">otherNode</span><span class="p">.</span><span class="n">removeFromParent</span><span class="p">()</span>
</span><span class='line'>    <span class="n">thisNode</span><span class="p">.</span><span class="n">shield</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="n">Data</span><span class="p">.</span><span class="n">score</span><span class="o">++</span>
</span><span class='line'>    <span class="c1">//        println(thisNode.name+&quot;-&amp;gt;&quot;+otherNode.name)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">上面的方法都是“</span><span class="n">visit</span><span class="o">+</span><span class="err">类名”格式的，处理的是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">碰撞到其他三种精灵的逻辑。而其他三种精灵之间的碰撞不需要处理，所以</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">KillerContactVisitor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">、</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ScoreContactVisitor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ShieldContactVisitor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这三个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ContactVisitor</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的子类很空旷，这里不再赘述。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">我们设置</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Player</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">碰撞到</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Killer</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">游戏结束，碰撞到</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Score</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">加两分，碰撞到</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Shield</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">加一分并获得护甲（</span><span class="n">shield</span><span class="err">属性设为</span><span class="nb">true</span><span class="err">）。可以看到这里大量用到了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Data</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">“类“”，它其实是一个存储并管理全局数据的结构体，它里面存储了一些静态的成员属性，也可看做非线程安全的单例。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">界面数据显示</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这部分很简单，主要是将</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Data</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">结构体中存储的分数和等级等数据通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKLabelNode</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">显示在界面上，只不过我封装了一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Display</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类来将所有的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">SKLabelNode</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">统一管理，并让其实现我定义的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DisplayData</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">协议来让</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Data</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中的数据变化驱动界面更新：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">protocol</span> <span class="n">DisplayData</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">func</span> <span class="n">updateData</span><span class="p">()</span>
</span><span class='line'><span class="n">func</span> <span class="n">levelUp</span><span class="p">()</span>
</span><span class='line'><span class="n">func</span> <span class="n">gameOver</span><span class="p">()</span>
</span><span class='line'><span class="n">func</span> <span class="n">restart</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>下面是Data结构体代码，大量使用了存储属性的监察器来响应数据变化：</p>

<p>&#8220;`
struct Data{</p>

<pre><code>static var display:DisplayData?
static var updateScore:Int = 5
static var score:Int = 0{
willSet{
    if newValue&gt;=updateScore{
        updateScore+=5 * ++level
    }
}
didSet{
    display?.updateData()
}
}
static var highScore:Int = 0
static var gameOver:Bool = false {
willSet{
    if newValue {
        let standardDefaults = NSUserDefaults.standardUserDefaults()
        Data.highScore = standardDefaults.integerForKey("highscore")
        if Data.highScore &lt; Data.score {
            Data.highScore = Data.score
            standardDefaults.setInteger(Data.score, forKey: "highscore")
            standardDefaults.synchronize()
        }
        display?.gameOver()
    }
    else {
        display?.restart()
    }
}
didSet{

}
}
static var level:Int = 1{
willSet{
    speedScale = Float(newValue)*0.1
    if newValue != 1{
        display?.levelUp()
    }
}
didSet{
    display?.updateData()

}
}
static var speedScale:Float = 0{
willSet{

}
didSet{

}
}

static func restart(){
    Data.updateScore = 5
    Data.score = 0
    Data.level = 1
    Data.speedScale = 0
}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这里不得不提到一个更新界面时遇到的一个坑，当我想通过名字遍历</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">GameScene</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">子节点的时候，一般会用到</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">enumerateChildNodesWithName</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="nl">usingBlock</span><span class="p">:</span> <span class="p">((</span><span class="bp">SKNode</span><span class="o">!</span><span class="p">,</span> <span class="n">UnsafePointer</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">ObjCBool</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法，但是这个方法在</span><span class="n">Xcode6Beta3</span><span class="err">更新后经常会抛异常强退，这让我很费解，恰巧遇到此问题的不只是我一个人，所以还是老老实实的自己写循环遍历加判断吧。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">按钮的绘制和截图分享</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">参考我的另外两篇文章：</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/04/27/zai-you-xi-de-skscenezhong-tian-jia-button/&quot;</span><span class="o">&gt;</span><span class="err">在游戏的</span><span class="bp">SKScene</span><span class="err">中添加</span><span class="n">Button</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/04/22/spritekitjie-ping-bing-fen-xiang-zhi-she-jiao-wang-luo/&quot;</span><span class="o">&gt;</span><span class="n">SpriteKit</span><span class="err">截屏并分享至社交网络</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在本工程中只有</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ShareButton</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ReplayButton</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">两个按钮，</span><span class="n">Swift</span><span class="err">版本的代码很简洁，而我通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Social</span><span class="p">.</span><span class="n">Framework</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UIActivityViewController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来分享得分，这部分代码写在了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ShareButton</span><span class="p">.</span><span class="n">swift</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">let</span> <span class="n">scene</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">scene</span> <span class="n">as</span> <span class="n">GameScene</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">let</span> <span class="n">image</span> <span class="o">=</span> <span class="n">scene</span><span class="p">.</span><span class="n">imageFromNode</span><span class="p">(</span><span class="n">scene</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">text</span> <span class="o">=</span> <span class="s">&quot;我在Spiral游戏中得了\(Data.score)分，快来追逐我的步伐吧！&quot;</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">activityItems</span> <span class="o">=</span> <span class="p">[</span><span class="n">image</span><span class="p">,</span><span class="n">text</span><span class="p">]</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">activityController</span> <span class="o">=</span> <span class="bp">UIActivityViewController</span><span class="p">(</span><span class="nl">activityItems</span><span class="p">:</span> <span class="n">activityItems</span><span class="p">,</span> <span class="nl">applicationActivities</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="n">scene</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">nextResponder</span><span class="p">()</span> <span class="n">as</span> <span class="bp">UIViewController</span><span class="p">).</span><span class="n">presentViewController</span><span class="p">(</span><span class="n">activityController</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Swift</span><span class="err">中的位运算符和溢出运算符</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/07/11/bitwise-and-overflow-operators-in-swift/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mi">11</span><span class="nl">T15</span><span class="p">:</span><span class="mi">15</span><span class="o">:</span><span class="mi">59</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="kt">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.com/blog/2014/07/11/bitwise-and-overflow-operators-in-swift&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">位运算符（</span><span class="n">Bitwise</span> <span class="n">Operators</span><span class="err">），在各种语言中都存在，虽然用的有些少，但是在诸如类别判断，类型检测等方案中经常用位运算来实现。很多枚举类型的成员都是将</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mh">0x1</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">左移位来赋值，而不是从</span><span class="mi">0</span><span class="err">递增，这其中就蕴含着位运算。而数值运算中的溢出也是一个不常遇到但又值得注意的地方，虽然很少有人用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int8</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来存储大数，但了解下</span><span class="n">Swift</span><span class="err">处理溢出的这一特性也是很有用的。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">基本位运算符</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;~&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;|&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;^&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">分别为取反，与，或，异或运算：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">firstBit</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b10000000</span>
</span><span class='line'><span class="n">let</span> <span class="nl">lastBit</span><span class="p">:</span> <span class="kt">UInt8</span>  <span class="o">=</span> <span class="mi">0</span><span class="n">b00000001</span>
</span><span class='line'><span class="n">let</span> <span class="n">invertedBits</span> <span class="o">=</span> <span class="o">~</span><span class="n">lastBit</span>  <span class="c1">// 等于 0b11111110</span>
</span><span class='line'><span class="n">let</span> <span class="n">noneBit</span> <span class="o">=</span> <span class="n">firstBit</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">lastBit</span>  <span class="c1">// 等于 0b00000000</span>
</span><span class='line'><span class="n">let</span> <span class="n">twoSideBits</span> <span class="o">=</span> <span class="n">firstBit</span> <span class="o">|</span> <span class="n">lastBit</span> <span class="c1">//等于 0b10000001</span>
</span><span class='line'><span class="n">let</span> <span class="n">middleSixBits</span> <span class="o">=</span> <span class="n">firstBit</span> <span class="o">^</span> <span class="n">lastBit</span> <span class="c1">//等于 0b10000001</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">左移运算符</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和右移运算符</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">分别扮演着乘</span><span class="mi">2</span><span class="err">和除</span><span class="mi">2</span><span class="err">的角色，对于</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UInt</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来讲很简单，只需要填充</span><span class="mi">0</span><span class="err">就行：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftUnsigned_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">但对于有符号整型数，移位时需要考虑到符号位，第一个比特位表达这个整数是正数还是负数。</span><span class="mi">0</span><span class="err">代表正数，</span><span class="mi">1</span><span class="err">代表负数。也就是说</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int8</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">最大是</span><span class="mi">127</span><span class="err">，因为只有</span><span class="mi">7</span><span class="err">位存储实际值，而且负数采用补码来表示。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSignedFour_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSignedMinusFour_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">正数的补码是原码；负数的补码是符号位不变，数值位各位取反，最后整个数加</span><span class="mi">1</span><span class="err">，补码之所以被机器采用是因为它符合机器的架构设计，只用加法就能算减法：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSignedAddition_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有符号整型右移运算时用符号位填充：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSigned_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这就确保了在右移的过程中，有符整型的符号不会发生变化。这称为算术移位。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">溢出运算符</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Swift</span><span class="err">中如果计算结果超出了它的类型能承载的范围，那么就会发生溢出错误，除非你已经使用溢出运算符来进行操作：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">溢出加法</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">+&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">溢出减法</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">-&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">溢出乘法</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">*&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">溢出除法</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">/&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">溢出求余</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">%&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">值的上溢出</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">var</span> <span class="n">willOverflow</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">.</span><span class="n">max</span>
</span><span class='line'><span class="c1">// willOverflow 等于UInt8的最大整数 255</span>
</span><span class='line'><span class="n">willOverflow</span> <span class="o">=</span> <span class="n">willOverflow</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">// 此时 willOverflow 等于 0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/overflowAddition_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">值的下溢出</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">var</span> <span class="n">willUnderflow</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">.</span><span class="n">min</span>
</span><span class='line'><span class="c1">// willUnderflow 等于UInt8的最小值0</span>
</span><span class='line'><span class="n">willUnderflow</span> <span class="o">=</span> <span class="n">willUnderflow</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">// 此时 willUnderflow 等于 255</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/overflowUnsignedSubtraction_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有符整型也有类似的下溢出</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">var</span> <span class="n">signedUnderflow</span> <span class="o">=</span> <span class="n">Int8</span><span class="p">.</span><span class="n">min</span>
</span><span class='line'><span class="c1">// signedUnderflow 等于最小的有符整数 -128</span>
</span><span class='line'><span class="n">signedUnderflow</span> <span class="o">=</span> <span class="n">signedUnderflow</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="c1">// 此时 signedUnderflow 等于 127</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/overflowSignedSubtraction_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">除零溢出</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">一个数除以</span><span class="mi">0</span><span class="err">，或者对</span><span class="mi">0</span><span class="err">求余数，就会产生一个错误；使用它们对应的可溢出的版本的运算符</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">/&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">%&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">进行除</span><span class="mi">0</span><span class="err">操作时就会得到</span><span class="mi">0</span><span class="err">值。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">/</span> <span class="mi">0</span>
</span><span class='line'><span class="c1">// y 等于 0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">3</span><span class="p">)]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/07/03/chu-shi-core-data-3/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mo">03</span><span class="nl">T10</span><span class="p">:</span><span class="mi">28</span><span class="o">:</span><span class="mi">28</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="kt">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.com/blog/2014/07/03/chu-shi-core-data-3&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="n">Swift</span><span class="err">发布后，我尝试用</span><span class="n">Swift</span><span class="err">和</span><span class="n">Core</span> <span class="n">Data</span><span class="err">做了一个小</span><span class="n">Demo</span><span class="err">，名字叫“</span><span class="n">HardChoice</span><span class="err">”。它用于帮助人们随机生成一个问题的结果，当然结果是预设好的，并可以加入权值。本文将通过这个</span><span class="n">Demo</span><span class="err">来进一步阐述</span><span class="n">Core</span> <span class="n">Data</span><span class="err">的知识。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">本文包含以下内容：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">建立数据模型</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Swift</span><span class="err">与</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">桥接</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="bp">UITextField</span><span class="err">键盘响应</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">随机选择算法</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">你可以在</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/yulingtianxia/HardChoice&quot;</span><span class="o">&gt;</span><span class="n">GitHub</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">上下载</span><span class="n">HardChoice</span><span class="err">的代码</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在没弄懂</span><span class="n">Core</span> <span class="n">Data</span><span class="err">的基础知识之前，我建议你先阅读我之前的两篇博文：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/&quot;</span><span class="o">&gt;</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2/&quot;</span><span class="o">&gt;</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你不懂</span><span class="n">Swift</span><span class="err">也没关系，只要了解</span><span class="n">OC</span><span class="err">和</span><span class="n">Core</span> <span class="n">Data</span><span class="err">，总是能看懂的</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在写代码前先了解下我们要做什么：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140435701469.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/1404357012.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">先在第一个页面添加问题（吃啥？），然后点击问题进入到第二个添加选项（鸭子，蛋，猪）的页面。每个选项左边是选项名，右边是该选项的权值。摇动手机就能随机从所有选项中选出答案（就像第二张图那样）。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">建立数据模型</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">还是像以前那样新建一个</span><span class="n">Master</span><span class="o">-</span><span class="n">Detail</span> <span class="n">Application</span><span class="err">，勾选</span><span class="n">Use</span> <span class="n">Core</span> <span class="n">Data</span><span class="err">选项，语言选择</span><span class="n">Swift</span><span class="err">，然后</span><span class="n">Xcode</span><span class="err">会自动生成一个具有</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="n">Demo</span><span class="err">，这些内容之前说过。下面我们需要打开</span><span class="n">xcdatamodeld</span><span class="err">文件来建立我们的数据模型：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140436356516.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这个实体只具有一个属性，那就是问题内容</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">content</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，类型为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">；</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实体有一个类型为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性和一个类型为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Integer32</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">weight</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性，分别代表问题选项的名字和权重。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面我们来建立</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这两个实体之间的关系：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">假设每个问题都对应多个选项，也可以没有选项：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/14043675716.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optional</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">被打钩是因为问题可以没有任何选项，在</span><span class="n">Tpye</span><span class="err">那里我们选择</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">To</span> <span class="n">Many</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">相反，每个选项一定会对应一个问题，并且是唯一的问题：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140436793089.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optional</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">那里不打钩是为了避免关系的目标为空，在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Tpye</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">那里我们选择了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">To</span> <span class="n">One</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">关于</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Delete</span> <span class="n">Rule</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的选择</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面会通过部门与员工的例子来阐述</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Delete</span> <span class="n">Rule</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的用法</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Deny</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="k">strong</span><span class="o">&gt;</span> <span class="err">如果关系指向的目标仍然有对象，那么关系的源对象就不会被删除，比如你想删除一个部门，必须先确保该部门所有员工已经调到其他部门（或被解雇），否则这个部门就不会被删除。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Nullify</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="k">strong</span><span class="o">&gt;</span> <span class="err">将被删除对象反向关系的目标设为</span><span class="n">null</span><span class="err">，比如如果你删除了一个部门，那么将这个部门所有成员的</span><span class="n">department</span><span class="err">关系目标设为</span><span class="n">null</span><span class="err">。需要注意的是员工的</span><span class="n">department</span><span class="err">关系应该被勾选为</span><span class="n">Optional</span><span class="err">，或者是在删除部门之后马上给该部门员工设置一个新的部门。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Cascade</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="k">strong</span><span class="o">&gt;</span> <span class="err">顾名思义它会传递删除命令，删除一个对象会导致这个对象关系中所指向的所有目标对象也被删除。比如如果你删除了一个部门那么这个部门所有员工都会被立即删除。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">No</span> <span class="n">Action</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="k">strong</span><span class="o">&gt;</span> <span class="err">无为而治。比如如果你删除了一个部门，那么这个部门底下的所有员工什么都不知道，他们还以为自己还属于这个部门。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">回到我们的例子，因为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">指向</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">choices</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关系具有从属的性质，问题被删除后</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">choices</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">所指向的选项也应该被删除，所以</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">choices</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关系中的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Delete</span> <span class="n">Rule</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">我们选择</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Cascade</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">；而</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">指向</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关系中</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Delete</span> <span class="n">Rule</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">被设置成了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Nullify</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，也就是解除了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">与这个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的关系，并且我们之前已经设置</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">choices</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关系设置为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optional</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来满足</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Nullify</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这一选项的要求。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">注意：每当你修改过数据模型后，需要将以前生成好的</span><span class="n">APP</span><span class="err">删除后再重新</span><span class="n">Run</span><span class="err">一下，这样才不会发生错误。这是因为手动删除</span><span class="n">APP</span><span class="err">会连同将其数据一起删除，然后重新</span><span class="n">Run</span><span class="err">一下会将新的数据表结构安装在模拟器或真机上</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你对建立数据模型的过程生疏，建议回到</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2/&quot;</span><span class="o">&gt;</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">中复习下“使用数据模型设计器”一节</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">Swift</span><span class="err">与</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">桥接</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在使用</span><span class="n">Xcode6</span> <span class="n">Beta2</span><span class="err">生成</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">子类的时候，生成的代码依然是</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">的代码（即使我的工程是用</span><span class="n">Swift</span><span class="err">语言建立的），这就涉及到在</span><span class="n">Swift</span><span class="err">工程中调用</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">类的问题。苹果给我们提供了一个比较简单的解决方案。在你向工程中加入</span><span class="n">OC</span><span class="err">文件时，</span><span class="n">Xcode</span><span class="err">会自动弹出消息问你是否需要生成一个桥接头文件（“工程名</span><span class="o">-</span><span class="n">Bridging</span><span class="o">-</span><span class="n">Header</span><span class="p">.</span><span class="n">h</span><span class="err">”），然后我们在这个头文件中加入想要在</span><span class="n">Swift</span><span class="err">中调用的</span><span class="n">OC</span><span class="err">类的头文件：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span> <span class="n">objc</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Use this file to import your target&amp;rsquo;s public headers that you would like to expose to Swift.</span>
</span><span class='line'><span class="c1">//&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Question</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Choice</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">CustomIOS7AlertView</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这两个类是用之前数据模型中同名实例创建的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">子类，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CustomIOS7AlertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类是本项目用到的一个自定义</span><span class="n">AlertView</span><span class="err">（</span><span class="n">iOS7</span><span class="err">之后苹果不再允许自定义</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UIAlertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">了）</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这样在</span><span class="n">Swift</span><span class="err">文件中不用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">import</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">任何东西就可以直接使用上面被引入的</span><span class="n">OC</span><span class="err">类了</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有关</span><span class="n">Swift</span><span class="err">和</span><span class="n">OC</span><span class="err">在同一项目中混合使用的方法详见</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/Using%20Swift%20with%20Cocoa%20and%20Objective-C/03Mix%20and%20Match/Swift%20and%20Objective-C%20in%20the%20Same%20Project.md&quot;</span><span class="o">&gt;</span><span class="err">这里</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/&quot;</span><span class="o">&gt;</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">中我们提到过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的作用，简单地说，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的作用就是有效率的管理从</span><span class="n">CoreData</span><span class="err">获取请求的数据结果，并将结果提供给</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">作为数据源。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MasterViewController</span><span class="p">.</span><span class="n">swift</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">文件中，</span><span class="n">Xcode</span><span class="err">生成了两个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性：一个只读计算属性</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和一个可选存储属性</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，通过两者搭配来实现</span><span class="k">setter</span><span class="err">，这里不再多说，将计算属性</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的定义替换如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span> <span class="n">js</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="nl">fetchedResultsController</span><span class="p">:</span> <span class="bp">NSFetchedResultsController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">_fetchedResultsController</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">fetchRequest</span> <span class="o">=</span> <span class="bp">NSFetchRequest</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// Edit the entity name as appropriate.</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">entity</span> <span class="o">=</span> <span class="bp">NSEntityDescription</span><span class="p">.</span><span class="n">entityForName</span><span class="p">(</span><span class="s">&quot;Question&quot;</span><span class="p">,</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fetchRequest</span><span class="p">.</span><span class="n">entity</span> <span class="o">=</span> <span class="n">entity</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the batch size to a suitable number.</span>
</span><span class='line'>    <span class="n">fetchRequest</span><span class="p">.</span><span class="n">fetchBatchSize</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Edit the sort key as appropriate.</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">sortDescriptor</span> <span class="o">=</span> <span class="bp">NSSortDescriptor</span><span class="p">(</span><span class="nl">key</span><span class="p">:</span> <span class="s">&quot;content&quot;</span><span class="p">,</span> <span class="nl">ascending</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">sortDescriptors</span> <span class="o">=</span> <span class="p">[</span><span class="n">sortDescriptor</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fetchRequest</span><span class="p">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="n">sortDescriptors</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Edit the section name key path and cache name if appropriate.</span>
</span><span class='line'>    <span class="c1">// nil for section name key path means &quot;no sections&quot;.</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">aFetchedResultsController</span> <span class="o">=</span> <span class="bp">NSFetchedResultsController</span><span class="p">(</span><span class="nl">fetchRequest</span><span class="p">:</span> <span class="n">fetchRequest</span><span class="p">,</span> <span class="nl">managedObjectContext</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">,</span> <span class="nl">sectionNameKeyPath</span><span class="p">:</span> <span class="nb">nil</span><span class="p">,</span> <span class="nl">cacheName</span><span class="p">:</span> <span class="s">&quot;Master&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">aFetchedResultsController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">_fetchedResultsController</span> <span class="o">=</span> <span class="n">aFetchedResultsController</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="n">_fetchedResultsController</span><span class="o">!</span><span class="p">.</span><span class="n">performFetch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>         <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>         <span class="c1">//println(&quot;Unresolved error \(error), \(error.userInfo)&quot;)</span>
</span><span class='line'>         <span class="n">abort</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="o">!</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchRequest</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象描述了从数据持久层获取数据的标准，也就是相当于</span><span class="n">SQL</span><span class="err">中的</span><span class="n">from</span><span class="err">和</span><span class="n">where</span><span class="err">等条件语句，它是初始化</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的必要参数之一，因为它规定了从</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例中获取什么样的数据。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://img41.wal8.com/img41/425047_20140623222918/140353389167.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchRequest</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的属性</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSEntityDescription</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">predicate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sortDescriptors</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">分别对应着</span><span class="n">SQL</span><span class="err">中的</span><span class="n">from</span><span class="err">，</span><span class="n">where</span><span class="err">和</span><span class="n">order</span> <span class="n">by</span><span class="err">语句，只不过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchRequest</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">把复杂的</span><span class="n">SQL</span><span class="err">语句进行了简化，查抄条件和排序方法更加灵活。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在上面的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性中我们设置了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchRequest</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例：获取所有</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实体对应的数据，并将结果按照</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">content</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性的升序排列。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">fetchRequest</span><span class="p">:</span> <span class="bp">NSFetchRequest</span><span class="o">!</span><span class="p">,</span> <span class="n">managedObjectContext</span> <span class="nl">context</span><span class="p">:</span> <span class="bp">NSManagedObjectContext</span><span class="o">!</span><span class="p">,</span> <span class="nl">sectionNameKeyPath</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="n">cacheName</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的指定构造器，除了刚才提到的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchRequest</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">参数外，还需传入一个必要参数</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">managedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，在这里我们传入的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">managedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是来自</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AppDelegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">managedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性。有关</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的知识参见</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/&quot;</span><span class="o">&gt;</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">，这里不再赘述。</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">当构造器执行结束后，你就不能再修改</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchRequest</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性了</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">sectionNameKeyPath</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">参数是用来指定抓取数据结果的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">section</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">信息的，这样</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">section</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">信息此时已经预编译好了。因为我们的程序只需要一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">section</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，所以只需传入</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">；</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cacheName</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">参数用于指定缓存</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">section</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">预编译信息的文件名，我们不需要缓存</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">section</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">信息，所以传入</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当执行</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">performFetch</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Bool</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法成功后，你可以通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedObjects</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性来获取数据结果，如果为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">提供数据，可以用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">objectAtIndexPath</span><span class="p">(</span><span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="o">!</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">AnyObject</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法来更加便捷的将数据与</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSIndexPath</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对接上。在我们的例子中，会把数据结果转化为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的子类</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">或</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">func</span> <span class="n">configureCell</span><span class="p">(</span><span class="nl">cell</span><span class="p">:</span> <span class="bp">UITableViewCell</span><span class="p">,</span> <span class="n">atIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">object</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">objectAtIndexPath</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span> <span class="n">as</span> <span class="n">Question</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">object</span><span class="p">.</span><span class="n">content</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面修改</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">insertNewObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法来添加新的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">addAV</span> <span class="o">=</span> <span class="n">CustomIOS7AlertView</span><span class="p">()</span>
</span><span class='line'><span class="n">func</span> <span class="n">insertNewObject</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">textField</span> <span class="o">=</span> <span class="bp">UITextField</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">290</span><span class="p">,</span><span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">&quot;question&quot;</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">Default</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">returnKeyType</span> <span class="o">=</span> <span class="p">.</span><span class="n">Done</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">containerView</span> <span class="o">=</span> <span class="n">textField</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">buttonTitles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;OK&quot;</span><span class="p">,</span><span class="s">&quot;Cancel&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">useMotionEffects</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有了添加</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">功能，当然还会有修改功能：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">modifyAV</span> <span class="o">=</span> <span class="n">CustomIOS7AlertView</span><span class="p">()</span>
</span><span class='line'><span class="n">func</span> <span class="n">modifyObject</span><span class="p">(</span><span class="nl">indexPath</span><span class="p">:</span><span class="bp">NSIndexPath</span><span class="p">){</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">question</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">objectAtIndexPath</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span> <span class="n">as</span> <span class="n">Question</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">textField</span> <span class="o">=</span> <span class="bp">UITextField</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">290</span><span class="p">,</span><span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">&quot;question&quot;</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">Default</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">returnKeyType</span> <span class="o">=</span> <span class="p">.</span><span class="n">Done</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">modifyAV</span><span class="p">.</span><span class="n">containerView</span> <span class="o">=</span> <span class="n">textField</span>
</span><span class='line'>    <span class="n">modifyAV</span><span class="p">.</span><span class="n">buttonTitles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;OK&quot;</span><span class="p">,</span><span class="s">&quot;Cancel&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">modifyAV</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">modifyAV</span><span class="p">.</span><span class="n">useMotionEffects</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">(</span><span class="n">modifyAV</span><span class="p">.</span><span class="n">containerView</span> <span class="n">as</span> <span class="bp">UITextField</span><span class="p">).</span><span class="n">text</span> <span class="o">=</span> <span class="n">question</span><span class="p">.</span><span class="n">content</span>
</span><span class='line'>    <span class="n">modifyAV</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CustomIOS7AlertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是一个第三方的开源</span><span class="n">AlertView</span><span class="err">，它允许我们自定义</span><span class="n">AlertView</span><span class="err">的内容，并提供了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CustomIOS7AlertViewDelegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">协议来用于按钮点击的回调，我们将这两个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CustomIOS7AlertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">delegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性都设置为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">self</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，然后在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MasterViewController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中的实现协议中唯一的方法</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">customIOS7dialogButtonTouchUpInside</span><span class="p">(</span><span class="nl">alertView</span><span class="p">:</span><span class="n">AnyObject</span><span class="o">!</span><span class="p">,</span> <span class="n">clickedButtonAtIndex</span> <span class="nl">buttonIndex</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">func</span> <span class="n">customIOS7dialogButtonTouchUpInside</span><span class="p">(</span><span class="nl">alertView</span><span class="p">:</span><span class="n">AnyObject</span><span class="o">!</span><span class="p">,</span> <span class="n">clickedButtonAtIndex</span> <span class="nl">buttonIndex</span><span class="p">:</span><span class="n">Int</span><span class="p">){</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">buttonIndex</span><span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">context</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">managedObjectContext</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">entity</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">fetchRequest</span><span class="p">.</span><span class="n">entity</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">newManagedObject</span><span class="p">:</span><span class="n">Question</span><span class="o">!</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">av</span> <span class="o">=</span> <span class="n">alertView</span> <span class="n">as</span> <span class="n">CustomIOS7AlertView</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">addAV</span> <span class="o">==</span> <span class="n">av</span><span class="p">{</span>
</span><span class='line'>            <span class="n">newManagedObject</span> <span class="o">=</span> <span class="bp">NSEntityDescription</span><span class="p">.</span><span class="n">insertNewObjectForEntityForName</span><span class="p">(</span><span class="n">entity</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span> <span class="n">context</span><span class="p">)</span> <span class="n">as</span> <span class="n">Question</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">modifyAV</span> <span class="o">==</span> <span class="n">av</span><span class="p">{</span>
</span><span class='line'>            <span class="n">newManagedObject</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">objectAtIndexPath</span><span class="p">(</span><span class="n">selectedIndexPath</span><span class="p">)</span> <span class="n">as</span> <span class="n">Question</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// If appropriate, configure the new managed object.</span>
</span><span class='line'>        <span class="c1">// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.</span>
</span><span class='line'>        <span class="n">newManagedObject</span><span class="p">.</span><span class="n">content</span> <span class="o">=</span> <span class="p">(</span><span class="n">av</span><span class="p">.</span><span class="n">containerView</span> <span class="n">as</span> <span class="bp">UITextField</span><span class="p">).</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Save the context.</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">context</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>            <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span>
</span><span class='line'>            <span class="c1">//println(&quot;Unresolved error \(error), \(error.userInfo)&quot;)</span>
</span><span class='line'>            <span class="n">abort</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">alertView</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="n">alertView</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当用户点击</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">alertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="n">OK</span><span class="err">按钮时，判断</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">alertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">addAV</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">还是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">modifyAV</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，然后对应通过不同途径（新插入到</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ManagedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">还是从</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ManagedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中取出）产生</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">newManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，最后的结果会保存回</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ManagedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中，最后关闭</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">alertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">添加</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">时使用的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">insertNewObjectForEntityForName</span><span class="p">(</span><span class="nl">entityName</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="n">inManagedObjectContext</span> <span class="nl">context</span><span class="p">:</span> <span class="bp">NSManagedObjectContext</span><span class="o">!</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">AnyObject</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法是一个配置和添加实体，并返回该实体对应</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">子类（在这里是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类）的便捷方法，这是一个很强大的类方法，我们无需知道创建</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类的细节就能创建并添加一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例到</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObjectContext</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中，在保存前我们还可以对这个方法返回的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例做修改，然后再通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">save</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Bool</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法保存。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">修改</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的过程其实就是先通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">objectAtIndexPath</span><span class="p">(</span><span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="o">!</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">AnyObject</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法取出数据请求结果当中的某一项并转换成</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象，对其进行修改后再保存。在界面中通过点击</span><span class="n">cell</span><span class="err">右侧带有字母</span><span class="n">i</span><span class="err">的蓝色圆圈来修改</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">内容：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140438530596.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">上图的中的蓝色圆圈是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AccessoryButton</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，需要在</span><span class="n">IB</span><span class="err">中设置</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">TableViewCell</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Identifier</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">QuestionCell</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Accessory</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Detail</span> <span class="n">Disclosure</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，这样我们就能在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableViewDelegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="o">!</span><span class="p">,</span> <span class="n">accessoryButtonTappedForRowWithIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="o">!</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中响应</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AccessoryButton</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">了：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span> <span class="n">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="o">!</span><span class="p">,</span> <span class="n">accessoryButtonTappedForRowWithIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>    <span class="n">selectedIndexPath</span> <span class="o">=</span> <span class="n">indexPath</span>
</span><span class='line'>    <span class="n">modifyObject</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">导航栏右侧的添加</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">按钮已经通过下面的代码配置了响应函数：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="n">addButton</span> <span class="o">=</span> <span class="bp">UIBarButtonItem</span><span class="p">(</span><span class="nl">barButtonSystemItem</span><span class="p">:</span> <span class="p">.</span><span class="n">Add</span><span class="p">,</span> <span class="nl">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="s">&quot;insertNewObject:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="n">addButton</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableViewDelegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">中删除</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Question</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的代码如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span> <span class="n">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">commitEditingStyle</span> <span class="nl">editingStyle</span><span class="p">:</span> <span class="n">UITableViewCellEditingStyle</span><span class="p">,</span> <span class="n">forRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">editingStyle</span> <span class="o">==</span> <span class="p">.</span><span class="n">Delete</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">context</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">managedObjectContext</span>
</span><span class='line'>        <span class="n">context</span><span class="p">.</span><span class="n">deleteObject</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">objectAtIndexPath</span><span class="p">(</span><span class="n">indexPath</span><span class="p">)</span> <span class="n">as</span> <span class="bp">NSManagedObject</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">context</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>            <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span>
</span><span class='line'>            <span class="c1">//println(&quot;Unresolved error \(error), \(error.userInfo)&quot;)</span>
</span><span class='line'>            <span class="n">abort</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这里多说一嘴，如果你想打印出错误信息的话，不要直接反注释那行</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">代码，还需要在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">error</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">后加上感叹号，因为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">error</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是可选类型，需要强制解析：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Unresolved error \(error!), \(error!.userInfo)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="bp">UITextField</span><span class="err">键盘响应</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在将</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITextField</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实例赋值给</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CustomIOS7AlertView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">containerView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性前需要先让其获取当前焦点，并将</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITextField</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">delegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性设为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">self</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">addAV</span> <span class="o">=</span> <span class="n">CustomIOS7AlertView</span><span class="p">()</span>
</span><span class='line'><span class="n">func</span> <span class="n">insertNewObject</span><span class="p">(</span><span class="nl">sender</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">textField</span> <span class="o">=</span> <span class="bp">UITextField</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">290</span><span class="p">,</span><span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">becomeFirstResponder</span><span class="p">()</span><span class="c1">//获取当前焦点</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">&quot;question&quot;</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="n">Default</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">returnKeyType</span> <span class="o">=</span> <span class="p">.</span><span class="n">Done</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">containerView</span> <span class="o">=</span> <span class="n">textField</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">buttonTitles</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;OK&quot;</span><span class="p">,</span><span class="s">&quot;Cancel&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">useMotionEffects</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>    <span class="n">addAV</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">然后让</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MasterViewController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">遵循</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITextFieldDelegate</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">协议，并实现下面两个协议中的方法：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">func</span> <span class="n">textFieldDidBeginEditing</span><span class="p">(</span><span class="nl">textField</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">animationDuration</span><span class="p">:</span><span class="n">NSTimeInterval</span>  <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="o">-=</span><span class="mi">116</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">+=</span><span class="mi">116</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="n">animationDuration</span><span class="p">){</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">func</span> <span class="n">textFieldShouldEndEditing</span><span class="p">(</span><span class="nl">textField</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Bool</span><span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">animationDuration</span><span class="p">:</span><span class="n">NSTimeInterval</span>  <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="o">+=</span><span class="mi">116</span><span class="p">;</span>
</span><span class='line'>    <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">-=</span><span class="mi">116</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//self.view移回原位置</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="n">animationDuration</span><span class="p">){</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">textField</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这里我将键盘高度硬编码为</span><span class="mi">116</span><span class="err">，当</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITextField</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">开始编辑时获取焦点键盘弹出，背景上移；当其结束编辑时键盘消失，背景移回原位。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="n">Xcode6</span> <span class="n">beta2</span><span class="err">中的模拟器不是很好使，经常不能弹出键盘，这里给出的代码有很多疏漏，只提供个参考，主要是处理</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITextField</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">代理的思想</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">随机选择算法</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DetailViewController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的内容跟</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MasterViewController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">内容很像，最大的区别在于多了一个从</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Choice</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">数据中随机抽选的一个方法。因为是通过摇一摇的方式来触发随机算法，所以我们重载</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">motionBegan</span><span class="p">(</span><span class="nl">motion</span><span class="p">:</span> <span class="n">UIEventSubtype</span><span class="p">,</span> <span class="n">withEvent</span> <span class="nl">event</span><span class="p">:</span> <span class="bp">UIEvent</span><span class="o">!</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法来响应手机摇动：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">motionBegan</span><span class="p">(</span><span class="nl">motion</span><span class="p">:</span> <span class="n">UIEventSubtype</span><span class="p">,</span> <span class="n">withEvent</span> <span class="nl">event</span><span class="p">:</span> <span class="bp">UIEvent</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">if</span> <span class="n">motion</span> <span class="o">==</span> <span class="p">.</span><span class="n">MotionShake</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">count</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">fetchedObjects</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">fetchedResultsController</span><span class="p">.</span><span class="n">fetchedObjects</span>
</span><span class='line'>        <span class="n">var</span> <span class="nl">sum</span><span class="p">:</span><span class="n">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="nl">object</span> <span class="p">:</span> <span class="n">AnyObject</span> <span class="k">in</span> <span class="n">arr</span><span class="p">{</span>
</span><span class='line'>            <span class="n">sum</span><span class="o">+=</span><span class="p">(</span><span class="n">object</span> <span class="n">as</span> <span class="n">Choice</span><span class="p">).</span><span class="n">weight</span><span class="p">.</span><span class="n">integerValue</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sum</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">0</span><span class="p">{</span>
</span><span class='line'>            <span class="n">var</span> <span class="n">lucknum</span> <span class="o">=</span> <span class="n">arc4random</span><span class="p">()</span><span class="o">%</span><span class="kt">UInt32</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//                println(&amp;ldquo;(lucknum)&amp;rdquo;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="n">var</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">var</span> <span class="nl">n</span><span class="p">:</span><span class="kt">UInt32</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">lucknum</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mi">0</span><span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">lucknum</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">n</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                    <span class="n">num</span><span class="o">++</span>
</span><span class='line'>                    <span class="n">lucknum</span><span class="o">-=</span><span class="n">n</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">num</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span><span class="n">count</span><span class="p">{</span>
</span><span class='line'>                        <span class="k">break</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">n</span> <span class="o">=</span> <span class="kt">UInt32</span><span class="p">((</span><span class="n">arr</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="n">as</span> <span class="n">Choice</span><span class="p">).</span><span class="n">weight</span><span class="p">.</span><span class="n">integerValue</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//                println(&amp;ldquo;(num)&amp;rdquo;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="n">var</span> <span class="n">alertView</span> <span class="o">=</span> <span class="bp">UIAlertView</span><span class="p">()</span>
</span><span class='line'>            <span class="n">alertView</span><span class="p">.</span><span class="n">alertViewStyle</span> <span class="o">=</span> <span class="p">.</span><span class="n">Default</span>
</span><span class='line'>            <span class="n">alertView</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;恭喜&quot;</span>
</span><span class='line'>            <span class="n">alertView</span><span class="p">.</span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;\(detailItem!.content)的答案是：</span><span class="se">\n</span><span class="s">\((arr[num] as Choice).name)&quot;</span>
</span><span class='line'>            <span class="n">alertView</span><span class="p">.</span><span class="n">addButtonWithTitle</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">alertView</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">前面提到过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSFetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象在执行</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">performFetch</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="n">NSErrorPointer</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Bool</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法后会将获取的数据存在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedObjects</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">数组中，上面这段代码首先获取该问题对应的选项数量，并通过加权运算得到总的权重，然后通过随机数算法生成一个幸运数字，最后计算幸运数字落在哪个选项上。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Initialization</span> <span class="k">in</span> <span class="n">Swift</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/06/24/initialization-in-swift/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mo">06</span><span class="o">-</span><span class="mi">24</span><span class="nl">T09</span><span class="p">:</span><span class="mi">50</span><span class="o">:</span><span class="mi">23</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="kt">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.com/blog/2014/06/24/initialization-in-swift&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">本文参考自</span><span class="n">Swift</span><span class="err">文档，主要包括以下内容：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">简介</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">自定义构造过程</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">默认构造器</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">值类型的构造器代理</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">类的继承和构造过程</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">通过闭包和函数来设置属性的默认值</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2014</span><span class="o">-</span><span class="mi">8</span><span class="o">-</span><span class="mi">8</span><span class="err">更新至</span><span class="n">beta5</span><span class="err">语法</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">简介</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">构造过程是为了使用某个类、结构体或枚举类型的实例而进行的准备过程。这个过程包含了为实例中的每个属性设置初始值和为其执行必要的准备和初始化任务。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Swift</span><span class="err">中的构造器不像</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">那样有返回值，但是跟</span><span class="n">C</span><span class="o">++</span><span class="err">有点像：所有的构造器都以</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">命名，用参数列表来区分各个构造器</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span> <span class="n">js</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Fahrenheit</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">temperature</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'><span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">temperature</span> <span class="o">=</span> <span class="mf">32.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">f</span> <span class="o">=</span> <span class="n">Fahrenheit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>Fahrenheit</code>是一个结构体，与类一样，Swift中的值类型也有构造器和普通方法。上面的代码先是定义了<code>temperature</code>属性的默认值，然后又在构造器中将其赋值，最后<code>temperature</code>属性的值为32。对于<code>temperature</code>这种存储型属性，无论定义默认值还是在构造器中赋值，最终它们实现的效果是一样的。</p>

<p><strong>给存储型类型属性赋默认值或在初始构造器中设置初始值时，此属性的属性观察者不会被调用</strong></p>

<h2>自定义构造过程</h2>

<p>你可以定义一些带参数的构造器</p>

<p>&#8220;`
struct Celsius {</p>

<pre><code>var temperatureInCelsius: Double = 0.0
init(fromFahrenheit fahrenheit: Double) {
    temperatureInCelsius = (fahrenheit - 32.0) / 1.8
}
init(fromKelvin kelvin: Double) {
    temperatureInCelsius = kelvin - 273.15
}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">构造器的参数也跟</span><span class="n">Swift</span><span class="err">中的方法定义（注意不是函数）一样，也分内部和外部参数名。上面代码中两个构造器外部参数名不同，调用构造器的时候也是通过外部参数名来区分的：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="n">boilingPointOfWater</span> <span class="o">=</span> <span class="n">Celsius</span><span class="p">(</span><span class="nl">fromFahrenheit</span><span class="p">:</span> <span class="mf">212.0</span><span class="p">)</span>
</span><span class='line'><span class="c1">// boilingPointOfWater.temperatureInCelsius 是 100.0</span>
</span><span class='line'><span class="n">let</span> <span class="n">freezingPointOfWater</span> <span class="o">=</span> <span class="n">Celsius</span><span class="p">(</span><span class="nl">fromKelvin</span><span class="p">:</span> <span class="mf">273.15</span><span class="p">)</span>
</span><span class='line'><span class="c1">// freezingPointOfWater.temperatureInCelsius 是 0.0”</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">如果不写外部参数名那么外部参数名就等于内部参数名：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Color</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">let</span> <span class="n">red</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">green</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">blue</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="n">Double</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">red</span>   <span class="o">=</span> <span class="n">red</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">green</span> <span class="o">=</span> <span class="n">green</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">blue</span>  <span class="o">=</span> <span class="n">blue</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">magenta</span> <span class="o">=</span> <span class="n">Color</span><span class="p">(</span><span class="nl">red</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">green</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果你不希望为构造器的某个参数提供外部名字，你还可以使用下划线<code>_</code>来显示描述它的外部名：</p>

<p>&#8220;`
struct Celsius {</p>

<pre><code>var temperatureInCelsius: Double
init(fromFahrenheit fahrenheit: Double) {
    temperatureInCelsius = (fahrenheit - 32.0) / 1.8
}
init(fromKelvin kelvin: Double) {
    temperatureInCelsius = kelvin - 273.15
}
init(_ celsius: Double) {
    temperatureInCelsius = celsius
}
</code></pre>

<p>}
let bodyTemperature = Celsius(37.0)
// bodyTemperature.temperatureInCelsius is 37.0
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">你会发现构造器的第一个内部参数名也会默认作为其外部参数名供调用，这一点与方法不同（方法不会默认将第一个内部参数名作为外部参数名使用），因为方法名可以在结尾加上介词来烘托出第一个参数的名字，这样就不需要为第一个参数弄一个外部参数名了，但是构造器只能用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关键字来定义。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你定制的类型包含一个逻辑上允许取值为空的存储型属性</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="err">不管是因为它无法在初始化时赋值，还是因为它可以在之后某个时间点可以赋值为空</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="err">你都需要将它定义为可选类型</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">optional</span> <span class="n">type</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。可选类型的属性将自动初始化为空</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，表示这个属性是故意在初始化时设置为空的。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="n">SurveyQuestion</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">let</span> <span class="nl">text</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="n">var</span> <span class="nl">response</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="nl">text</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">ask</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">cheeseQuestion</span> <span class="o">=</span> <span class="n">SurveyQuestion</span><span class="p">(</span><span class="nl">text</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Do</span> <span class="n">you</span> <span class="n">like</span> <span class="n">cheese</span><span class="o">?&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">cheeseQuestion</span><span class="p">.</span><span class="n">ask</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 输出 &amp;ldquo;Do you like cheese?&amp;rdquo;</span>
</span><span class='line'><span class="n">cheeseQuestion</span><span class="p">.</span><span class="n">response</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Yes</span><span class="p">,</span> <span class="n">I</span> <span class="k">do</span> <span class="n">like</span> <span class="n">cheese</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>调查问题在问题提出之后，我们才能得到回答。所以我们将属性回答response声明为String?类型，或者说是可选字符串类型optional String。当SurveyQuestion实例化时，它将自动赋值为空nil，表明暂时还不存在此字符串。<br/>
只要在构造过程结束前常量的值能确定，你可以在构造过程中的任意时间点修改常量属性的值。尽管text属性是常量，我们仍然可以在其类的构造器中设置它的值。<strong>对某个类实例来说，它的常量属性只能在定义它的类的构造过程中修改；不能在子类中修改。</strong></p>

<h2>默认构造器</h2>

<p>Swift将为所有属性已提供默认值的且自身没有定义任何构造器的结构体或基类，提供一个默认的构造器。这个默认构造器将简单的创建一个所有属性值都设置为默认值的实例：</p>

<p>&#8220;`
class ShoppingListItem {</p>

<pre><code>var name: String?
var quantity = 1
var purchased = false
</code></pre>

<p>}
var item = ShoppingListItem()
<code>``
</code>ShoppingListItem<code>类没有父类（是基类），所有属性都有默认值（可选属性默认值为</code>nil`），所以可以直接调用默认的无参数构造器来初始化。<br/>
除上面提到的默认构造器，如果结构体对所有存储型属性提供了默认值且自身没有提供定制的构造器，它们能自动获得一个<strong>逐一成员构造器（Memberwise Initializers）</strong>：</p>

<p>&#8220;`
struct Size {</p>

<pre><code>var width = 0.0, height = 0.0
</code></pre>

<p>}
let twoByTwo = Size(width: 2.0, height: 2.0)
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">逐一成员构造器是用来初始化结构体新实例里成员属性的快捷方法。我们在调用逐一成员构造器时，通过与成员属性名相同的参数名进行传值来完成对成员属性的初始赋值。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">值类型的构造器代理</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">构造器可以通过调用其它构造器来完成实例的部分构造过程。这一过程称为构造器代理，它能减少多个构造器间的代码重复：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Size</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Point</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Rect</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Point</span><span class="p">()</span>
</span><span class='line'><span class="n">var</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Size</span><span class="p">()</span>
</span><span class='line'><span class="n">init</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">Size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">origin</span> <span class="o">=</span> <span class="n">origin</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="nl">center</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">Size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">originX</span> <span class="o">=</span> <span class="n">center</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">originY</span> <span class="o">=</span> <span class="n">center</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span> <span class="n">Point</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">originX</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">originY</span><span class="p">),</span> <span class="nl">size</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="err">在值类型中，如果你添加了自定义构造器（如</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">center</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">Size</span><span class="p">)</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">），</span><span class="n">Swift</span><span class="err">不会再为结构体生成一个默认构造器和逐一成员构造器，所以我们自己定义了</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">()</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">Size</span><span class="p">)</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，他们与自动生成的默认构造器和逐一成员构造器是一样的。这样子会显得很麻烦，我们可以将自定义构造器</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">center</span><span class="p">:</span> <span class="n">Point</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="n">Size</span><span class="p">)</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">写在结构体</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Rect</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的扩展（</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">extension</span><span class="err">`）里，这样就不用自己把默认构造器和逐一成员构造器写一遍了。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">构造器</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">center</span><span class="p">:</span><span class="nl">size</span><span class="p">:)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">先通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">center</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">size</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的值计算出</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">origin</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的坐标。然后再调用（或代理给）</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span><span class="nl">size</span><span class="p">:)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">构造器来将新的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">origin</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">size</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">值赋值到对应的属性中。因为值类型（结构体和枚举类型）不支持继承，所以构造器代理的过程相对简单，因为它们只能代理给本身提供的其它构造器：你只能在构造器内部调用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">类的继承和构造过程</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">类里面的所有存储型属性</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="err">包括所有继承自父类的属性</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="err">都必须在构造过程中设置初始值。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Swift</span> <span class="err">提供了两种类型的类构造器来确保所有类实例中存储型属性都能获得初始值，它们分别是指定构造器</span><span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Designated</span> <span class="n">Initializers</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span><span class="err">和便利构造器</span><span class="p">(</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Convenience</span> <span class="n">Initializers</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="p">)</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">指定构造器和便利构造器</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">指定构造器是类中最主要的构造器。一个指定构造器将初始化类中提供的所有属性，并根据父类链往上调用父类的构造器来实现父类的初始化。</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">每一个类都必须拥有至少一个指定构造器。</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">便利构造器是类中比较次要的、辅助型的构造器。你可以定义便利构造器来调用同一个类中的指定构造器，并为其参数提供默认值。你也可以定义便利构造器来创建一个特殊用途或特定输入的实例。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">类的指定构造器的写法跟值类型简单构造器一样，便利构造器也采用相同样式的写法，但需要在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关键字之前放置</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">convenience</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">关键字：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">statements</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>构造器链</h3>

<p>为了简化指定构造器和便利构造器之间的调用关系，Swift 采用以下三条规则来限制构造器之间的代理调用：</p>

<ol>
<li>指定构造器必须调用其直接父类的的指定构造器。</li>
<li>便利构造器必须调用同一类中定义的其它构造器。</li>
<li>便利构造器必须最终以调用一个指定构造器结束。</li>
</ol>


<p>一个更方便记忆的方法是:</p>

<ul>
<li>指定构造器必须总是向上代理</li>
<li>便利构造器必须总是横向代理</li>
</ul>


<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializerDelegation01_2x.png" alt="" />
举个栗子：</p>

<p>&#8220;`
class Food {</p>

<pre><code>var name: String
init(name: String) {
    self.name = name
}
convenience init() {
    self.init(name: "[Unnamed]")
}
</code></pre>

<p>}
let namedMeat = Food(name: &ldquo;Bacon&rdquo;)
// namedMeat 的名字是 &ldquo;Bacon”
let mysteryMeat = Food()
// mysteryMeat 的名字是 [Unnamed]
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializersExample01_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">两段式构造过程</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Swift</span> <span class="err">中类的构造过程包含两个阶段。第一个阶段，每个存储型属性通过引入它们的类的构造器来设置初始值。当每一个存储型属性值被确定后，第二阶段开始，它给每个类一次机会在新实例准备使用之前进一步定制它们的存储型属性。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">下图展示了在假定的子类和父类之间构造的阶段</span><span class="mi">1</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/twoPhaseInitialization01_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">指定构造器将确保所有子类的属性都有值，然后它将调用父类的指定构造器，并沿着造器链一直往上完成父类的构建过程。一旦父类中所有属性都有了初始值，实例的内存被认为是完全初始化，而阶段</span><span class="mi">1</span><span class="err">也已完成。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">以下展示了相同构造过程的阶段</span><span class="mi">2</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/twoPhaseInitialization02_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">父类中的指定构造器现在有机会进一步来定制实例（尽管它没有这种必要）。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">一旦父类中的指定构造器完成调用，子类的构指定构造器可以执行更多的定制操作（同样，它也没有这种必要）。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">最终，一旦子类的指定构造器完成调用，最开始被调用的便利构造器可以执行更多的定制操作。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">两段式构造过程是基于</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">安全检查</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">的，可以简单的理解为：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">指定构造器初始化顺序：初始化类自己引入的属性</span><span class="o">-&gt;</span><span class="err">向上代理调用父类指定构造器</span><span class="o">-&gt;</span><span class="err">为继承的属性设置新值</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">便利构造器初始化顺序：代理调用同一类中的其它构造器</span><span class="o">-&gt;</span><span class="err">为任意属性赋新值</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">构造器在第一阶段构造完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用</span><span class="nb">self</span><span class="err">的值。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">构造器的继承和重载</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">跟</span> <span class="n">Objective</span><span class="o">-</span><span class="n">C</span> <span class="err">中的子类不同，</span><span class="n">Swift</span> <span class="err">中的子类不会默认继承父类的构造器。</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">这是为了防止你想初始化一个很牛逼的类，但是调用的却是它继承于父类的菜逼构造器，那将会是个悲剧。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">但是如果特定条件可以满足，父类构造器是可以被自动继承的：</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">如果子类提供了所有父类指定构造器的实现</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="err">不管是通过规则</span><span class="mi">1</span><span class="err">继承过来的，还是通过自定义实现的</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="err">它将自动继承所有父类的便利构造器。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ol</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">即使你在子类中添加了更多的便利构造器，这两条规则仍然适用。子类可以通过定义便利构造器来实现父类中的指定构造器，来部分满足规则</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你需要在子类中重写一个父类的指定构造器（包括自动生成的默认构造器），无论子类中的构造器是指定构造器还是便利构造器，都需要在子类定义重载的构造器前加上</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">修饰；如果你需要在子类中重写一个父类的便利构造器，根据构造器链，父类的便利构造器不会被子类直接调用，所以不必在子类重写构造器的定义前用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">修饰。这是</span><span class="n">Xcode6beta5</span><span class="err">新修订的规则，在以前的版本中重载构造器不用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">override</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">修饰。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">还记得之前指定的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Food</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类吧，现在它多了一个子类</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecipeIngredient</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="nl">RecipeIngredient</span><span class="p">:</span> <span class="n">Food</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="nl">quantity</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">quantity</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">quantity</span> <span class="o">=</span> <span class="n">quantity</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">override</span> <span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nl">quantity</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="err">可以看出来</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecipeIngredient</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类的指定构造器和便利构造器都符合两段式构造安全检查，并且便利构造器跟</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Food</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类中的指定构造器具有相同的参数，尽管</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecipeIngredient</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这个构造器是便利构造器，</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecipeIngredient</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">依然提供了对所有父类指定构造器的实现。因此，</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecipeIngredient</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">也能自动继承了所有父类的便利构造器</span><span class="p">(</span><span class="err">也就是</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">init</span><span class="p">()</span><span class="err">`</span><span class="p">)</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializersExample02_2x.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">上图中</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">RecipeIngredient</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类继承的</span><span class="n">init</span><span class="p">()</span><span class="err">函数版本跟</span><span class="n">Food</span><span class="err">提供的版本是一样的，除了它是将任务代理给</span><span class="n">RecipeIngredient</span><span class="err">版本的</span><span class="n">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span><span class="err">而不是</span><span class="n">Food</span><span class="err">提供的版本。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">食材都已经建立好了，下面开始采购吧！我们需要一个购物单，购物单中每一项是这样子的：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="nl">ShoppingListItem</span><span class="p">:</span> <span class="n">RecipeIngredient</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">var</span> <span class="n">purchased</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="n">var</span> <span class="nl">description</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'><span class="n">var</span> <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;\(quantity) x \(name.lowercaseString)&quot;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">+=</span> <span class="n">purchased</span> <span class="o">?</span> <span class="s">&quot; ✔&quot;</span> <span class="o">:</span> <span class="s">&quot; ✘&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>由于它为自己引入的所有属性都提供了默认值，并且自己没有定义任何构造器，ShoppingListItem将自动继承所有父类中的指定构造器和便利构造器。</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializersExample03_2x.png" alt="" /></p>

<p>你可以使用全部三个继承来的构造器来创建ShoppingListItem的新实例：</p>

<p>&#8220;`
var breakfastList = [</p>

<pre><code>ShoppingListItem(),
ShoppingListItem(name: "Bacon"),
ShoppingListItem(name: "Eggs", quantity: 6),
</code></pre>

<p>]
breakfastList[0].name = &ldquo;Orange juice&rdquo;
breakfastList[0].purchased = true
for item in breakfastList {</p>

<pre><code>println(item.description)
</code></pre>

<p>}
// 1 x orange juice ✔
// 1 x bacon ✘
// 6 x eggs ✘
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">必需构造器</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当你想让一个类的某个构造器被所有子类都实现，你可以在定义这个构造器时在前面用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">required</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">修饰：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="n">SomeClass</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">required</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// initializer implementation goes here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>你也必须在它的子类定义必需构造器前用<code>required</code>修饰，但不必用<code>override</code>修饰：</p>

<p>&#8220;`
class SomeSubClass: SomeClass {</p>

<pre><code>required init() {
    // subclass implementation of the required initializer goes here
}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">这样的语法可以将这种“必需”信号传递给未来更多的子类，表明这个构造器一定要实现，千秋万代</span><span class="o">~&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当然你可以满足构造器的继承规则来继承必需构造器，这样就不用“必须”重写“必需”构造器了：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">class</span> <span class="nl">SomeSubSubClass</span><span class="p">:</span><span class="n">SomeSubClass</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span><span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">//subsubclass implementation of a convenience initializer goes here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>通过闭包和函数来设置属性的默认值</h2>

<p>如果某个存储型属性的默认值需要特别的定制或准备，你就可以使用闭包或全局函数来为其属性提供定制的默认值。每当某个属性所属的新类型实例创建时，对应的闭包或函数会被调用，而它们的返回值会当做默认值赋值给这个属性。</p>

<p>&#8220;`
class SomeClass {</p>

<pre><code>let someProperty: SomeType = {
    // 在这个闭包中给 someProperty 创建一个默认值
    // someValue 必须和 SomeType 类型相同
    return someValue
    }()
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">注意闭包结尾的大括号后面接了一对空的小括号。这是用来告诉</span> <span class="n">Swift</span> <span class="err">需要立刻执行此闭包。如果你忽略了这对括号，相当于是将闭包本身作为值赋值给了属性，而不是将闭包的返回值赋值给属性。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你使用闭包来初始化属性的值，请记住在闭包执行时，实例的其它部分都还没有初始化。这意味着你不能够在闭包里访问其它的属性，就算这个属性有默认值也不允许。同样，你也不能使用隐式的</span><span class="nb">self</span><span class="err">属性，或者调用其它的实例方法。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Optionals</span> <span class="n">and</span> <span class="n">Optional</span> <span class="n">Chaining</span> <span class="k">in</span> <span class="n">Swift</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/06/17/optionals-and-optional-chaining-in-swift/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mo">06</span><span class="o">-</span><span class="mi">17</span><span class="nl">T20</span><span class="p">:</span><span class="mi">42</span><span class="o">:</span><span class="mi">17</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="kt">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.com/blog/2014/06/17/optionals-and-optional-chaining-in-swift&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">可选类型（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optionals</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">）在</span><span class="n">Swift</span><span class="err">中用于处理值可能缺失的情况，也就是说可能存在没有值的情况。</span><span class="n">C</span> <span class="err">和</span> <span class="n">Objective</span><span class="o">-</span><span class="n">C</span> <span class="err">中并没有可选类型这个概念。但在</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">中，一个方法的返回值可以是一个对象或</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">值（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">表示缺少一个合法对象），而对象只是针对类而言，结构体、基本</span><span class="n">C</span><span class="err">类型和枚举并不适用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来表示值的缺失，对于这些类型，</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span> <span class="err">方法一般会返回一个特殊值（比如</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSNotFound</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">）来暗示值缺失。这种表示“值缺失”方法不统一的局面使得调用方法的程序员蛋疼了</span><span class="o">-</span><span class="err">需要针对不同情况进行处理</span><span class="o">-</span><span class="err">但随着可选类型的诞生，这种情形在</span><span class="n">Swift</span><span class="err">中得到解决，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optionals</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">可以表示任意类型值的缺失。</span><span class="p">(</span><span class="mi">2014</span><span class="o">-</span><span class="mi">8</span><span class="o">-</span><span class="mi">8</span><span class="err">更新至</span><span class="n">beta5</span><span class="err">语法</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">可选类型（</span><span class="n">Optionals</span><span class="err">）</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">理论</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">Xcode6beta5</span><span class="err">发布后，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optional</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的定义有了修改：</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="n">Reflectable</span><span class="p">,</span> <span class="n">NilLiteralConvertible</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">None</span>
</span><span class='line'><span class="k">case</span> <span class="n">Some</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="n">init</span><span class="p">()</span>
</span><span class='line'><span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">some</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="n">var</span> <span class="nl">hasValue</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// Haskell&#39;s fmap, which was mis-named</span>
</span><span class='line'><span class="n">func</span> <span class="n">map</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">U</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="nl">f</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">U</span><span class="o">?</span>
</span><span class='line'><span class="n">func</span> <span class="n">getMirror</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">MirrorType</span>
</span><span class='line'><span class="k">static</span> <span class="n">func</span> <span class="n">convertFromNilLiteral</span><span class="p">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">T</span><span class="o">?</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可选类型是本质是一个枚举类型，包含两个成员：<code>None</code>和<code>Some</code>，其中<code>Some</code>成员还有一个类型为泛型<code>T</code>的关联值（Associated Values）。</p>

<p>光凭猜测大约知道：当可选类型有值的时候其实是<code>Some</code>成员，并在构造器<code>init(_ some: T)</code>调用时将值存储在<code>Some</code>成员的关联值中，此时<code>getLogicValue()</code>方法返回true；当可选类型没有值的时候其实是<code>None</code>成员，并在构造器<code>init()</code>调用时将<code>nil</code>给了<code>None</code>成员，具体细节不是很清楚。</p>

<p>看得出可选类型的设计借鉴了Haskell语言，至于<code>nil</code>这个字面量到底是什么：</p>

<p>Swift 的<code>nil</code>和 Objective-C 中的<code>nil</code>并不一样。在 Objective-C 中，<code>nil</code>是一个指向不存在对象的指针。在 Swift 中，<code>nil</code>不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选值都可以被设置为<code>nil</code>，不只是对象（object）类型。</p>

<p><strong>可选类型默认值为<code>nil</code></strong></p>

<h3>if条件判断和强制解析</h3>

<p>在Swift中，有时候需要把内容为数字的字符串转化成数字：</p>

<p><code>js
let possibleNumber = "123"
let convertedNumber = possibleNumber.toInt()
// convertedNumber 被推测为类型 "Int?"， 或者类型 "optional Int"
</code></p>

<p>因为Swift是类型安全的语言，为了保证转化过程中不出错，<code>toInt()</code>方法返回的是一个<code>Optional&lt;Int&gt;</code>(也可写成<code>Int?</code>)类型的实例。如果被转化的字符串不是一个数字（比如是“hello world”），那样<code>toInt()</code>返回的内容将不含有<code>Int</code>值。这保证了整个过程不报错，下面我们可以“优雅的”检查下<code>convertedNumber</code>是否有<code>Int</code>值：</p>

<p>&#8220;`
if convertedNumber != nil {</p>

<pre><code>println("convertedNumber has an integer value of \(convertedNumber!).")
</code></pre>

<p>}
// 输出 &ldquo;123 has an integer value of 123&rdquo;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（</span><span class="o">!</span><span class="err">）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">强制解析（</span><span class="n">forced</span> <span class="n">unwrapping</span><span class="err">）</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">PS</span><span class="err">：</span><span class="n">beta5</span><span class="err">中去掉了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">LogicValue</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">协议，并用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">hasValue</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">替代它来存储是否有值。也就是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optional</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">不会隐式转换成</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Bool</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，在条件判断语句中需要用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;==&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">或</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;!=&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来判断是否为空。苹果取消了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Optional</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的隐式</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Bool</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">值是为了防止混淆。（新手可以无视这段话，我在讲述</span><span class="n">Swift</span><span class="err">的变更史，哈哈）</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">可选绑定</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">除了用</span><span class="k">if</span><span class="err">语句判断和强制解析来获取可选类型中的值，还可以用</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">可选绑定</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">的方式来来判断可选类型是否包含值：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">constantName</span> <span class="o">=</span> <span class="n">someOptional</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">statements</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
于是之前的例子可以可以改写为：</p>

<p>&#8220;`
if let actualNumber = possibleNumber.toInt() {</p>

<pre><code>println("\(possibleNumber) has an integer value of \(actualNumber)")
</code></pre>

<p>} else {</p>

<pre><code>println("\(possibleNumber) could not be converted to an integer")
</code></pre>

<p>}
// 输出 &ldquo;123 has an integer value of 123&rdquo;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">possibleNumber</span><span class="p">.</span><span class="n">toInt</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">返回的可选</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">包含一个值，创建一个叫做</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">actualNumber</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的新常量并将可选包含的值赋给它。它已经被可选类型包含的值初始化过，所以不需要再使用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;!&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">后缀来获取它的值。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型总会有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。这种类型的可选状态被定义为</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">隐式解析可选类型</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">（</span><span class="n">implicitly</span> <span class="n">unwrapped</span> <span class="n">optionals</span><span class="err">）。把想要用作可选的类型的后面的问号（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span><span class="o">?&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">）改成感叹号（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span><span class="o">!&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">）来声明一个隐式解析可选类型。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">possibleString</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;An optional string.&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">possibleString</span><span class="o">!</span><span class="p">)</span> <span class="c1">// 需要惊叹号来获取值</span>
</span><span class='line'><span class="c1">// 输出 &quot;An optional string.&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">assumedString</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;An implicitly unwrapped optional string.&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">assumedString</span><span class="p">)</span>  <span class="c1">// 不需要感叹号</span>
</span><span class='line'><span class="c1">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">if</span> <span class="n">assumedString</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="n">assumedString</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// 输出 &amp;ldquo;An implicitly unwrapped optional string.&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure>
你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：</p>

<p>&#8220;`
if let definiteString = assumedString {</p>

<pre><code>println(definiteString)
</code></pre>

<p>}
// 输出 &ldquo;An implicitly unwrapped optional string.&rdquo;
<code>``
可能看到这里你会觉得隐式解析可选类型的存在意义是什么？为何不直接用普通的非可选类型呢？其实</code>Implicitly Unwrapped Optionals`被用于类的初始化方法中，避免循环引用:</p>

<p>&#8220;`
class Country {</p>

<pre><code>let name: String
let capitalCity: City!
init(name: String, capitalName: String) {
    self.name = name
    self.capitalCity = City(name: capitalName, country: self)
}
</code></pre>

<p>}</p>

<p>class City {</p>

<pre><code>let name: String
unowned let country: Country
init(name: String, country: Country) {
    self.name = name
    self.country = country
}
</code></pre>

<p>}</p>

<p>var country = Country(name: &ldquo;Canada&rdquo;, capitalName: &ldquo;Ottawa&rdquo;)
println(&ldquo;(country.name)&rsquo;s capital city is called (country.capitalCity.name)&rdquo;)
// prints &ldquo;Canada&rsquo;s capital city is called Ottawa”</p>

<p>&#8220;`</p>

<p>因为编译器会将其认为默认<code>nil</code>，不需赋值就可以完成类的初始化，在例子中<code>capitalCity</code>还没被赋值时<code>Country</code>类就已经初始化并可以被引用；这样就能实现一行代码建立<code>Country</code>和<code>City</code>实例而不造成强引用循环。有关ARC的更多知识可以看看这篇<a href="http://yulingtianxia.com/blog/2014/06/17/swiftzhong-de-arc/">文章</a></p>

<h3>Nil Coalescing Operator</h3>

<p><code>??</code>是beta5新加入的一个二元运算符，<code>a ?? b</code>相当于<code>a != nil ? a! : b</code>的简写。也就是如果<code>a</code>是有值就返回<code>a</code>的值，否则返回<code>b</code>的值。</p>

<h2>可选链（Optional Chaining）</h2>

<p>可选链（Optional Chaining）是一种可以请求和调用属性、方法及下标的过程，它的可选性体现于请求或调用的目标当前可能为空（<code>nil</code>）。如果可选的目标有值，那么调用就会成功；相反，如果选择的目标为空（<code>nil</code>），则这种调用将返回空（<code>nil</code>）。多次请求或调用可以被链接在一起形成一个链，如果任何一个节点为空（<code>nil</code>）将导致整个链失效。</p>

<p>可能官方的定义不接地气，先来个例子做铺垫：</p>

<p>&#8220;`
class Person {</p>

<pre><code>var residence: Residence?
</code></pre>

<p>}</p>

<p>class Residence {</p>

<pre><code>var rooms = [Room]()
var numberOfRooms: Int {
    return rooms.count
}
subscript(i: Int) -&gt; Room {
    get {
        return rooms[i]
    }
    set {
        rooms[i] = newValue
    }
}
func printNumberOfRooms() {
    println("The number of rooms is \(numberOfRooms)")
}
var address: Address?
</code></pre>

<p>}</p>

<p>class Room {</p>

<pre><code>let name: String
init(name: String) { self.name = name }
</code></pre>

<p>}</p>

<p>class Address {</p>

<pre><code>var buildingName: String?
var buildingNumber: String?
var street: String?
func buildingIdentifier() -&gt; String? {
    if buildingName != nil {
        return buildingName
    } else if buildingNumber != nil {
        return buildingNumber
    } else {
        return nil
    }
}
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">人（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Person</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">）可能会拥有住所（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Residence</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">），一个住所肯定会有一些带名字的房间（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Room</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">），还有可能注明所在地址（</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Address</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">）。住所还提供了获取房间数目的方法，并能通过下标访问某个房间，而地址包含了一些可选的信息。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">PS</span><span class="err">：不要嫌我墨迹，官方文档比我墨迹多了。。。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">现在我造个人（邪恶的孩子面壁思过去！），就叫</span><span class="n">john</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="n">john</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">如果我们想知道</span><span class="n">john</span><span class="err">同学家房子大不大，有几个房间啊？但是直接问不太好，万一</span><span class="n">john</span><span class="err">家里穷漂泊不定四海为家，那不就玩脱了么？</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="n">roomCount</span> <span class="o">=</span> <span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">!</span><span class="p">.</span><span class="n">numberOfRooms</span>
</span><span class='line'><span class="c1">//将导致运行时错误</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">所以还是先问问他家有没有房子吧：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">roomCount</span> <span class="o">=</span> <span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">?</span><span class="p">.</span><span class="n">numberOfRooms</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;John&#39;s residence has \(roomCount) room(s).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;我造john的时候没给他分房子，这可怜孩子！&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &amp;ldquo;我造john的时候没给他分房子，这可怜孩子！&amp;rdquo;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="err">可选链提供了一种另一种获得</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">numberOfRooms</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的方法。利用可选链，使用</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;?&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">来代替原来</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;!&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的位置，因为这种尝试获得</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">numberOfRooms</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的操作有可能失败，可选链会返回</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int</span><span class="o">?&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类型值。要注意的是，虽然</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">numberOfRooms</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">是非可选</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，这一点也成立。只要是通过可选链的请求就意味着最后</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">numberOfRooms</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">总是返回一个</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int</span><span class="o">?&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">而不是</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Int</span><span class="err">`。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">反过来我们也可以通过可选链给属性赋值，比如当我们还不确定</span><span class="n">john</span><span class="err">有没有房子的时候就给人家房子规定好地址：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">let</span> <span class="n">someAddress</span> <span class="o">=</span> <span class="n">Address</span><span class="p">()</span>
</span><span class='line'><span class="n">someAddress</span><span class="p">.</span><span class="n">buildingNumber</span> <span class="o">=</span> <span class="s">&quot;29&quot;</span>
</span><span class='line'><span class="n">someAddress</span><span class="p">.</span><span class="n">street</span> <span class="o">=</span> <span class="s">&quot;Acacia Road&quot;</span>
</span><span class='line'><span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">?</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">someAddress</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">现在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">还是</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">nil</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，所以给它的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">address</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">属性赋值只会引起地产商的不满</span><span class="o">-</span><span class="err">赋值会失败</span><span class="o">-</span><span class="err">好在这种“不满”并不会让程序崩溃。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">我们也可以在可选链上调用方法：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">if</span> <span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">?</span><span class="p">.</span><span class="n">printNumberOfRooms</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It was possible to print the number of rooms.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;It was not possible to print the number of rooms.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &amp;ldquo;It was not possible to print the number of rooms.&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>虽然<code>printNumberOfRooms</code>方法无返回值，但是它有一个隐式的返回类型<code>Void</code>，在可选链上调用后返回类型就成了<code>Void?</code>，既然是可选类型，就可以放到if语句条件判断中啦！</p>

<p>其实在可选链上给属性赋值也会返回类型为<code>Void?</code>的值，我们可以判断下返回值是否为<code>nil</code>，这样就知道赋值操作是否成功：</p>

<p>&#8220;`
if (john.residence?.address = someAddress) != nil {</p>

<pre><code>println("房子选址成功")
</code></pre>

<p>} else {</p>

<pre><code>println("地产商再次不满！")
</code></pre>

<p>}
// prints &ldquo;地产商再次不满！&rdquo;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">博主你够了地产商快被你玩坏了，好吧换个话题：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">接下来想看看</span><span class="n">john</span><span class="err">家第一间房子名字叫啥，但却怕人家没房子遭遇尴尬，不用怕：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">firstRoomName</span> <span class="o">=</span> <span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">name</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;The first room name is \(firstRoomName).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;连房子都没有更别提第一间房间名了！&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &amp;ldquo;连房子都没有更别提第一间房间名了！&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在下标调用中可选链的问号直接跟在<code>john.residence</code>的后面，在下标中括号的前面，因为<code>john.residence</code>才是可选链试图获得的可选值。（关键是<code>Person</code>不一定有<code>residence</code>，但<code>Residence</code>肯定有<code>rooms</code>）</p>

<p>但是如果下标的值本来就是可选值（如果<code>Residence</code>不一定有9号房间，正如Swift中的Dictionary类型，下标给定的key不一定能返回value：<code>subscript (key: Key) -&gt; Value?</code>），那么我们在存取下标的时候需要在下标右中括号的右边标记<code>?</code>:</p>

<p><code>
var testScores = ["Dave": [86, 82, 84], "Tim": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Tim"]?[0]++
testScores["Brian"]?[0] = 72
// the "Dave" array is now [91, 82, 84] and the "Tim" array is now [80, 94, 81]"
</code>
显而易见“Brian”并不存在，更别提把它当做数组并给第一个元素赋值了。华丽丽的失败。</p>

<p>类似前面用可选链给属性赋值，也可以给下标赋值：</p>

<p><code>
john.residence?[0] = Room(name: "Bathroom")
</code></p>

<p>当然这不会成功，因为john没房子！</p>

<p>造个john还玩了人家这么久，还不快给人家分套房子！（其实是为了演示后面的<code>Address</code>）</p>

<p>&#8220;`
let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: &ldquo;Living Room&rdquo;))
johnsHouse.rooms.append(Room(name: &ldquo;Kitchen&rdquo;))
john.residence = johnsHouse</p>

<p>if let firstRoomName = john.residence?[0].name {</p>

<pre><code>println("The first room name is \(firstRoomName).")
</code></pre>

<p>} else {</p>

<pre><code>println("Unable to retrieve the first room name.")
</code></pre>

<p>}
// prints &ldquo;The first room name is Living Room.&rdquo;
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">现在</span><span class="n">john</span><span class="err">乔迁新居奔小康了，快问问他家地址，好串个门</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="n">let</span> <span class="n">johnsAddress</span> <span class="o">=</span> <span class="n">Address</span><span class="p">()</span>
</span><span class='line'><span class="n">johnsAddress</span><span class="p">.</span><span class="n">buildingName</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">The</span> <span class="n">Larches</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">johnsAddress</span><span class="p">.</span><span class="n">street</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Laurel</span> <span class="n">Street</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">!</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">johnsAddress</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">johnsStreet</span> <span class="o">=</span> <span class="n">john</span><span class="p">.</span><span class="n">residence</span><span class="o">?</span><span class="p">.</span><span class="n">address</span><span class="o">?</span><span class="p">.</span><span class="n">street</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;John&#39;s street name is \(johnsStreet).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;Unable to retrieve the address.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &amp;ldquo;John&amp;rsquo;s street name is Laurel Street.&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>值得注意的是<code>john.residence</code>属性是一个可选类型并且已经不为<code>nil</code>(刚刚奔小康了嘛)，因此你需要在它获取<code>address</code>属性之前使用<code>!</code>强制解析以获得它的实际值。</p>

<p>虽然这条可选链上有两个问号（两层可选链），但其返回类型依然是可选类型（<code>String?</code>），而不是可选类型的嵌套（<code>String??</code>即<code>Optional&lt;Optional&lt;String&gt;&gt;</code>）。你可以将多层可选链连接在一起，可以掘取模型内更下层的属性方法和下标。然而多层可选链不能再添加比已经返回的可选值更多的层。 也就是说：</p>

<p><strong>如果你试图获得的类型不是可选类型，由于使用了可选链它将变成可选类型。 如果你试图获得的类型已经是可选类型，由于可选链它也不会提高可选性。</strong></p>

<p>前面的例子解释了如何通过可选链来获得可选类型属性值。你也可以通过可选链调用一个返回可选类型值的方法并按需链接该方法的返回值。 如上所述，<code>buildingIdentifier</code>方法在可选链调用后最终的返回值类型依然是<code>String?</code>:</p>

<p>&#8220;`
if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {</p>

<pre><code>println("John's building identifier is \(buildingIdentifier).")
</code></pre>

<p>}
// 打印 &ldquo;John&rsquo;s building identifier is The Larches.&rdquo;
&#8220;`
如果你还想进一步对方法返回值执行可选链，将可选链问号符放在方法括号的后面：</p>

<p>&#8220;`
if let upper = john.residence?.address?.buildingIdentifier()?.uppercaseString {</p>

<pre><code>println("John's uppercase building identifier is \(upper).")
</code></pre>

<p>}
// 打印 &ldquo;John&rsquo;s uppercase building identifier is THE LARCHES.&rdquo;
<code>``
你将可选链问号符放在括号后面是因为你想要链接的可选值是</code>buildingIdentifier<code>方法的返回值，不是</code>buildingIdentifier`方法本身。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | 玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-09-26T18:38:38+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSPredicate]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/17/nspredicate/"/>
    <updated>2014-05-17T20:42:11+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/17/nspredicate</id>
    <content type="html"><![CDATA[<p>本文转载自<a href="http://nshipster.cn/nspredicate/">http://nshipster.cn/nspredicate/</a></p>

<p>NSPredicate是一个Foundation类，它指定数据被获取或者过滤的方式。它的查询语言就像SQL的WHERE和正则表达式的交叉一样，提供了具有表现力的，自然语言界面来定义一个集合被搜寻的逻辑条件。</p>

<!--more-->


<p>相比较抽象的谈论它，展示NSPredicate的使用方法更加容易，所以我们来重新审视<a href="http://nshipster.com/nssortdescriptor/">NSSortDescriptor</a>中使用的示例数据集吧：</p>

<table>
<thead>
<tr>
<th>索引 </th>
<th> 0 </th>
<th> 1 </th>
<th> 2 </th>
<th> 3 </th>
</tr>
</thead>
<tbody>
<tr>
<td>名 </td>
<td> Alice </td>
<td> Bob   </td>
<td> Charlie </td>
<td>  Quentin</td>
</tr>
<tr>
<td>姓 </td>
<td> Smith </td>
<td> Jones </td>
<td> Smith </td>
<td> Alberts</td>
</tr>
<tr>
<td>年龄  </td>
<td> 24    </td>
<td> 27    </td>
<td> 33    </td>
<td> 31</td>
</tr>
</tbody>
</table>


<p>&#8220;` objc</p>

<p>@interface Person : NSObject
@property NSString <em>firstName;
@property NSString </em>lastName;
@property NSNumber *age;
@end</p>

<p>@implementation Person</p>

<ul>
<li>(NSString *)description {
  return [NSString stringWithFormat:@&ldquo;%@ %@&rdquo;, self.firstName, self.lastName];
}</li>
</ul>


<p>@end</p>

<h1>pragma mark &ndash;</h1>

<p>NSArray <em>firstNames = @[ @&ldquo;Alice&rdquo;, @&ldquo;Bob&rdquo;, @&ldquo;Charlie&rdquo;, @&ldquo;Quentin&rdquo; ];
NSArray </em>lastNames = @[ @&ldquo;Smith&rdquo;, @&ldquo;Jones&rdquo;, @&ldquo;Smith&rdquo;, @&ldquo;Alberts&rdquo; ];
NSArray *ages = @[ @24, @27, @33, @31 ];</p>

<p>NSMutableArray <em>people = [NSMutableArray array];
[firstNames enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL </em>stop) {</p>

<pre><code>Person *person = [[Person alloc] init];
person.firstName = firstNames[idx];
person.lastName = lastNames[idx];
person.age = ages[idx];
[people addObject:person];
</code></pre>

<p>}];</p>

<p>NSPredicate <em>bobPredicate = [NSPredicate predicateWithFormat:@&ldquo;firstName = &lsquo;Bob&rsquo;&rdquo;];
NSPredicate </em>smithPredicate = [NSPredicate predicateWithFormat:@&ldquo;lastName = %@&rdquo;, @&ldquo;Smith&rdquo;];
NSPredicate *thirtiesPredicate = [NSPredicate predicateWithFormat:@&ldquo;age >= 30&rdquo;];</p>

<p>// [&ldquo;Bob Jones&rdquo;]
NSLog(@&ldquo;Bobs: %@&rdquo;, [people filteredArrayUsingPredicate:bobPredicate]);</p>

<p>// [&ldquo;Alice Smith&rdquo;, &ldquo;Charlie Smith&rdquo;]
NSLog(@&ldquo;Smiths: %@&rdquo;, [people filteredArrayUsingPredicate:smithPredicate]);</p>

<p>// [&ldquo;Charlie Smith&rdquo;, &ldquo;Quentin Alberts&rdquo;]
NSLog(@&ldquo;30&rsquo;s: %@&rdquo;, [people filteredArrayUsingPredicate:thirtiesPredicate]);
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">集合中使用</span><span class="bp">NSPredicate</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Foundation</span><span class="err">提供使用谓词（</span><span class="n">predicate</span><span class="err">）来过滤</span><span class="bp">NSArray</span><span class="err">／</span><span class="bp">NSMutableArray</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="bp">NSSet</span><span class="err">／</span><span class="bp">NSMutableSet</span><span class="err">的方法。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">不可变的集合，</span><span class="bp">NSArray</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="bp">NSSet</span><span class="err">，有可以通过评估接收到的</span><span class="n">predicate</span><span class="err">来返回一个不可变集合的方法</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">filteredArrayUsingPredicate</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">filteredSetUsingPredicate</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">可变集合，</span><span class="bp">NSMutableArray</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="bp">NSMutableSet</span><span class="err">，可以使用方法</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">filterUsingPredicate</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，它可以通过运行接收到的谓词来移除评估结果为</span><span class="nb">FALSE</span><span class="err">的对象。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">NSDictionary</span><span class="err">可以用谓词来过滤它的键和值（两者都为</span><span class="bp">NSArray</span><span class="err">对象）。</span><span class="bp">NSOrderedSet</span><span class="err">可以由过滤的</span><span class="bp">NSArray</span><span class="err">或</span><span class="bp">NSSet</span><span class="err">生成一个新的有序的集，或者</span><span class="bp">NSMutableSet</span><span class="err">可以简单的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">removeObjectsInArray</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，来传递通过</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="err">否定</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">predicate</span><span class="err">过滤的对象。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">Core</span> <span class="n">Data</span><span class="err">中使用</span><span class="bp">NSPredicate</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">NSFetchRequest</span><span class="err">有一个</span><span class="n">predicate</span><span class="err">属性，它可以指定管理对象应该被获取的逻辑条件。谓词的使用规则在这里同样适用，唯一的区别在于，在管理对象环境中，谓词由持久化存储助理（</span><span class="n">persistent</span> <span class="n">store</span> <span class="n">coordinator</span><span class="err">）评估，而不像集合那样在内存中被过滤。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">谓词语法</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="err">替换</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;%</span><span class="p">@</span><span class="err">是对值为字符串，数字或者日期的对象的替换值。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;%</span><span class="n">K</span><span class="err">是</span><span class="n">key</span> <span class="n">path</span><span class="err">的替换值。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="bp">NSPredicate</span> <span class="o">*</span><span class="n">ageIs33Predicate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">K</span> <span class="o">=</span> <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">age</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">@33</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [&amp;ldquo;Charlie Smith&amp;rdquo;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Age</span> <span class="mi">33</span><span class="o">:</span> <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate</span><span class="p">:</span><span class="n">ageIs33Predicate</span><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="o">-</span> <span class="err">$</span><span class="n">VARIABLE_NAME</span><span class="err">是可以被</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSPredicate</span> <span class="o">-</span><span class="nl">predicateWithSubstitutionVariables</span><span class="p">:</span><span class="err">`替换的值。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="bp">NSPredicate</span> <span class="o">*</span><span class="n">namesBeginningWithLetterPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;(</span><span class="n">firstName</span> <span class="n">BEGINSWITH</span><span class="p">[</span><span class="n">cd</span><span class="p">]</span> <span class="err">$</span><span class="n">letter</span><span class="p">)</span> <span class="n">OR</span> <span class="p">(</span><span class="n">lastName</span> <span class="n">BEGINSWITH</span><span class="p">[</span><span class="n">cd</span><span class="p">]</span> <span class="err">$</span><span class="n">letter</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [&amp;ldquo;Alice Smith&amp;rdquo;, &amp;ldquo;Quentin Alberts&amp;rdquo;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="nl">Names</span><span class="p">:</span> <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate</span><span class="p">:[</span><span class="n">namesBeginningWithLetterPredicate</span> <span class="nl">predicateWithSubstitutionVariables</span><span class="p">:</span><span class="l">@{</span><span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">letter</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">A</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}]]);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>基本比较</h3>

<ul>
<li>=, ==：左边的表达式和右边的表达式相等。</li>
<li>>=, =>：左边的表达式大于或者等于右边的表达式。</li>
<li>&lt;=, =&lt;：左边的表达式小于等于右边的表达式。</li>
<li>>：左边的表达式大于右边的表达式。</li>
<li>&lt;：左边的表达式小于右边的表达式。</li>
<li>!=, &lt;>：左边的表达式不等于右边的表达式。</li>
<li>BETWEEN：左边的表达式等于右边的表达式的值或者介于它们之间。右边是一个有两个指定上限和下限的数值的数列（指定顺序的数列）。比如，1 BETWEEN { 0 , 33 }，或者$INPUT BETWEEN { $LOWER, $UPPER }。</li>
</ul>


<h3>基本复合谓词</h3>

<ul>
<li>AND, &amp;&amp;：逻辑与.</li>
<li>OR, ||：逻辑或.</li>
<li>NOT, !：逻辑非.</li>
</ul>


<h3>字符串比较</h3>

<p><em>字符串比较在默认的情况下是区分大小写和音调的。你可以在方括号中用关键字符c和d来修改操作符以相应的指定不区分大小写和变音符号，比如firstname BEGINSWITH[cd] $FIRST_NAME。</em></p>

<ul>
<li>BEGINSWITH：左边的表达式以右边的表达式作为开始。</li>
<li>CONTAINS：左边的表达式包含右边的表达式。</li>
<li>ENDSWITH：左边的表达式以右边的表达式作为结束。</li>
<li>LIKE：左边的表达式等于右边的表达式：?和<em>可作为通配符，其中?匹配1个字符，</em>匹配0个或者多个字符。</li>
<li>MATCHES：左边的表达式根据ICU v3（更多内容请查看<a href="http://userguide.icu-project.org/strings/regexp">ICU User Guide for Regular Expressions</a>）的regex风格比较，等于右边的表达式。</li>
</ul>


<h3>合计操作</h3>

<h4>关系操作</h4>

<ul>
<li>ANY，SOME：指定下列表达式中的任意元素。比如，ANY children.age &lt; 18。</li>
<li>ALL：指定下列表达式中的所有元素。比如，ALL children.age &lt; 18。</li>
<li>NONE：指定下列表达式中没有的元素。比如，NONE children.age &lt; 18。它在逻辑上等于NOT (ANY &hellip;)。</li>
<li>IN：等于SQL的IN操作，左边的表达必须出现在右边指定的集合中。比如，name IN { &lsquo;Ben&rsquo;, &lsquo;Melissa&rsquo;, &lsquo;Nick&rsquo; }。</li>
</ul>


<h4>数组操作</h4>

<ul>
<li>array[index]：指定数组中特定索引处的元素。</li>
<li>array[FIRST]：指定数组中的第一个元素。</li>
<li>array[LAST]：指定数组中的最后一个元素。</li>
<li>array[SIZE]：指定数组的大小。</li>
</ul>


<h3>布尔值谓词</h3>

<ul>
<li>TRUEPREDICATE：结果始终为真的谓词。</li>
<li>FALSEPREDICATE：结果始终为假的谓词。</li>
</ul>


<h2>NSCompoundPredicate</h2>

<p>我们见过与&amp;或被用在谓词格式字符串中以创建复合谓词。然而，我们也可以用NSCompoundPredicate来完成同样的工作。</p>

<p>例如，下列谓词是相等的：</p>

<p>&#8220;`
[NSCompoundPredicate andPredicateWithSubpredicates:@[[NSPredicate predicateWithFormat:@&ldquo;age > 25&rdquo;], [NSPredicate predicateWithFormat:@&ldquo;firstName = %@&rdquo;, @&ldquo;Quentin&rdquo;]]];</p>

<p>[NSPredicate predicateWithFormat:@&ldquo;(age > 25) AND (firstName = %@)&rdquo;, @&ldquo;Quentin&rdquo;];
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">虽然语法字符串文字更加容易输入，但是在有的时候，你需要结合现有的谓词。在那些情况下，你可以使用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSCompoundPredicate</span> <span class="o">-</span><span class="nl">andPredicateWithSubpredicates</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="nl">orPredicateWithSubpredicates</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="bp">NSComparisonPredicate</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">同样的，如果你在读过</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://nshipster.com/nsexpression/&quot;</span><span class="o">&gt;</span><span class="err">上周的文章</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">之后发现你使用了太多的</span><span class="bp">NSExpression</span><span class="err">的话，</span><span class="bp">NSComparisonPredicate</span><span class="err">可以帮助你解决这个问题。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">就像</span><span class="bp">NSCompoundPredicate</span><span class="err">一样，</span><span class="bp">NSComparisonPredicate</span><span class="err">从子部件构建了一个</span><span class="bp">NSPredicate</span><span class="err">－－在这种情况下，左侧和右侧都是</span><span class="bp">NSExpression</span><span class="err">。</span> <span class="err">分析它的类的构造函数可以让我们一窥</span><span class="bp">NSPredicate</span><span class="err">的格式字符串是如何解析的：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="bp">NSPredicate</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">predicateWithLeftExpression</span><span class="p">:(</span><span class="bp">NSExpression</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">lhs</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                         <span class="nl">rightExpression</span><span class="p">:(</span><span class="bp">NSExpression</span> <span class="o">*</span><span class="p">)</span><span class="n">rhs</span>
</span><span class='line'>                                <span class="nl">modifier</span><span class="p">:(</span><span class="n">NSComparisonPredicateModifier</span><span class="p">)</span><span class="n">modifier</span>
</span><span class='line'>                                    <span class="nl">type</span><span class="p">:(</span><span class="n">NSPredicateOperatorType</span><span class="p">)</span><span class="n">type</span>
</span><span class='line'>                                 <span class="nl">options</span><span class="p">:(</span><span class="bp">NSUInteger</span><span class="p">)</span><span class="n">options</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="err">参数</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">lhs</span><span class="err">：左边的表达式。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">rhs</span><span class="err">：右边的表达式。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">modifier</span><span class="err">：应用的修改符。（</span><span class="n">ANY</span><span class="err">或者</span><span class="n">ALL</span><span class="err">）</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">type</span><span class="err">：谓词运算符类型。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">options</span><span class="err">：要应用的选项。没有选项的话则为</span><span class="mi">0</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="bp">NSComparisonPredicate</span><span class="err">类型</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">NSLessThanPredicateOperatorType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSLessThanOrEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSGreaterThanPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSGreaterThanOrEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSNotEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSMatchesPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSLikePredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSBeginsWithPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSEndsWithPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSInPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSCustomSelectorPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSContainsPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSBetweenPredicateOperatorType</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="bp">NSUInteger</span> <span class="n">NSPredicateOperatorType</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="bp">NSComparisonPredicate</span><span class="err">选项</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">NSCaseInsensitivePredicateOption</span><span class="err">：不区分大小写的谓词。你通过在谓词格式字符串中加入后面带有</span><span class="p">[</span><span class="n">c</span><span class="p">]</span><span class="err">的字符串操作（比如，</span><span class="s">&quot;NeXT&quot;</span> <span class="n">like</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">next</span><span class="s">&quot;）来表达这一选项。&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">NSDiacriticInsensitivePredicateOption</span><span class="err">：忽视发音符号的谓词。你通过在谓词格式字符串中加入后面带有</span><span class="p">[</span><span class="n">d</span><span class="p">]</span><span class="err">的字符串操作（比如，</span><span class="s">&quot;naïve&quot;</span> <span class="n">like</span><span class="p">[</span><span class="n">d</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">naive</span><span class="s">&quot;）来表达这一选项。&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">NSNormalizedPredicateOption</span><span class="err">：表示待比较的字符串已经被预处理了。这一选项取代了</span><span class="n">NSCaseInsensitivePredicateOption</span><span class="err">和</span><span class="n">NSDiacriticInsensitivePredicateOption</span><span class="err">，旨在用作性能优化的选项。你可以通过在谓词格式字符串中加入后面带有</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="err">的字符串（比如，</span><span class="s">&quot;WXYZlan&quot;</span> <span class="n">matches</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;.</span><span class="n">lan</span><span class="s">&quot;）来表达这一选项。&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">NSLocaleSensitivePredicateOption</span><span class="err">：表明要使用</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">，</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="err">，</span><span class="o">=</span><span class="err">，</span><span class="o">=&gt;</span><span class="err">，</span><span class="o">&gt;</span> <span class="err">作为比较的字符串应该使用区域识别的方式处理。你可以通过在</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">，</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="err">，</span><span class="o">=</span><span class="err">，</span><span class="o">=&gt;</span><span class="err">，</span><span class="o">&gt;</span><span class="err">其中之一的操作符后加入</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="err">（比如，</span><span class="s">&quot;straße&quot;</span> <span class="o">&gt;</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">strasse</span><span class="s">&quot;）以便在谓词格式字符串表达这一选项。&lt;/li&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">Block</span><span class="err">谓词</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">最后，如果你实在不愿意学习</span><span class="bp">NSPredicate</span><span class="err">的格式语法，你也可以学学</span><span class="bp">NSPredicate</span> <span class="o">+</span><span class="nl">predicateWithBlock</span><span class="p">:</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="bp">NSPredicate</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">shortNamePredicate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithBlock</span><span class="p">:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">evaluatedObject</span><span class="p">,</span> <span class="bp">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bindings</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">return</span> <span class="p">[[</span><span class="n">evaluatedObject</span> <span class="n">firstName</span><span class="p">]</span> <span class="n">length</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [&amp;ldquo;Alice Smith&amp;rdquo;, &amp;ldquo;Bob Jones&amp;rdquo;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Short</span> <span class="nl">Names</span><span class="p">:</span> <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate</span><span class="p">:</span><span class="n">shortNamePredicate</span><span class="p">]);</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="p">...</span><span class="err">好吧，虽然使用</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">predicateWithBlock</span><span class="p">:</span><span class="err">`是懒人的做法，但它也并不是一无是处。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">事实上，因为</span><span class="n">block</span><span class="err">可以封装任意的计算，所以有一个查询类是无法以</span><span class="bp">NSPredicate</span><span class="err">格式字符串形式来表达的（比如对运行时被动态计算的值的评估）。而且当同一件事情可以用</span><span class="bp">NSExpression</span><span class="err">结合自定义选择器来完成时，</span><span class="n">block</span><span class="err">为完成工作提供了一个方便的接口。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">重要提示：</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">由</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">predicateWithBlock</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">生成的</span><span class="bp">NSPredicate</span><span class="err">不能用于由</span><span class="n">SQLite</span><span class="err">存储库支持的</span><span class="n">Core</span> <span class="n">Data</span><span class="err">数据的提取要求。</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">我知道我已经说过很多次了，可是</span><span class="bp">NSPredicate</span><span class="err">真的是</span><span class="n">Cocoa</span><span class="err">的优势之一。其他语言的第三方库如果能有它一半的能力就已经很幸运了－－更别提标准库了。对于我们这些应用和框架开发者来说，有它作为标准组件使得我们在处理数据时有了很大的优势。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">和</span><span class="bp">NSExpression</span><span class="err">一样，</span><span class="bp">NSPredicate</span><span class="err">一直在提醒我们</span><span class="n">Foundation</span><span class="err">有多么好：它不仅仅十分有用，它精致的构架和设计也是我们写代码时灵感的来源。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">中的</span><span class="n">KVC</span><span class="err">和</span><span class="n">KVO</span><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/12/objective-czhong-de-kvche-kvo/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mo">05</span><span class="o">-</span><span class="mi">12</span><span class="nl">T12</span><span class="p">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">32</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="kt">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.com/blog/2014/05/12/objective-czhong-de-kvche-kvo&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">本文讲述了使用</span><span class="n">Cocoa</span><span class="err">框架中的</span><span class="n">KVC</span><span class="err">和</span><span class="n">KVO</span><span class="err">，实现观察者模式</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">KVC</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">键</span><span class="o">/</span><span class="err">值编码中的基本调用包括</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="nl">valueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">forKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。以字符串的形式向对象发送消息，这个字符串是我们关注的属性的关键。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">valueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">首先查找以键</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">key</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">或</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="n">isKey</span>   <span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">命名的</span><span class="k">getter</span><span class="err">方法。如果不存在</span><span class="k">getter</span><span class="err">方法（假如我们没有通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">@synthesize</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">提供存取方法），它将在对象内部查找名为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_key</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">或</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">key</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的实例变量。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">对于</span><span class="n">KVC</span><span class="err">，</span><span class="n">Cocoa</span><span class="err">自动放入和取出标量值（</span><span class="kt">int</span><span class="err">，</span><span class="kt">float</span><span class="err">和</span><span class="k">struct</span><span class="err">）放入</span><span class="bp">NSNumber</span><span class="err">或</span><span class="bp">NSValue</span><span class="err">中；当使用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">ForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">时，它自动将标量值从这些对象中取出。仅</span><span class="n">KVC</span><span class="err">具有这种自动包装功能，常规方法调用和属性语法不具备该功能。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">ForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的工作方式和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;-</span><span class="nl">valueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">相同。它首先查找名称的</span><span class="k">setter</span><span class="err">方法，如果不存在</span><span class="k">setter</span><span class="err">方法，它将在类中查找名为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_key</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">或</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">key</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的实例变量。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">使用</span><span class="n">KVC</span><span class="err">访问属性的代价比直接使用存取方法要大，所以只在需要的时候才用。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">最简单的</span> <span class="n">KVC</span> <span class="err">能让我们通过以下的形式访问属性：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">objc</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">取值：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">n</span> <span class="o">=</span> <span class="p">[</span><span class="n">object</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">设定：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">[</span><span class="n">object</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;Daniel&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">值得注意的是这个不仅可以访问作为对象属性，而且也能访问一些标量（例如</span> <span class="kt">int</span> <span class="err">和</span> <span class="n">CGFloat</span><span class="err">）和</span> <span class="k">struct</span><span class="err">（例如</span> <span class="bp">CGRect</span><span class="err">）。</span><span class="n">Foundation</span> <span class="err">框架会为我们自动封装它们。举例来说，如果有以下属性：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">height</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">我们可以这样设置它：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">[</span><span class="n">object</span> <span class="nl">setValue</span><span class="p">:</span><span class="l">@(</span><span class="mi">20</span><span class="l">)</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;height&quot;</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有关</span><span class="n">KVC</span><span class="err">的更多用法，参看下面的文章：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://blog.csdn.net/omegayy/article/details/7381301  &quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//blog.csdn.net/omegayy/article/details/7381301  &lt;/a&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://blog.csdn.net/wzzvictory/article/details/9674431  &quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//blog.csdn.net/wzzvictory/article/details/9674431  &lt;/a&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://objccn.io/issue-7-3/&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//objccn.io/issue-7-3/&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="n">KVO</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">KVO</span><span class="err">是</span><span class="n">Cocoa</span><span class="err">提供的一种称为键－值观察的机制，对象可以通过它得到其他对象特性属性的变更通知。这种机制在</span><span class="n">MVC</span><span class="err">模式的场景中很重要，因为它让视图对象可以经由控制器层观察模型对象的变更。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">这一机制基于</span><span class="n">NSKeyValueObserving</span><span class="err">非正式协议，</span><span class="n">Cocoa</span><span class="err">通过这个协议为所有遵守协议的对象提供了一种自动化的属性观察能力。要实现自动观察，参与</span><span class="n">KVO</span><span class="err">的对象需要符合</span><span class="n">KVC</span><span class="err">的要求和存取方法，也可以手动实现观察者通知，也可以两者都保留。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">KVO</span><span class="err">是</span><span class="n">Cocoa</span><span class="err">框架使用</span><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">观察者模式</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">的一种途径。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">设置一个属性的观察者需要三步，理解这些步骤可以更清楚的知道</span><span class="n">KVO</span><span class="err">的工作框图</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">1.</span> <span class="err">首先看看你当前的场景如果使用</span><span class="n">KVO</span><span class="err">是否更妥当，比如，当一个实例的某个具体属性有任何变更的时候，另一个实例需要被通知。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353389577.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">比如，</span><span class="n">BankObject</span><span class="err">中的</span><span class="n">accountBalance</span><span class="err">属性有任何变更时，某个</span><span class="n">PersonObject</span><span class="err">对象都要觉察到。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">这个</span><span class="n">PersonObject</span><span class="err">对象必须注册成为</span><span class="n">BankObject</span><span class="err">的</span><span class="n">accountBalance</span><span class="err">属性的观察者，可以通过发送</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">addObserver</span><span class="p">:</span><span class="nl">forKeyPath</span><span class="p">:</span><span class="nl">options</span><span class="p">:</span><span class="nl">context</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">消息来实现。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353389319.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">注意：</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">addObserver</span><span class="p">:</span><span class="nl">forKeyPath</span><span class="p">:</span><span class="nl">options</span><span class="p">:</span><span class="nl">context</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法在你指定的两个实例间建立联系，而不是在两个类之间。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">3.</span> <span class="err">为了回应变更通知，观察者必须实现</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">observeValueForKeyPath</span><span class="p">:</span><span class="nl">ofObject</span><span class="p">:</span><span class="nl">change</span><span class="p">:</span><span class="nl">context</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法。这个方法的实现决定了观察者如何回应变更通知。你可以在这个方法里自定义如何回应被观察属性的变更。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353388989.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;</span>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">4.</span> <span class="err">当一个被观察属性的值以符合</span><span class="n">KVO</span><span class="err">方式变更或者当它依赖的键变更时，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">observeValueForKeyPath</span><span class="p">:</span><span class="nl">ofObject</span><span class="p">:</span><span class="nl">change</span><span class="p">:</span><span class="nl">context</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法会被自动执行。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353389524.jpg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="n">Registering</span> <span class="k">for</span> <span class="n">Key</span><span class="o">-</span><span class="n">Value</span> <span class="n">Observing</span><span class="o">&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="err">注册成为观察者</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">你可以通过发送</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">addObserver</span><span class="p">:</span><span class="nl">forKeyPath</span><span class="p">:</span><span class="nl">options</span><span class="p">:</span><span class="nl">context</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">消息来注册观察者</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span> <span class="n">objc</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">registerAsObserver</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> Register &#39;inspector&#39; to receive change notifications for the &quot;openingBalance&quot; property of</span>
</span><span class='line'><span class="cm"> the &#39;account&#39; object and specify that both the old and new values of &quot;openingBalance&quot;</span>
</span><span class='line'><span class="cm"> should be provided in the observe… method.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">[</span><span class="n">account</span> <span class="nl">addObserver</span><span class="p">:</span><span class="n">inspector</span>
</span><span class='line'>         <span class="nl">forKeyPath</span><span class="p">:</span><span class="s">@&quot;openingBalance&quot;</span>
</span><span class='line'>             <span class="nl">options</span><span class="p">:(</span><span class="n">NSKeyValueObservingOptionNew</span> <span class="o">|</span>
</span><span class='line'>                        <span class="n">NSKeyValueObservingOptionOld</span><span class="p">)</span>
</span><span class='line'>                <span class="nl">context</span><span class="p">:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>inspector注册成为了account的观察者，被观察属性的KeyPath是@&ldquo;openingBalance&#8221;，也就是account的openingBalance属性，NSKeyValueObservingOptionNew和NSKeyValueObservingOptionOld选项分别标识在观察者接收通知时change字典对应入口提供更改后的值和更改前的值。更简单的办法是用 NSKeyValueObservingOptionPrior 选项，随后我们就可以用以下方式提取出改变前后的值：(change是个字典，详细介绍请看下节)</p>

<p><code>
id oldValue = change[NSKeyValueChangeOldKey];
id newValue = change[NSKeyValueChangeNewKey];
</code></p>

<p>我们常常需要当一个值改变的时候更新 UI，但是我们也要在第一次运行代码的时候更新一次 UI。我们可以用 KVO 并添加 NSKeyValueObservingOptionInitial 的选项 来一箭双雕地做好这样的事情。这将会让 KVO 通知在调用 -addObserver:forKeyPath:&hellip; 到时候也被触发。<br/>
当我们注册 KVO 通知的时候，我们可以添加 NSKeyValueObservingOptionPrior 选项，这能使我们在键值改变之前被通知。这和-willChangeValueForKey:被触发的时间相对应。<br/>
如果我们注册通知的时候附加了 NSKeyValueObservingOptionPrior 选项，我们将会收到两个通知：一个在值变更前，另一个在变更之后。变更前的通知将会在 change 字典中有不同的键。</p>

<p>context是一个指针，当<code>observeValueForKeyPath:ofObject:change:context:</code>方法执行时context会提供给观察者。context可以使C指针或者一个对象引用，既可以当作一个唯一的标识来分辨被观察的变更，也可以向观察者提供数据。</p>

<h4>接收变更通知</h4>

<p>当被观察的属性变更时，观察者会接到<code>observeValueForKeyPath:ofObject:change:context:</code>消息，所有的观察者都必须实现这个方法。<br/>
观察者会被提供触发通知的对象和key path，一个包含变更详细信息的字典，还有一个注册观察者时提供的context指针。</p>

<p>&#8220;`
&ndash; (void)observeValueForKeyPath:(NSString *)keyPath</p>

<pre><code>                  ofObject:(id)object
                    change:(NSDictionary *)change
                   context:(void *)context {

if ([keyPath isEqual:@"openingBalance"]) {
    [openingBalanceInspectorField setObjectValue:
        [change objectForKey:NSKeyValueChangeNewKey]];
}
/*
 Be sure to call the superclass's implementation *if it implements it*.
 NSObject does not implement the method.
 */
[super observeValueForKeyPath:keyPath
                     ofObject:object
                       change:change
                       context:context];
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">关于</span><span class="n">change</span><span class="err">参数，它是一个字典，有五个常量作为它的键：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">const</span> <span class="n">NSKeyValueChangeKindKey</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="k">const</span> <span class="n">NSKeyValueChangeNewKey</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">const</span> <span class="n">NSKeyValueChangeOldKey</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="k">const</span> <span class="n">NSKeyValueChangeIndexesKey</span><span class="p">;</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">NSKeyValueChangeNotificationIsPriorKey</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">NSKeyValueChangeKindKey</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">指明了变更的类型，值为“</span><span class="n">NSKeyValueChange</span><span class="err">”枚举中的某一个，类型为</span><span class="bp">NSNumber</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeSetting</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeInsertion</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeRemoval</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeReplacement</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="bp">NSUInteger</span> <span class="n">NSKeyValueChange</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">NSKeyValueChangeNewKey</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">如果</span> <span class="n">NSKeyValueChangeKindKey</span><span class="err">的值为</span> <span class="n">NSKeyValueChangeSetting</span><span class="err">，并且</span> <span class="n">NSKeyValueObservingOptionNew</span><span class="err">选项在注册观察者时也指定了，那么这个键的值就是属性变更后的新值。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">对于</span> <span class="n">NSKeyValueChangeInsertion</span><span class="err">或者</span><span class="n">NSKeyValueChangeReplacement</span><span class="err">，如果</span> <span class="n">NSKeyValueObservingOptionNew</span><span class="err">选项在注册观察者时也指定了，这个键的值是一个数组，其包含了插入或替换的对象。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">NSKeyValueChangeOldKey</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">如果</span> <span class="n">NSKeyValueChangeKindKey</span><span class="err">的值为</span> <span class="n">NSKeyValueChangeSetting</span><span class="err">，并且</span> <span class="n">NSKeyValueObservingOptionOld</span><span class="err">选项在注册观察者时也指定了，那么这个键的值就是属性变更前的旧值。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">对于</span>  <span class="n">NSKeyValueChangeRemoval</span> <span class="err">或者</span><span class="n">NSKeyValueChangeReplacement</span><span class="err">，如果</span> <span class="n">NSKeyValueObservingOptionOld</span><span class="err">选项在注册观察者时也指定了，这个键的值是一个数组，其包含了被移除或替换的对象。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">NSKeyValueChangeIndexesKey</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">如果</span> <span class="n">NSKeyValueChangeKindKey</span><span class="err">的值为</span><span class="n">NSKeyValueChangeInsertion</span><span class="p">,</span> <span class="n">NSKeyValueChangeRemoval</span><span class="p">,</span> <span class="err">或者</span> <span class="n">NSKeyValueChangeReplacement</span><span class="err">，这个键的值是一个</span><span class="bp">NSIndexSet</span><span class="err">对象，包含了增加，移除或者替换对象的</span><span class="n">index</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="n">NSKeyValueChangeNotificationIsPriorKey</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">如果注册观察者时</span><span class="n">NSKeyValueObservingOptionPrior</span><span class="err">选项被指明了，此通知会在变更发生前被发出。其类型为</span><span class="bp">NSNumber</span><span class="err">，包含的值为</span><span class="nb">YES</span><span class="err">。我们可以像以下这样区分通知是在改变之前还是之后被触发的：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNotificationIsPriorKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 改变之前</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// 改变之后</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>移除观察者</h4>

<p>你可以通过发送<code>removeObserver:forKeyPath:</code>消息来移除观察者，你需要指明观察对象和路径。</p>

<p>&#8220;`
&ndash; (void)unregisterForChangeNotification {</p>

<pre><code>[observedObject removeObserver:inspector forKeyPath:@"openingBalance"];
</code></pre>

<p>}
<code>``
上面的代码将openingBalance属性的观察者inspector移除，移除后观察者再也不会收到</code>observeValueForKeyPath:ofObject:change:context:`消息。<br/>
在移除观察者之前，如果context是一个对象的引用，那么必须保持对它的强引用直到观察者被移除。</p>

<h3>KVO Compliance（KVO兼容）</h3>

<p>有两种方法可以保证变更通知被发出。自动发送通知是NSObject提供的，并且一个类中的所有属性都默认支持，只要是符合KVO的。一般情况你使用自动变更通知，你不需要写任何代码。<br/>
人工变更通知需要些额外的代码，但也对通知发送提供了额外的控制。你可以通过重写子类<code>automaticallyNotifiesObserversForKey:</code>方法的方式控制子类一些属性的自动通知。</p>

<h4>Automatic Change Notification（自动通知）</h4>

<p>下面代码中的方法都能导致KVO变更消息发出</p>

<p>&#8220;`
// Call the accessor method.
[account setName:@&ldquo;Savings&rdquo;];</p>

<p>// Use setValue:forKey:.
[account setValue:@&ldquo;Savings&rdquo; forKey:@&ldquo;name&rdquo;];</p>

<p>// Use a key path, where &lsquo;account&rsquo; is a kvc-compliant property of &lsquo;document&rsquo;.
[document setValue:@&ldquo;Savings&rdquo; forKeyPath:@&ldquo;account.name&rdquo;];</p>

<p>// Use mutableArrayValueForKey: to retrieve a relationship proxy object.
Transaction <em>newTransaction = &lt;#Create a new transaction for the account#>;
NSMutableArray </em>transactions = [account mutableArrayValueForKey:@&ldquo;transactions&rdquo;];
[transactions addObject:newTransaction];
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">Manual</span> <span class="n">Change</span> <span class="n">Notification</span><span class="err">（手动通知）</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面的代码为</span><span class="n">openingBalance</span><span class="err">属性开启了人工通知，并让父类决定其他属性的通知方式。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">automaticallyNotifiesObserversForKey</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">theKey</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">BOOL</span> <span class="n">automatic</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">theKey</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">automatic</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">automatic</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">automaticallyNotifiesObserversForKey</span><span class="p">:</span><span class="n">theKey</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">automatic</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>要实现人工观察者通知，你要执行在变更前执行<code>willChangeValueForKey:</code>方法，在变更后执行<code>didChangeValueForKey:</code>方法：</p>

<p>&#8220;`
&ndash; (void)setOpeningBalance:(double)theBalance {</p>

<pre><code>[self willChangeValueForKey:@"openingBalance"];
_openingBalance = theBalance;
[self didChangeValueForKey:@"openingBalance"];
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">为了使不必要的通知最小化我们应该在变更前先检查一下值是否变了：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setOpeningBalance</span><span class="p">:(</span><span class="kt">double</span><span class="p">)</span><span class="n">theBalance</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">theBalance</span> <span class="o">!=</span> <span class="n">_openingBalance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">willChangeValueForKey</span><span class="p">:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_openingBalance</span> <span class="o">=</span> <span class="n">theBalance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">didChangeValueForKey</span><span class="p">:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
如果一个操作导致了多个键的变化，你必须嵌套变更通知：</p>

<p>&#8220;`
&ndash; (void)setOpeningBalance:(double)theBalance {</p>

<pre><code>[self willChangeValueForKey:@"openingBalance"];
[self willChangeValueForKey:@"itemChanged"];
_openingBalance = theBalance;
_itemChanged = _itemChanged+1;
[self didChangeValueForKey:@"itemChanged"];
[self didChangeValueForKey:@"openingBalance"];
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">在</span><span class="n">to</span><span class="o">-</span><span class="n">many</span><span class="err">关系操作的情形中，你不仅必须表明</span><span class="n">key</span><span class="err">是什么，还要表明变更类型和影响到的索引。变更类型是一个</span> <span class="n">NSKeyValueChange</span><span class="err">值，被影响对象的索引是一个</span> <span class="bp">NSIndexSet</span><span class="err">对象。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">下面的代码示范了在</span><span class="n">to</span><span class="o">-</span><span class="n">many</span><span class="err">关系</span><span class="n">transactions</span><span class="err">对象中的删除操作：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">removeTransactionsAtIndexes</span><span class="p">:(</span><span class="bp">NSIndexSet</span> <span class="o">*</span><span class="p">)</span><span class="n">indexes</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="nb">self</span> <span class="nl">willChange</span><span class="p">:</span><span class="n">NSKeyValueChangeRemoval</span>
</span><span class='line'>    <span class="nl">valuesAtIndexes</span><span class="p">:</span><span class="n">indexes</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;transactions&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove the transaction objects at the specified indexes.</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">didChange</span><span class="p">:</span><span class="n">NSKeyValueChangeRemoval</span>
</span><span class='line'>    <span class="nl">valuesAtIndexes</span><span class="p">:</span><span class="n">indexes</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;transactions&quot;</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Registering Dependent Keys（注册依赖的属性）</h3>

<p>有一些属性的值取决于一个或者多个其他对象的属性值，一旦某个被依赖的属性值变了，依赖它的属性的变化也需要被通知。</p>

<h4>To-one Relationships</h4>

<p>要自动触发 to-one关系，有两种方法：重写<code>keyPathsForValuesAffectingValueForKey:</code>方法或者定义名称为<code>keyPathsForValuesAffecting&lt;Key&gt;</code>的方法。</p>

<p>例如一个人的全名是由姓氏和名子组成的：</p>

<p>&#8220;`
&ndash; (NSString *)fullName {</p>

<pre><code>return [NSString stringWithFormat:@"%@ %@",firstName, lastName];
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">一个观察</span><span class="n">fullName</span><span class="err">的程序在</span><span class="n">firstName</span><span class="err">或者</span><span class="n">lastName</span><span class="err">变化时也应该接收到通知。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">一种解决方法是重写</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">keyPathsForValuesAffectingValueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法来表明</span><span class="n">fullname</span><span class="err">属性是依赖于</span><span class="n">firstname</span><span class="err">和</span><span class="n">lastname</span><span class="err">的：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="bp">NSSet</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">keyPathsForValuesAffectingValueForKey</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">key</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSSet</span> <span class="o">*</span><span class="n">keyPaths</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="nl">keyPathsForValuesAffectingValueForKey</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">key</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;fullName&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">affectingKeys</span> <span class="o">=</span> <span class="l">@[</span><span class="s">@&quot;lastName&quot;</span><span class="p">,</span> <span class="s">@&quot;firstName&quot;</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="n">keyPaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">keyPaths</span> <span class="nl">setByAddingObjectsFromArray</span><span class="p">:</span><span class="n">affectingKeys</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">keyPaths</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
相当于在影响fullName值的keypath中新加了两个key：lastName和firstName，很容易理解。</p>

<p>另一种实现同样结果的方法是实现一个遵循命名方式为<code>keyPathsForValuesAffecting&lt;Key&gt;</code>的类方法，<Key>是依赖于其他值的属性名（首字母大写），用上面代码的例子来重新实现一下：</p>

<p>&#8220;`
+ (NSSet *)keyPathsForValuesAffectingFullName {</p>

<pre><code>return [NSSet setWithObjects:@"lastName", @"firstName", nil];
</code></pre>

<p>}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有时在类别中我们不能添加</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">keyPathsForValuesAffectingValueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法，因为不能再类别中重写方法，所以这时可以实现</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">keyPathsForValuesAffecting</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Key</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法来代替。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">注意：你不能在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">keyPathsForValuesAffectingValueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中设立</span><span class="n">to</span><span class="o">-</span><span class="n">many</span><span class="err">关系的依赖，相反，你必须观察在</span><span class="n">to</span><span class="o">-</span><span class="n">many</span><span class="err">集合中的每一个对象中相关的属性并通过亲自更新他们的依赖来回应变更。下一节将会讲述对付此情形的策略。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="n">To</span><span class="o">-</span><span class="n">many</span> <span class="n">Relationships</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">keyPathsForValuesAffectingValueForKey</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法不支持包含</span><span class="n">to</span><span class="o">-</span><span class="n">many</span><span class="err">关系的</span><span class="n">keypath</span><span class="err">。比如，假如你有一个</span><span class="n">Department</span><span class="err">类，它有一个针对</span><span class="n">Employee</span><span class="err">类的</span><span class="n">to</span><span class="o">-</span><span class="n">many</span><span class="err">关系（雇员），</span><span class="n">Employee</span><span class="err">类有</span><span class="n">salary</span><span class="err">属性。你希望</span><span class="n">Department</span><span class="err">类有一个</span><span class="n">totalSalary</span><span class="err">属性来计算所有员工的薪水，也就是在这个关系中</span><span class="n">Department</span><span class="err">的</span><span class="n">totalSalary</span><span class="err">依赖于所有</span><span class="n">Employee</span><span class="err">的</span><span class="n">salary</span><span class="err">属性。你不能通过实现</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">keyPathsForValuesAffectingTotalSalary</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法并返回</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">employees</span><span class="p">.</span><span class="n">salary</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">有两种解决方法：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">1.</span> <span class="err">你可以用</span><span class="n">KVO</span><span class="err">将</span><span class="n">parent</span><span class="err">（比如</span><span class="n">Department</span><span class="err">）作为所有</span><span class="n">children</span><span class="err">（比如</span><span class="n">Employee</span><span class="err">）相关属性的观察者。你必须在把</span><span class="n">child</span><span class="err">添加或删除到</span><span class="n">parent</span><span class="err">时也把</span><span class="n">parent</span><span class="err">作为</span><span class="n">child</span><span class="err">的观察者添加或删除。在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">observeValueForKeyPath</span><span class="p">:</span><span class="nl">ofObject</span><span class="p">:</span><span class="nl">change</span><span class="p">:</span><span class="nl">context</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中我们可以针对被依赖项的变更来更新依赖项的值：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">observeValueForKeyPath</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">keyPath</span> <span class="nl">ofObject</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">object</span> <span class="nl">change</span><span class="p">:(</span><span class="bp">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">change</span> <span class="nl">context</span><span class="p">:(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">context</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">context</span> <span class="o">==</span> <span class="n">totalSalaryContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">updateTotalSalary</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="c1">// deal with other observations and/or invoke super...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">updateTotalSalary</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">setTotalSalary</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">valueForKeyPath</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#101;&amp;#x6d;&amp;#x70;&amp;#x6c;&amp;#x6f;&amp;#x79;&amp;#101;&amp;#x65;&amp;#115;&amp;#46;&amp;#x40;&amp;#115;&amp;#x75;&amp;#x6d;&amp;#46;&amp;#115;&amp;#x61;&amp;#108;&amp;#x61;&amp;#114;&amp;#121;&quot;</span><span class="o">&gt;&amp;</span><span class="err">#</span><span class="n">x65</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x6d</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x70</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">108</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">111</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">121</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">101</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x65</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">115</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">46</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x40</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x73</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x75</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">109</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x2e</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">115</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">97</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">108</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x61</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x72</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="n">x79</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;]];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setTotalSalary</span><span class="p">:(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="n">newTotalSalary</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">totalSalary</span> <span class="o">!=</span> <span class="n">newTotalSalary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span> <span class="nl">willChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">totalSalary</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'>      <span class="n">_totalSalary</span> <span class="o">=</span> <span class="n">newTotalSalary</span><span class="p">;</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span> <span class="nl">didChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">totalSalary</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="n">totalSalary</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">_totalSalary</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<p>2.如果你在使用Core Data，你可以在应用的notification center中将parent注册为它的 managed object context的观察者，parent应该回应相应的变更通知，这些通知是children以类似KVO的形式发出的。</p>

<p>其实这也是Objective-C中利用Cocoa实现观察者模式的另一种途径：NSNotificationCenter</p>

<h3>调试KVO</h3>

<p>你可以在 lldb 里查看一个被观察对象的所有观察信息。</p>

<p><code>
(lldb) po [observedObject observationInfo]
</code>
这会打印出有关谁观察谁之类的很多信息。</p>

<p>这个信息的格式不是公开的，我们不能让任何东西依赖它，因为苹果随时都可以改变它。不过这是一个很强大的排错工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装饰者模式]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/10/zhuang-shi-zhe-mo-shi/"/>
    <updated>2014-05-10T09:47:05+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/10/zhuang-shi-zhe-mo-shi</id>
    <content type="html"><![CDATA[<p>装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353405846.png" alt="" /></p>

<!--more-->


<ul>
<li>装饰者和被装饰对象有相同的超类型。</li>
<li>你可以用一个或多个装饰者包装一个对象。</li>
<li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合 ,可以用装饰过的对象代替它。</li>
<li><strong>装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的。</strong></li>
<li>对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰
对象。</li>
</ul>


<p><strong>类应该对扩展开放，对修改关闭。</strong></p>

<h2>用配置咖啡饮料做例子</h2>

<p>比如，现在有一个饮料类（Beverage），向饮料中添加不同的配料（蒸奶（Steamed Milk）、豆浆（Soy）、
摩卡（Mocha，也就是巧克力风味）或覆盖奶泡），就会配制出很多种不同的种类的饮料，其价格也随着添加的配料而变化，饮料店需要计算价格，如果用具体子类继承饮料类并考虑到所有组合的话，将是一个“类爆炸”：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353406269.png" alt="" /></p>

<p>更恶心的是，如果某种配料的价格有变化，就必须含有此配料相应的更改一些饮料子类的实现，记住：<strong>类应该对扩展开放，对修改关闭。</strong></p>

<p>应用装饰者模式，就像给对象穿衣服一样一层一层将拓展动态的添加上去，灵活多变有弹性</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353407109.png" alt="" /></p>

<p>下面用Java实现这个例子</p>

<p>Beverage是一个抽象类，有两个方法：getDescrip-tion()及cost（）</p>

<p><code>java
public abstract class Beverage {
String description = "Unknown Beverage";
public String getDescription() {
return description;
}
public abstract double cost();
}
</code>
Beverage很简单。让我们也来实现Condiment（配料）抽象类，也就是装饰者类吧：</p>

<p><code>
public abstract class CondimentDecorator extends Beverage {
public abstract String getDescription();
}
</code>
必须让Condiment Decorator能够取代Beverage，所以将CondimentDecorator扩展自 Beverage 类</p>

<p>现在，已经有了基类，让我们开始开始实现一些饮料吧！先从浓缩咖啡（Espresso）开始。别忘了，我们需要为具体的饮料设置描述，而且还必须实现cost()方法</p>

<p><code>
public class Espresso extends Beverage {
public Espresso() {
description = "Espresso";
}
public double cost() {
return 1.99;
}
}
</code></p>

<p>其他几种具体的饮料就不写了</p>

<p>如果你回头去看看装饰者模式的类图，将发现我们已经完成了抽象组件（Beverage），有了具体组件（HouseBlend），也有了抽象装饰者（CondimentDecorator）。现在，我们就来实现具体装饰者。先从摩卡下手：</p>

<p><code>
public class Mocha extends CondimentDecorator {
Beverage beverage;
public Mocha(Beverage beverage) {
this.beverage = beverage;
}
public String getDescription() {
return beverage.getDescription() + ", Mocha";
}
public double cost() {
return .20 + beverage.cost();
}
}
</code></p>

<p>你会发现在装饰者类中，完成了描述和价格的效果添加，也就是完成了拓展</p>

<p>其他几种配料代码就不写了</p>

<p>下面进行测试：</p>

<p><code>
public class StarbuzzCoffee {
public static void main(String args[]) {
Beverage beverage = new Espresso();
System.out.println(beverage.getDescription()
+ " $" + beverage.cost());
Beverage beverage2 = new DarkRoast();
beverage2 = new Mocha(beverage2);
beverage2 = new Mocha(beverage2);
beverage2 = new Whip(beverage2);
System.out.println(beverage2.getDescription()
+ " $" + beverage2.cost());
Beverage beverage3 = new HouseBlend();
beverage3 = new Soy(beverage3);
beverage3 = new Mocha(beverage3);
beverage3 = new Whip(beverage3);
System.out.println(beverage3.getDescription()
+ " $" + beverage3.cost());
}
}
</code></p>

<p>输出结果：</p>

<p>&#8220;`
% java StarbuzzCoffee<br/>
Espresso $1.99<br/>
Dark Roast Coffee, Mocha, Mocha, Whip $1.49<br/>
House Blend Coffee, Soy, Mocha, Whip $1.34<br/>
%</p>

<p>&#8220;`
果然是一层套一层吧：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353407345.png" alt="" /></p>

<h2>Java中的装饰者</h2>

<p>java.io包内的类太多了，简直是……“排山倒海”。你第一次（还有第二次和第三次）看到这些API发出“哇”的惊叹时，放心，你不是唯一受到惊吓的人。现在，你已经知道装饰者模式，这些I/O的相关类对你来说应该更有意义了，因为其中许多类都是装饰者。下面是一个典型的对象集合，用装饰者来将功能结合起来，以读取文件数据：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353408228.png" alt="" /></p>

<p><code>BufferedInputStream</code>及<code>LineNumberInputStream</code>都扩展自<code>FilterInputStream</code>，而<code>FilterInputStream</code>是一个抽象的装饰类。</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353408237.png" alt="" /></p>

<p>你会发现“输出”流的设计方式也是一样的。你可能还会发现Reader/Writer流（作为基于字符数据的输入输出）和输入流/输出流的类相当类似（虽然有一些小差异和不一致之处，但是相当雷同，所以你应该可以了解这些类）。</p>

<p>但是JavaAI/O也引出装饰者模式的一个“缺点”：利用装饰者模式，常常造成设计中有大量的小类，数量实在太多，可能会造成使用此API程序员的困扰。但是，现在你已经了解了装饰者的工作原理，以后当使用别人的大量装饰的API时，就可以很容易地辨别出他们的装饰者类是如何组织的，以方便用包装方式取得想要的行为。</p>

<h2>Objective-C类别与装饰模式</h2>

<p>Objective-C中也可以实现基于继承和接口的装饰者模式，但这里介绍的是另一种实现方法：类别</p>

<p>类别是一个Objective-C的语言功能，通过它可以向类添加行为（方法的接口与实现），而不必进行子类化。通过类别添加的方法对类原有的方法没有不良影响。类别中的方法成为了类的一部分，并可由其子类继承。</p>

<p>我们可以用类别来实现装饰模式，然而这不是一种严格的实现，它实现了模式的意图，但却是一种变体。由装饰器类别添加的行为是编译时绑定的，虽然Objective-C原本支持动态绑定（应该用方法的哪个实现）。而且装饰器类别实际上没有封装被扩展的类的实例。</p>

<p>尽管使用类别来实现这个模式跟原始风格有些偏离，但是实现少量的装饰器的时候，它比真正子类的方式更为轻量、更为容易。</p>

<p>这次我们来装饰一张照片，装饰的方法有很多，比如旋转位移变换，阴影。。。</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353408757.png" alt="" /></p>

<p>工程代码可以在<a href="https://github.com/yulingtianxia/Decorator">这里</a>下载</p>

<p>这一方式中有三个类别：UIImage(BaseFilter),UIImage(Transform)和UIImage(Shadow)。从现在起，我把它们分别简称为BaseFilter、Transform和Shadow。BaseFilter定义了几个基本的二维绘图操作，使用当前绘图上下文绘制自己，其他滤镜类别可以使用同样的方法来绘制图像。Transform和Shadow没有继承BaseFilter，但他们属于同一类，因为他们都是UIImage的类别。BaseFilter中定义的方法也能在Transform和Shadow类别中使用，而不必像子类化那样进行继承。</p>

<p>UIImage(BaseFilter)中的方法定义，用户绘制图像，相当于装饰者抽象类，而UIImage则是被装饰的组件:</p>

<p>&#8220;` objc</p>

<h1>import &ldquo;UIImage+BaseFilter.h&rdquo;</h1>

<p>@implementation UIImage (BaseFilter)
&ndash; (CGContextRef) beginContext
{</p>

<pre><code>CGSize size = [self size];
UIGraphicsBeginImageContextWithOptions(size, NO, 0);
CGContextRef context = UIGraphicsGetCurrentContext();

return context;
</code></pre>

<p>}</p>

<ul>
<li><p>(UIImage *) getImageFromCurrentImageContext
{
  [self drawAtPoint:CGPointZero];</p>

<p>  // Retrieve the UIImage from the current context
  UIImage *imageOut = UIGraphicsGetImageFromCurrentImageContext();</p>

<p>  return imageOut;
}</p></li>
<li><p>(void) endContext
{
  UIGraphicsEndImageContext();
}
@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Transform</span><span class="err">类别定义了一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">imageWithTransform</span><span class="p">:</span><span class="n">transform</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法，接受一个转换引用，然后把应用于内部的图像引用，并让它把自己画出来，然后返回变换后的图像</span><span class="o">:&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="bp">UIImage</span><span class="o">+</span><span class="n">Transform</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="bp">UIImage</span><span class="o">+</span><span class="n">BaseFilter</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="bp">UIImage</span> <span class="nl">(Transform)</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="bp">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nl">imageWithTransform</span><span class="p">:(</span><span class="bp">CGAffineTransform</span><span class="p">)</span><span class="n">transform</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">beginContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// setup transformation</span>
</span><span class='line'><span class="n">CGContextConcatCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">transform</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Draw the original image to the context</span>
</span><span class='line'><span class="bp">UIImage</span> <span class="o">*</span><span class="n">imageOut</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">getImageFromCurrentImageContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="n">endContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">imageOut</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Shadow类别定义了一个<code>imageWithDropShadow</code>方法，向图像的内部引用添加阴影效果，并返回应用效果之后的最终图像。</p>

<p>&#8220;`</p>

<h1>import &ldquo;UIImage+Shadow.h&rdquo;</h1>

<h1>import &ldquo;UIImage+BaseFilter.h&rdquo;</h1>

<p>@implementation UIImage (Shadow)
&ndash; (UIImage *) imageWithDropShadow
{</p>

<pre><code>CGContextRef context = [self beginContext];

// set up shadow
CGSize offset = CGSizeMake (-25,  15);
CGContextSetShadow(context, offset, 20.0);

// Draw the original image to the context
UIImage * imageOut = [self getImageFromCurrentImageContext];

[self endContext];

return imageOut;
</code></pre>

<p>}
@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">最后在</span><span class="n">ViewController</span><span class="err">中加载图像：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="bp">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a transformation</span>
</span><span class='line'><span class="bp">CGAffineTransform</span> <span class="n">rotateTransform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="o">-</span><span class="n">M_PI</span> <span class="o">/</span> <span class="mf">4.0</span><span class="p">);</span>
</span><span class='line'><span class="bp">CGAffineTransform</span> <span class="n">translateTransform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'>                                                                        <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">8.0</span><span class="p">);</span>
</span><span class='line'><span class="bp">CGAffineTransform</span> <span class="n">finalTransform</span> <span class="o">=</span> <span class="n">CGAffineTransformConcat</span><span class="p">(</span><span class="n">rotateTransform</span><span class="p">,</span> <span class="n">translateTransform</span><span class="p">);</span>
</span><span class='line'><span class="bp">UIImage</span><span class="o">*</span> <span class="n">finalImage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">image</span> <span class="nl">imageWithTransform</span><span class="p">:</span><span class="n">finalTransform</span><span class="p">]</span> <span class="n">imageWithDropShadow</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">imageView</span> <span class="nl">setImage</span><span class="p">:</span><span class="n">finalImage</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>因为类别只能拓展方法，不能在原有类的基础上添加属性，但是我们依然可以通过下面的方式向类中动态添加属性，来弥补类别的不足：</p>

<p>给UIImage添加一个新的title属性<br/>
具体代码如下：<br/>
<code>UIImage+Title.h</code>:</p>

<p><code>
@interface UIImage(Title)
@property(nonatomic, copy) NSString *title;
@end
</code>
<code>UIImage+Title.m</code>:</p>

<p>&#8220;`</p>

<h1>import &ldquo;UIImage+Title.h&rdquo;</h1>

<p>static char titleKey;</p>

<p>@implementation UIImage(Title)
&ndash; (NSString *)title
{</p>

<pre><code>return objc_getAssociatedObject(self, &amp;titleKey);
</code></pre>

<p>}</p>

<ul>
<li>(void)setTitle:(NSString *)title
{
  objc_setAssociatedObject(self, &amp;titleKey, title, OBJC_ASSOCIATION_COPY);
}
@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">可以看到关键是用到了</span><span class="n">runtime</span><span class="err">的两个函数：</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">id</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span><span class="p">,</span> <span class="n">objc_AssociationPolicy</span> <span class="n">policy</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">该函数中第一个参数表示目标对象，第三个参数表示要添加的属性，第四个参数设置</span><span class="n">objc_AssociationPolicy</span><span class="p">,</span><span class="err">它有以下几个选项：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.qiniudn.com/&lt;/a&gt;&lt;code&gt;OBJC_ASSOCIATION_ASSIGN&lt;/code&gt;，&lt;code&gt;OBJC_ASSOCIATION_RETAIN&lt;/code&gt;，&lt;code&gt;OBJC_ASSOCIATION_COPY&lt;/code&gt;，分别对应我们在声明属性时的&lt;code&gt;assign&lt;/code&gt;,&lt;code&gt;retain&lt;/code&gt;,&lt;code&gt;copy&lt;/code&gt;。&lt;br/&gt;</span>
</span><span class='line'><span class="err">关于第二个参数，</span><span class="n">key</span><span class="err">。因为一个对象可以关联多个新的对像，我们需要一个标志来区分他们。所以这个</span><span class="n">key</span><span class="err">就起这样的作用。这里的需要的</span><span class="n">key</span><span class="err">的地址，不关心它指向谁。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">当我们第二次以新的</span><span class="n">value</span><span class="err">调用</span><span class="n">objc_setAssociatedObject</span><span class="err">时，如果</span><span class="n">policy</span><span class="err">是</span><span class="n">OBJC_ASSOCIATION_ASSIGN</span><span class="err">，新的</span><span class="n">value</span><span class="err">被关联，对原来旧的</span><span class="n">value</span><span class="err">没有任何影响。如果</span><span class="n">policy</span><span class="err">是</span><span class="n">OBJC_ASSOCIATION_RETAIN</span><span class="err">和</span><span class="n">OBJC_ASSOCIATION_COPY</span><span class="err">，新的</span><span class="n">value</span><span class="err">被关联，旧的</span><span class="n">value</span><span class="err">被</span><span class="k">release</span><span class="err">。如果想</span><span class="k">release</span><span class="err">原来的</span><span class="n">value</span><span class="err">又不关联新的</span><span class="n">value</span><span class="err">，，可以用</span><span class="n">objc_setAssociatedObject</span><span class="err">直接传一个</span><span class="nb">nil</span><span class="err">做为</span><span class="n">value</span><span class="err">的值。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">注意不要使用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">objc_removeAssociatedObjects</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，因为它用去掉所有的关联的对象。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">参考资料：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">1.</span> <span class="err">《</span><span class="n">iOS</span><span class="err">设计模式解析》</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">《</span><span class="n">HeadFirst</span><span class="err">设计模式》</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mf">3.</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://fanliugen.com/?p=460&quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//fanliugen.com/?p=460&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="p">]]</span><span class="o">&gt;&lt;/</span><span class="n">content</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">entry</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">2</span><span class="p">)]]</span><span class="o">&gt;&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">link</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2/&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">updated</span><span class="o">&gt;</span><span class="mi">2014</span><span class="o">-</span><span class="mo">05</span><span class="o">-</span><span class="mo">02</span><span class="nl">T20</span><span class="p">:</span><span class="mi">17</span><span class="o">:</span><span class="mo">04</span><span class="o">+</span><span class="mi">08</span><span class="o">:</span><span class="mo">00</span><span class="o">&lt;/</span><span class="n">updated</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="kt">id</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2&lt;/id&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">content</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;html&quot;</span><span class="o">&gt;&lt;!</span><span class="p">[</span><span class="n">CDATA</span><span class="p">[</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">本文内容：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">自定义</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">使用数据模型设计器</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="err">探究</span><span class="n">Core</span> <span class="n">Data</span><span class="err">在</span><span class="n">SQLite</span><span class="err">中的实现</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">推荐先阅读上一篇文章：</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/&quot;</span><span class="o">&gt;</span><span class="err">初识</span><span class="n">Core</span> <span class="n">Data</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="k">strong</span><span class="o">&gt;</span><span class="err">文章所使用的项目代码可以到</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/yulingtianxia/MyCDDemo&quot;</span><span class="o">&gt;</span><span class="err">这里</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">下载</span><span class="o">&lt;/</span><span class="k">strong</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/07/03/chu-shi-core-data-3/&quot;</span><span class="o">&gt;</span><span class="err">下一篇文章</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">里，我将会通过教程的方式，讲述如何用</span><span class="n">Swift</span><span class="err">结合</span><span class="n">CoreData</span><span class="err">的</span><span class="bp">NSFetchedResultsController</span><span class="err">写一个小</span><span class="n">Demo</span><span class="o">-&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;https://github.com/yulingtianxia/HardChoice&quot;</span><span class="o">&gt;</span><span class="n">HardChoice</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span><span class="n">more</span><span class="o">--&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">自定义</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在上一篇教程中我们每条数据都是通过</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象装载，通过</span><span class="n">KVC</span><span class="err">方式使用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">valueForKey</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法访问对象属性，但是使用</span><span class="n">KVC</span><span class="err">要比使用访问器效率低一点。</span> <span class="err">只在必要时使用</span><span class="n">KVC</span><span class="err">，比如你需要动态选择</span><span class="n">key</span><span class="err">或</span><span class="n">keyPath</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">objc</span>
</span><span class='line'><span class="p">[</span><span class="n">newEmployee</span> <span class="nl">setValue</span><span class="p">:@</span><span class="err">”</span><span class="n">Stig</span><span class="err">”</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">firstName</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">aDepartment</span> <span class="nl">setValue</span><span class="p">:</span><span class="mi">@1000</span> <span class="nl">forKeyPath</span><span class="p">:</span><span class="n">manager</span><span class="p">.</span><span class="n">salary</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面我们将自定义</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类，通过对它的继承拓展，使得我们有自己的</span><span class="n">Event</span><span class="err">类，并通过访问</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/%E5%99%A8%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BFKVC%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E3%80%82  &quot;</span><span class="o">&gt;</span><span class="nl">http</span><span class="p">:</span><span class="c1">//yulingtianxia.qiniudn.com/%E5%99%A8%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BFKVC%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E3%80%82  &lt;/a&gt;</span>
</span><span class='line'><span class="err">按</span><span class="n">CMD</span><span class="o">+</span><span class="n">N</span><span class="err">或者在可视化建模工具下选择菜单中</span><span class="n">Editor</span><span class="o">-&gt;</span><span class="n">Create</span> <span class="bp">NSManagedObject</span> <span class="n">Subclass</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353399425.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353399917.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">选中需要子类化的</span><span class="n">Entity</span><span class="err">（当然我们只有一个</span><span class="n">Event</span><span class="err">，自动勾选了）：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353400261.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">最后点击</span><span class="n">Create</span><span class="err">，于是</span><span class="n">Event</span><span class="err">类就创建好了，可以看到属性</span><span class="n">timeStamp</span><span class="err">已经自动生成了，并且实现为</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">@dynamic</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">熟悉</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span><span class="err">语法的都知道</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">@synthesize</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">实际的意义就是自动生成属性的</span><span class="k">setter</span><span class="err">和</span><span class="k">getter</span><span class="err">方法。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">@dynamic</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">就是要告诉编译器，代码中用</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">@dynamic</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">修饰的属性，其</span><span class="k">getter</span><span class="err">和</span><span class="k">setter</span><span class="err">方法会在程序运行的时候或者用其他方式动态绑定，以便让编译器通过编译。其主要的作用就是用在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSManagerObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象的属性声明上，由于此类对象的属性一般是从</span><span class="n">Core</span> <span class="n">Data</span><span class="err">的属性中生成的，</span><span class="n">Core</span> <span class="n">Data</span><span class="err">框架会在程序运行的时候为此类属性生成</span><span class="k">getter</span><span class="err">和</span><span class="k">setter</span><span class="err">方法。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">好的，下面我们改写以前的代码，这次我们将使用</span><span class="n">Event</span><span class="err">类的对象完成以前的任务：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在</span><span class="n">MasterViewController</span><span class="p">.</span><span class="n">m</span><span class="err">文件中加入</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">import</span> <span class="s">&quot;Event.h&quot;</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，然后将</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">insertNewObject</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法替换如下</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">insertNewObject</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSEntityDescription</span> <span class="o">*</span><span class="n">entity</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">fetchRequest</span><span class="p">]</span> <span class="n">entity</span><span class="p">];</span>
</span><span class='line'><span class="n">Event</span> <span class="o">*</span><span class="n">newManagedObject</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:[</span><span class="n">entity</span> <span class="n">name</span><span class="p">]</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If appropriate, configure the new managed object.</span>
</span><span class='line'><span class="c1">// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//    [newManagedObject setValue:[NSDate date] forKey:@&amp;ldquo;timeStamp&amp;rdquo;];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">newManagedObject</span><span class="p">.</span><span class="n">timeStamp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Save the context.</span>
</span><span class='line'><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">context</span> <span class="nl">save</span><span class="p">:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>     <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">abort</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="err">嗯，英文注释还告诉我们通常你应该用访问器方法呢，还说但是现在在这用</span><span class="n">KVC</span><span class="err">就避免了向模板添加自定义类的需求，真逗啊</span>
</span><span class='line'><span class="err">依此类推，更改</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">prepareForSegue</span><span class="p">:</span> <span class="nl">sender</span><span class="p">:</span><span class="err">`方法：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">prepareForSegue</span><span class="p">:(</span><span class="bp">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="n">segue</span> <span class="nl">sender</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">([[</span><span class="n">segue</span> <span class="n">identifier</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;showDetail&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSIndexPath</span> <span class="o">*</span><span class="n">indexPath</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">indexPathForSelectedRow</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Event</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">fetchedResultsController</span><span class="p">]</span> <span class="nl">objectAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">segue</span> <span class="n">destinationViewController</span><span class="p">]</span> <span class="nl">setDetailItem</span><span class="p">:</span><span class="n">object</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>还有<code>configureCell: atIndexPath:</code>方法：</p>

<p>&#8220;`
&ndash; (void)configureCell:(UITableViewCell <em>)cell atIndexPath:(NSIndexPath </em>)indexPath
{</p>

<pre><code>Event *object = [self.fetchedResultsController objectAtIndexPath:indexPath];
</code></pre>

<p>//    cell.textLabel.text = [[object valueForKey:@&ldquo;timeStamp&rdquo;] description];</p>

<pre><code>cell.textLabel.text = [object.timeStamp description];
</code></pre>

<p>}
<code>``
相应地我们也可以针对</code>DetailViewController`进行改造：</p>

<p>DetailViewController.h:</p>

<p>&#8220;`</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@class Event;
@interface DetailViewController : UIViewController</p>

<p>@property (strong, nonatomic) Event *detailItem;</p>

<p>@property (weak, nonatomic) IBOutlet UILabel *detailDescriptionLabel;
@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DetailViewController</span><span class="p">.</span><span class="nl">m</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">DetailViewController</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Event</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">DetailViewController</span> <span class="p">()</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">configureView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">DetailViewController</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">Managing</span> <span class="n">the</span> <span class="n">detail</span> <span class="n">item</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setDetailItem</span><span class="p">:(</span><span class="n">Event</span> <span class="o">*</span><span class="p">)</span><span class="n">newDetailItem</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">detailItem</span> <span class="o">!=</span> <span class="n">newDetailItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">detailItem</span> <span class="o">=</span> <span class="n">newDetailItem</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// Update the view.</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="n">configureView</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">configureView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// Update the user interface for the detail item.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">detailItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//        self.detailDescriptionLabel.text = [[self.detailItem valueForKey:@&amp;ldquo;timeStamp&amp;rdquo;] description];</span>
</span><span class='line'>      <span class="nb">self</span><span class="p">.</span><span class="n">detailDescriptionLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">detailItem</span><span class="p">.</span><span class="n">timeStamp</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="n">configureView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
这部分比较简单，就不详细解释了，运行程序，跟以前一样（不截图了）</p>

<p>如果想复用<code>MasterViewController</code>里面那些代码，需要做些大改动，具体可以参看<a href="http://objccn.io/issue-1-1/">更轻量的 View Controllers</a>这篇文章</p>

<h2>使用数据模型设计器</h2>

<p>点击MyCDDemo.xcdatamodeld文件进入数据模型设计器，点击下方的加号（Add Enity），添加一个Enity，将其名字改为Person。然后添加name和sex属性，类型为string，需要注意的是属性名需要首字母小写，而且我们无需像往常给数据库建表一样为其添加ID字段，因为Core Data中你不需要任何类型的唯一标识Id，也不需要处理表连接。Core Data将在后台自动处理。你所需要做的就是定义对象间的关系。Core Data框架将在后台决定如何生成最佳的底层机制。</p>

<p>与实体名一样，属性的命名也有很多的要求和约定。属性名不能以大写字母开头，不能包含空格，一般都是单数。对于Boolean类型属性，你应该遵循Objective-C实例变量的约定,比如指定一个CustomerOrder对象是否已经发货，那么应该命名属性为shipped，而不是isShipped、hasShipped等。</p>

<p>关于Core Data属性类型，我从网上摘抄了一段比较全面的解释：</p>

<ul>
<li><p>Undefined选项值是新创建的属性的默认类型；如果属性类型为undefined，项目将无法通过编译。</p></li>
<li><p>Integer 16/32/64只表示整数，没有小数点。所以如果10除以3，你将会得到3，而余数1会丢失。Integer 16/32/64之间唯一的区别是所表示的数值范围不同。因为Core Data使用符号数，所以起始范围是负数，而不是0。</p>

<ul>
<li><p>Integer 16 数值范围：-32768~32767；</p></li>
<li><p>Integer 32 数值范围：-2147483648~2147483647；</p></li>
<li><p>Integer 64 数值范围：–9223372036854775808~9223372036854775807。</p></li>
</ul>


<p>  标准整型数的最大值和最小值可以在stdint.h中找到。在任何类文件中输入INT32_MAX,选中右击，然后选择Jump To Definition，你将看到许多最大值最小值定义。<strong>实体的属性的类型是Integer 16/32/64，当创建此实体对应的NSManagedObject子类时，属性最终的类型将会是NSNumber</strong>。</p></li>
<li><p>Double和Float可以认为是有小数部分的整数。它们都是基于二进制数值系统，在CPU运算时很可能会发生舍入误差。比如1/5，如果使用十进制数值系统，可以精确表示为0.2.但在二进制数值系统中，只能表示一个大概，在小数部分你会得到大量数字。<strong>所以不要使用Integer、Double、Float表示货币值。</strong>计算精度越高则越加趋于准确值，但内存占用也会越大。一个Float数使用32bit进行存储，一个Double数使用64bit。它们都使用科学计数法进行存储，所以一个数包含尾数和指数部分。</p>

<p>  在iOS中，最大的Float值是340282346638528859811704183484516925440.000000，最小的Float值是340282346638528859811704183484516925440.000000Double和Float都有一个符号位。而Double比Float的数值范围更大。</p>

<p>  当你决定该选择Float还是Double时，想一下你的属性是否真的需要超过Float提供的7位精度，如果不是，你应该选择Float，因为它更加匹配64bit的iPhone 5S底层处理器。除此之外，如果你想增加浮点数的计算速度而精度并没有严格要求，Float也是最佳选择。<strong>实体的属性的类型是Float或Double，当创建此实体对应的NSManagedObject子类时，属性最终的类型将会是NSNumber。</strong></p></li>
<li><p><strong>Decimal（十进制）是处理货币值和其他需要十进制场合下最佳选择</strong>，Decimal提供了优秀的计算精度，也消除了计算过程中的舍入误差。因为CPU的本地数制是二进制，所以CPU在处理十进制数时，开销会多一点。<strong>实体的属性的类型是Decimal，当创建此实体对应的NSManagedObject子类时，属性最终的类型将会是NSDecimalNumber。</strong>当你使用NSDecimalNumber执行计算时(如加减乘除计算)，为了保证计算精度，你只能使用它提供的内建方法。更多关于NSDecimalNumber可参见这里。</p></li>
<li><p>String类型和Objective-C中的NSString类似，用于保存字符数组。当生成实体对应的NSManagedObject子类时，String属性被表示为NSString。</p></li>
<li><p>Boolean数据类型被用于表示YES/NO值。当生成实体对应的NSManagedObject子类时，Boolean数据类型会被表示为NSNumber。所以为了获取布尔值，你需要想NSNumber对象发送boolValue消息。</p></li>
<li><p>Date类型是自解释类型。用来存储日期和时间。<strong>当生成实体对应的NSManagedObject子类时，Date类型会被表示为NSDate。</strong></p></li>
<li><p>Binary Data用来表示照片，音频，或一些BLOB类型数据(&ldquo;Binary Large OBjects&rdquo; such as image and sound data)。<strong>当生成实体对应的NSManagedObject子类时，Binary Data数据类型会被表示为NSData。</strong></p></li>
<li><p>Transformable属性类型用于存储一个Objective-C对象。该属性类型允许你存储任何类的实例，比如你使用Transformable属性表示UIColor。<strong>当生成NSManagedObject子类时，Transformable类型会被表示为id。</strong>对于id对象的保存和解档需要使用一个NSValueTransformer的实例或子类的实例。由该类负责属性值与NSData之间的转换。但这也相当的简单，尤其是当属性值的类型已经实现了NSCoding协议，此时系统会自动提供一个默认的NSValueTransformer实例来完成归档和解档。</p></li>
</ul>


<p><img src="http://yulingtianxia.qiniudn.com/140353400282.png" alt="" /></p>

<p>选择一个属性，在右侧的Data Model Inspector中可以对属性进行更为详细的设置，而且这些设置项会根据你所设置的属性类型不同而不同，大致分为以下几类：</p>

<ul>
<li>Transient（瞬时）选项表示属性不会存储到持久化存储文件中。Transient通常用在属性的值是由其他属性计算或合成而来（比如fullName属性是根据Persion类实例的firstName和lastName拼接而来）。</li>
<li>Optional（可选）选项表示当前属性的值允许为空。如果将属性指定为Optional，那么即使属性的值为空，实体的NSManagedObject实例也可被保存。如果该值是必选的（不选中Optional则为必选），如果属性值为空，NSManagedObject对象上下文将拒绝保存这个属性值不完整的NSManagedObject对象（当你尝试并保存上下文，你将接收到一个NSError对象）。所有的属性最初的状态都是Optinal。</li>
<li>Indexed选项表示底层的持久化存储文件应该为该属性生成一个索引；如果你使用基于多个属性的查询条件来提取对象，指定此类属性为Indexed，可以大幅提高提取速度。</li>
<li>Reg.Ex是Regular Expression的缩写，主要是用来验证属性值是否匹配特定的模式。此选项只对String类型有效。</li>
<li>Validation可以保证非法数据不被保存进持久化存储文件中。数值属性类型（Integer 16/32/64、Float、Double、Decimal）都有maximum和minimum最大值最小值设定。你也可以对String类型设置最大长度和最小长度。或对Date类型设置日期范围。不过最好的做法是当用户向UITextField中输入数据时就开始验证数据，而非等到向上下文发送save消息才验证数据。</li>
<li>除了Transformable和Binary Data类型以外，Default适用于所有属性类型。它被用来配置属性的默认值。</li>
<li>Allows External Storage允许大尺寸的二进制数据可以保存在持久化存储文件的外部。当你保存如照片，音频或视频时，建议是选中该选项， 这样Core Data就会对大于1MB的数据保存在持久化存储文件的外部。</li>
</ul>


<p>如果你细心的话，会发现无论是属性还是实体等选项，右侧的Data Model Inspector经常会出现User Info一栏。<br/>
在managed object model中很多元素，比如entities, attributes,和 relationships，有一个相关联的用户信息字典。你可以在用户信息字典中以键值对的形式放入你想要的任何信息。这里常用的信息有实体的版本详情，还有fetched property中谓词（predicate）用到的值。</p>

<p>说了一大堆，再添加两个实体吧：Teacher和Student，都继承自Person：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353400755.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353401739.png" alt="" /></p>

<p>点击右下方的Editor Style切换到Graph模式：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353401953.png" alt="" /></p>

<p>选中Teacher，长按Add Attribute会弹出所有的选项（同样你也可以试试长按Add Enity），选择Add Relationship，添加一个关系，命名为students，Type为To Many，目标为Student（一个老师教很多学生）：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353402308.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/14035340227.png" alt="" /></p>

<p>我们再尝试一种添加关系的新方法：把以前在Teacher中建立的students删除，选中Student，按住Ctrl，鼠标拖至Teacher，这样一个双向的关系就建立起来了：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353402879.png" alt="" /></p>

<p>分别编辑双方的关系，Tpye都是To Many：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353402596.png" alt="" /></p>

<p>用上一节中提到的方法，建立这三个新建的Entity的<code>NSManagedObject</code>子类：</p>

<p><img src="http://yulingtianxia.qiniudn.com/14035340286.png" alt="" /></p>

<p>因为创建顺序的问题，当Student创建的时候还不知道有<code>Teacher</code>类，于是其生成的一些方法将Teacher默认为<code>NSManagedObject</code>类：</p>

<p>&#8220;`</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>import &lt;CoreData/CoreData.h></h1>

<p>@interface Student : NSManagedObject</p>

<p>@property (nonatomic, retain) NSNumber * grade;
@property (nonatomic, retain) NSSet *teachers;
@end</p>

<p>@interface Student (CoreDataGeneratedAccessors)</p>

<ul>
<li>(void)addTeachersObject:(NSManagedObject *)value;</li>
<li>(void)removeTeachersObject:(NSManagedObject *)value;</li>
<li>(void)addTeachers:(NSSet *)values;</li>
<li>(void)removeTeachers:(NSSet *)values;</li>
</ul>


<p>@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">而</span><span class="n">Teacher</span><span class="err">类创建的时候已经有了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Student</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类，就不会出现上面的问题：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Foundation</span><span class="o">/</span><span class="n">Foundation</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">CoreData</span><span class="o">/</span><span class="n">CoreData</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@class</span> <span class="nc">Student</span>;<span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">Teacher</span> : <span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSString</span> <span class="o">*</span> <span class="n">course</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">retain</span><span class="p">)</span> <span class="bp">NSSet</span> <span class="o">*</span><span class="n">students</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">Teacher</span> <span class="nl">(CoreDataGeneratedAccessors)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">addStudentsObject</span><span class="p">:(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">removeStudentsObject</span><span class="p">:(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">addStudents</span><span class="p">:(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">values</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">removeStudents</span><span class="p">:(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">values</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>虽然<code>Teacher</code>类认识<code>Student</code>类，因为它已经创建了，但是此时Persion类还没有创建，于是此时<code>Student</code>类和<code>Teacher</code>类继承的依然是<code>NSManagedObject</code>，这不是我们想要的结果。<br/>
解决方法是重新生成下这三个Entity对应的<code>NSManagedObject</code>子类，并覆盖原有的文件：</p>

<p>&#8220;`</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>import &lt;CoreData/CoreData.h></h1>

<h1>import &ldquo;Person.h&rdquo;</h1>

<p>@class Teacher;</p>

<p>@interface Student : Person</p>

<p>@property (nonatomic, retain) NSNumber * grade;
@property (nonatomic, retain) NSSet *teachers;
@end</p>

<p>@interface Student (CoreDataGeneratedAccessors)</p>

<ul>
<li>(void)addTeachersObject:(Teacher *)value;</li>
<li>(void)removeTeachersObject:(Teacher *)value;</li>
<li>(void)addTeachers:(NSSet *)values;</li>
<li>(void)removeTeachers:(NSSet *)values;</li>
</ul>


<p>@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">你会发现多了一个</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CoreDataGeneratedAccessors</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">类别，这个类别中的方法是</span><span class="n">Core</span> <span class="n">Data</span><span class="err">框架根据你在数据模式编辑器中设置的实体关系自动生成的，你不需要实现它们，</span><span class="n">Core</span> <span class="n">Data</span><span class="err">会在运行时实现这些方法</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">如果你偏要想看看其实现机理，在右下方的代码片段库中选择“</span><span class="n">Core</span> <span class="n">Data</span> <span class="n">To</span><span class="o">-</span><span class="n">Many</span> <span class="n">Relationship</span> <span class="n">Accessors</span><span class="err">”并拖拽到代码中</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.qiniudn.com/140353403195.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="o">/&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">生成的代码如下：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">add</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;</span><span class="nl">Object</span><span class="p">:(</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationship</span> <span class="n">destination</span> <span class="k">class</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSSet</span> <span class="o">*</span><span class="n">changedObjects</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSet</span> <span class="nl">setWithObject</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">willChangeValueForKey</span><span class="p">:</span><span class="s">@&quot;&amp;lt;#relationshipName#&amp;gt;&quot;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="nb">self</span> <span class="nl">primitiveValueForKey</span><span class="p">:</span><span class="s">@&quot;&amp;lt;#relationshipName#&amp;gt;&quot;</span><span class="p">]</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span> <span class="nl">didChangeValueForKey</span><span class="p">:</span><span class="s">@&quot;&amp;lt;#relationshipName#&amp;gt;&quot;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">remove</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;</span><span class="nl">Object</span><span class="p">:(</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationship</span> <span class="n">destination</span> <span class="k">class</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">NSSet</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">changedObjects</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSet</span> <span class="nl">setWithObject</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">willChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="nb">self</span> <span class="nl">primitiveValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="nl">removeObject</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">didChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">add</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">willChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="nb">self</span> <span class="nl">primitiveValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="nl">unionSet</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">didChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">remove</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">willChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="nb">self</span> <span class="nl">primitiveValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="nl">minusSet</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">didChangeValueForKey</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="err">#</span><span class="n">relationshipName</span><span class="err">#</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">withSetMutation</span><span class="p">:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects</span><span class="p">:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<p>我们需要将&lt;#Capitalized relationship name#>, &lt;#Relationship destination class#> 和 &lt;#Relationship name#>替换为我们定义的连接名，对照下前面<code>CoreDataGeneratedAccessors</code>类别中的方法名，你就会明白了</p>

<p>同样以前标记为<code>@dynamic</code>的属性，其实现原理如下：</p>

<p>&#8220;`
&ndash; (&lt;#propertyObjectType#> *)&lt;#propertyName#>
{</p>

<pre><code>[self willAccessValueForKey:@"&lt;#propertyName#&gt;"];
&lt;#propertyObjectType#&gt; *value = [self primitiveValueForKey:@"&lt;#propertyName#&gt;"];
[self didAccessValueForKey:@"&lt;#propertyName#&gt;"];
return value;
</code></pre>

<p>}</p>

<ul>
<li>(void)set&lt;#CapitalizedPropertyName#>:(&lt;#propertyObjectType#> *)value
{
  [self willChangeValueForKey:@&ldquo;&lt;#propertyName#>&rdquo;];
  [self setPrimitiveValue:value forKey:@&ldquo;&lt;#propertyName#>&rdquo;];
  [self didChangeValueForKey:@&ldquo;&lt;#propertyName#>&rdquo;];
}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">现在，我们并不需要知道他们的实现方法是如何被动态生成的，估计是用到了</span><span class="n">block</span><span class="err">或者</span><span class="n">delegate</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">探究</span><span class="n">Core</span> <span class="n">Data</span><span class="err">在</span><span class="n">SQLite</span><span class="err">中的实现</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">在上一节中我们创建了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Person</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Teacher</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">和</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Student</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">三个</span><span class="n">Entity</span><span class="err">和对应的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">子类，下面我们需要在代码中对其进行“实战部署”，并观察它们是如何在</span><span class="n">SQLite</span><span class="err">数据库中保存的，这样更有利于理解</span><span class="n">Core</span> <span class="n">Data</span><span class="err">机制。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">为了简单测试，我直接在</span><span class="n">MasterViewController</span><span class="p">.</span><span class="n">m</span><span class="err">文件中的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">insertNewObject</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中加入测试代码（其实关于测试应该利用好</span><span class="n">Xcode</span><span class="err">自带的单元测试工具</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/04/28/iosdan-yuan-ce-shi-%5Bnil%5Dxctest/&quot;</span><span class="o">&gt;</span><span class="n">XCTest</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">，我这里为了方便操作，用了以前添加数据的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">insertNewObject</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法，关于工程初始代码的讲解，请看我之前的一篇</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/&quot;</span><span class="o">&gt;</span><span class="err">教程</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="err">）</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">insertNewObject</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSEntityDescription</span> <span class="o">*</span><span class="n">entity</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">fetchRequest</span><span class="p">]</span> <span class="n">entity</span><span class="p">];</span>
</span><span class='line'><span class="n">Event</span> <span class="o">*</span><span class="n">newManagedObject</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:[</span><span class="n">entity</span> <span class="n">name</span><span class="p">]</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If appropriate, configure the new managed object.</span>
</span><span class='line'><span class="c1">// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//    [newManagedObject setValue:[NSDate date] forKey:@&amp;ldquo;timeStamp&amp;rdquo;];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">newManagedObject</span><span class="p">.</span><span class="n">timeStamp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="c1">//新加的测试代码</span>
</span><span class='line'><span class="n">Student</span> <span class="o">*</span><span class="n">aStudent</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:</span><span class="s">@&quot;Student&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'><span class="n">aStudent</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;LiLei&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">aStudent</span><span class="p">.</span><span class="n">sex</span> <span class="o">=</span> <span class="s">@&quot;male&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">aStudent</span><span class="p">.</span><span class="n">grade</span> <span class="o">=</span> <span class="mi">@1</span><span class="p">;</span>
</span><span class='line'><span class="n">Teacher</span> <span class="o">*</span><span class="n">aTeacher</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName</span><span class="p">:</span><span class="s">@&quot;Teacher&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'><span class="n">aTeacher</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;MissGao&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">aTeacher</span><span class="p">.</span><span class="n">sex</span> <span class="o">=</span> <span class="s">@&quot;female&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">aTeacher</span><span class="p">.</span><span class="n">course</span> <span class="o">=</span> <span class="s">@&quot;English&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">aTeacher</span> <span class="nl">addStudentsObject</span><span class="p">:</span><span class="n">aStudent</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Save the context.</span>
</span><span class='line'><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">context</span> <span class="nl">save</span><span class="p">:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>     <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>     <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">abort</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>我们建立了一名叫LiLei的一年级男生和一名叫MissGao的教英语的女教师，并将LiLei同学添加到高老师的学生名单中。</p>

<p>运行程序，打开MyCDDemo.sqlite文件，查看表结构：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353403982.png" alt="" /></p>

<p>你会发现虽然Student和Teacher继承Person，但是Person表里面竟然也有grade和course字段</p>

<p>点击程序中的加号来添加一条数据：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353403912.png" alt="" /></p>

<p>查看ZPERSON，Z_3TEACHERS，Z_PRIMARYKEY表内容：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353404264.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353404745.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353405697.png" alt="" /></p>

<p>这次一目了然了：</p>

<p>ZPERSON表存储了子类所有字段数据，其Z_ENT字段标志着这条数据的类型，Z_ENT与类型名Z_NAME的映射关系储存在Z_PRIMARYKEY表中，而Z_3TEACHERS存储的则是ZPERSON表中数据项之间的关系，也就是之前我们建立的学生和老师的对应关系，其原理是将ZPERSON表中的Z_PK字段内容两个一组对应起来，这样就相当于把ZPERSON表中两条数据项关联起来了。之前我们在代码中只将LiLei同学添加到了MissGao老师的学生列表中，但是Core Data已经自动维护起了关系，让MissGao也存在于LiLei的老师列表中。Core Data把底层的数据库封装起来，通过简单的操作让程序员更高校的管理数据，所以SQLite这部分我们只是了解下就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Core Data(1)]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/"/>
    <updated>2014-05-01T19:58:00+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1</id>
    <content type="html"><![CDATA[<p>本文内容：</p>

<ul>
<li>Core Data概述</li>
<li>新建一个Core Data工程</li>
<li>总结</li>
</ul>


<hr />

<!--more-->


<h2>Core Data概述</h2>

<p>Core Data本身既不是数据库也不是数据库访问框架。相反，Core Data是一个完整的数据模型解决方案。我简单理解为对持久层的封装，使得我们可以通过可视化建立数据模型，简化数据存取。有人会联想到Hibernate，其实Core Data比Hibernate强大得多，它不仅支持SQLite数据库，还能对XML文件、二进制文件、用户自定义文件进行操作。</p>

<p>即使不懂SQL语句，也依然可以使用Core Data。因为Core Data将底层的数据库SQL语句封装成了一套API，并可通过可视化操作来建立数据库的模型和表之间的关系，它甚至在数据变化时会帮你自动处理关系（比如删除了一门课程，所有选这门课程的学生也会自动解除与此门课程的关系），Core Data还能对非法数据进行过滤，还支持对数据操作的Undo/Redo功能。更重要的是，Core Data的<code>NSFetchRequest</code>类可以替代SQL中的Select语句，并提供了更高效的方法将查询结果显示在UITableView中。</p>

<p>iOS 3.0和Mac OS X10.5都支持Core Data，但iOS上不支持XML文件存储。Core Data对读取性能做了大量优化，其中惰性加载（Faulting）就是一个例子，毕竟设备的内存是有限切珍贵的。<br/>
在OSX上可以绑定利用KVO和KVC保持UI项与模型对象或属性之间的连接，无需编写任何代码，通过对象和数组控制器自动从Core Data存储区分批提取<code>NSManagedObject</code>对象。这就像在VS中用.Net构建基于SQLServer的桌面程序。<br/>
苹果公司单独为iOS平台的Core Data引入了<code>NSFetchedResultsController</code>类帮助视图与从持久化存储文件提取的数据之间的交互。它主要是用来充当<code>UITableiView</code>的数据源，负责调整<code>UITableiView</code>行与节（section）的显示数目，以及为各表格行提供内容。</p>

<h2>新建一个Core Data工程</h2>

<p>在Xcode5中，只有Master-Detail Application，Utility Application以及Empty Application支持创建时使用Core Data模板，我们选择带有UITableView的Master-Detail Application吧。</p>

<p><img src="http://yulingtianxia.qiniudn.com/14035339677.png" alt="" /></p>

<p>一定要勾选Core Data选项，项目名称就叫MyCDDemo吧，嘿嘿</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353396978.png" alt="" /></p>

<p>项目建立后会发现Frameworks中已经有了<code>CoreData.framework</code>一项，并且还多了一个MyCDDemo.xcdatamodeld文件，该文件定义了数据模型结构，你可以使用XCode内置的可视化建模工具进行构建。点开它你会发现左侧有三项：Entities，Fetch Request、Configurations。</p>

<p><strong>Entities</strong></p>

<p>在系统的学习Core Data前，可以简单的将Entity理解为数据库中的一张表，在代码中一个<code>NSEntityDescription</code>类的对象就代表了一个Entity。Entity也像类一样可以继承，如果你有若干个相似的实体，就可以抽离出它们的共有特性作为一个“父实体”，就省去了在多个实体中都指定相同的属性。甚至可以勾选Abstract Entitiy让其成为抽象实体，就像抽象类一样。</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353414584.png" alt="" /></p>

<p>现在已经有了一个现成的实体：Event，也就是在SQLite中有了一张叫做Event的表：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353397403.png" alt="" /></p>

<p>Attributes就相当于一张表的列属性，可以设置其数据类型，默认值，最大最小值等，类似数据库可视化建表。需要注意的是这里的空值是NULL，不等同于OC中的nil，更不等同于0和空字符串@“”。Event实体中已经有了一个叫timeStamp的属性，类型为Date，这是模版自动生成的，暂且别修改它。</p>

<p>Relationships描述了Entity间的关系：多对一，一对一等。当你指定了一个关系后，苹果推荐我们也指定一个反转关系。比如A和B是多对多的关系，那么A指向B的关系Type为To Many，同时设定B指向A的关系Type为To Many。</p>

<p>Fetched Property表示了一种弱的、单向的关系。因为Core Data不支持在persistent store之间建立Relationships，所以Fetched Property可用于建立cross-store关系，还用于建立“松耦合”关系，相似暂时的分组。（a fetched property of a department might be &ldquo;recent hires&rdquo; (employees do not have an inverse to the recent hires relationship)）</p>

<p><strong>Fetch Request</strong></p>

<p>我们使用<code>NSFetchRequest</code>类来描述数据请求，利用数据请求从持久存储（persistent store）中获取对象。经常碰到的情形是你经常需要多次执行同样的请求，或是执行遵循一个给定模式的请求，但是其中包含变量（如查找条件）——这些变量经常由用户提供。例如，在运行程序的时候，你要根据用户需要获取某个作者在用户指定日期后出版的所有出版物。</p>

<p>你可以预定义请求，把它们作为模板存储在被管理对象模型中。预定义的模板在你需要的时候就可以取出使用。通常情况下，我们通过Xcode的data modeling tool工具创建请求模板。模板可以包含变量：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353412465.png" alt="" /></p>

<p><strong>Configurations</strong></p>

<p>配置包含了一个名称和若干个相关的实体。实体的集合是可以重叠的——这就是说，一个实体可以出现在多个配置中。在代码中，我们使用<code>setEntities: forConfiguration:</code>的方法来指定配置。也可以用Xcode的建模工具来指定。要获取某项配置的实体，需要用<code>entitiesForConfiguration:</code>的方法。</p>

<p>一般说来，如果你想把不同的实体存放在不同的存储中去，就可能用到配置。一个持久化存储协调器（persistent store coordinator，你暂且理解为负责数据库连接的东东）只能有一个被管理对象模型（managed object model，也就是把xcdatamodeld文件加载到代码中的内容啦）。所以，默认情况下，和协调器关联的某个存储必须包含同样的实体。要想绕过这个限制，你可以创建一个包含所有实体并集的模型，然后在模型中为每一个你想使用的实体子集创建配置，这样一来，使用这个模型创建协调器，当你需要添加存储（persistent store）时，可根据不同的配置来指定对应的存储属性。当你创建配置的时候，需要记住，不能创建跨存储的关系（cross-store relationships）。</p>

<p>模版已经生成了一个叫Default的配置，但是在程序中并没有用到它（这在之后的内容会阐述）。</p>

<p>在了解了xcdatamodeld类型文件之后，你可能对Core Data如何描述一个数据库有了一定的概念，下一步我们准备阅读模版自动生成的代码，你会体会到xcdatamodeld文件在程序中是如何被加载和使用的。</p>

<p>先看看AppDelegate.h</p>

<p>&#8220;` objc</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface AppDelegate : UIResponder <UIApplicationDelegate></p>

<p>@property (strong, nonatomic) UIWindow *window;</p>

<p>@property (readonly, strong, nonatomic) NSManagedObjectContext <em>managedObjectContext;
@property (readonly, strong, nonatomic) NSManagedObjectModel </em>managedObjectModel;
@property (readonly, strong, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator;</p>

<ul>
<li>(void)saveContext;</li>
<li>(NSURL *)applicationDocumentsDirectory;</li>
</ul>


<p>@end
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">嗯，比平时的程序多出了三个属性嘛，而且后两个属性之前还提到过，这“三剑客“是</span><span class="n">Core</span> <span class="n">Data</span><span class="err">中非常重要的三个类：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Managed</span> <span class="n">Object</span> <span class="n">Model</span><span class="err">（管理数据模型）</span><span class="o">:</span> <span class="err">你可以将这个东西看作是数据库的轮廓，或者结构。这里包含了各个实体的定义信息，一般来说，你会使用我们刚刚看过的视觉编辑器来操作这个物体，添加属性，建立属性之间的关系等等，当然你也可以使用代码。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Persistent</span> <span class="n">Store</span> <span class="n">Coordinator</span> <span class="err">（持久性数据协调器）：</span> <span class="err">你可以将这个东西看作是数据库连接库，在这里，你将设置数据存储的名字和位置，以及数据存储的时机。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">Managed</span> <span class="n">Object</span> <span class="n">Context</span> <span class="err">（管理数据内容）：你可以将这一部分看作是数据的实际内容，这也是整个数据库中对我们而言最重要的部分（这还用说），基本上，插入数据，查询数据，删除数据的工作都在这里完成。</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你还是不好理解，那么简单的把这“三剑客”理解为：数据定义语言</span> <span class="p">(</span><span class="n">DDL</span><span class="p">)</span><span class="err">、数据库连接（</span><span class="n">DBC</span><span class="err">）、数据操作语言</span> <span class="p">(</span><span class="n">DML</span><span class="p">)</span><span class="err">在</span><span class="n">Core</span> <span class="n">Data</span><span class="err">中的另一种存在吧！</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">下面该看看</span><span class="n">AppDelegate</span><span class="p">.</span><span class="n">m</span><span class="err">，了解下“三剑客”实例化的过程：</span>
</span><span class='line'><span class="err">首先是程序加载完毕的代理方法：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application</span><span class="p">:(</span><span class="bp">UIApplication</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions</span><span class="p">:(</span><span class="bp">NSDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'><span class="bp">UINavigationController</span> <span class="o">*</span><span class="n">navigationController</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">;</span>
</span><span class='line'><span class="n">MasterViewController</span> <span class="o">*</span><span class="n">controller</span> <span class="o">=</span> <span class="p">(</span><span class="n">MasterViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">navigationController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">;</span>
</span><span class='line'><span class="n">controller</span><span class="p">.</span><span class="n">managedObjectContext</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="err">我们暂且只看</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">controller</span><span class="p">.</span><span class="n">managedObjectContext</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">;</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这句，调用</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">managedObjectContext</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的</span><span class="k">getter</span><span class="err">方法并赋给程序启动后出现的</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MasterViewController</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，那么我们就看一下</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">managedObjectContext</span><span class="err">`的</span><span class="k">getter</span><span class="err">方法：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="c1">// Returns the managed object context for the application.</span>
</span><span class='line'><span class="c1">// If the context doesn&amp;rsquo;t already exist, it is created and bound to the persistent store coordinator for the application.</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="n">managedObjectContext</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">_managedObjectContext</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">coordinator</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">persistentStoreCoordinator</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">coordinator</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">_managedObjectContext</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_managedObjectContext</span> <span class="nl">setPersistentStoreCoordinator</span><span class="p">:</span><span class="n">coordinator</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">_managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>嗯，英文注释不错，第一次调用的时候会实例化一个<code>NSManagedObjectContext</code>对象，并使用<code>persistentStoreCoordinator</code>方法返回的<code>NSPersistentStoreCoordinator</code>对象配置上下文，最后返回新实例化的<code>NSManagedObjectContext</code>对象。<br/>
顺藤摸瓜，我们再看看<code>persistentStoreCoordinator</code>的getter：</p>

<p>&#8220;`
// Returns the persistent store coordinator for the application.
// If the coordinator doesn&rsquo;t already exist, it is created and the application&rsquo;s store added to it.
&ndash; (NSPersistentStoreCoordinator *)persistentStoreCoordinator
{</p>

<pre><code>if (_persistentStoreCoordinator != nil) {
    return _persistentStoreCoordinator;
}

NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"MyCDDemo.sqlite"];

NSError *error = nil;
_persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&amp;error]) {
    /*
     Replace this implementation with code to handle the error appropriately.

     abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 

     Typical reasons for an error here include:
     * The persistent store is not accessible;
     * The schema for the persistent store is incompatible with current managed object model.
     Check the error message to determine what the actual problem was.


     If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.

     If you encounter schema incompatibility errors during development, you can reduce their frequency by:
     * Simply deleting the existing store:
     [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]

     * Performing automatic lightweight migration by passing the following dictionary as the options parameter:
     @{NSMigratePersistentStoresAutomaticallyOption:@YES, NSInferMappingModelAutomaticallyOption:@YES}

     Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.

     */
    NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
    abort();
}    

return _persistentStoreCoordinator;
</code></pre>

<p>}
<code>``
为了访问documents目录中的SQLite存储文件MyCDDemo.sqlite，还定义了一个</code>applicationDocumentsDirectory`方法，它的作用是获取程序documents的路径，代码如下：</p>

<p>&#8220;`
// Returns the URL to the application&rsquo;s Documents directory.
&ndash; (NSURL *)applicationDocumentsDirectory
{</p>

<pre><code>return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
</code></pre>

<p>}
<code>``
MyCDDemo.sqlite文件是在编译MyCDDemo.xcdatamodeld时生成的，同样生成的还有MyCDDemo.momd文件，后面会提到。
</code>NSPersistentStoreCoordinator<code>初始化时需要传入</code>managedObjectModel<code>。</code>NSPersistentStoreCoordinator<code>对象在添加持久存储的时候不仅需要传入存储类型，还有配置，存储文件URL，选项以及错误类型。我们使用sqlite作为存储类型，配置为nil，还记得之前叫做default的配置么？这里我们只有一个持久存储，所以配置一项不需要。如果添加存储的时候出现错误，就会进入if判断，具体处理错误的细节可以看看模版生成的注释。  
既然</code>NSPersistentStoreCoordinator<code>又用到了</code>managedObjectModel<code>，我们再看看</code>managedObjectModel`方法吧：</p>

<p>&#8220;`
// Returns the managed object model for the application.
// If the model doesn&rsquo;t already exist, it is created from the application&rsquo;s model.
&ndash; (NSManagedObjectModel *)managedObjectModel
{</p>

<pre><code>if (_managedObjectModel != nil) {
    return _managedObjectModel;
}
NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"MyCDDemo" withExtension:@"momd"];
_managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
return _managedObjectModel;
</code></pre>

<p>}
<code>``
依然是跟之前一样的代码风格，这次</code>NSManagedObjectModel`类在初始化的时候用到了MyCDDemo.momd文件，前面提到过，当你编译项目时，MyCDDemo.xcdatamodeld数据模型将被编译成MyCDDemo.momd资源，并且保存到app的Bundle目录。</p>

<p>最后，在程序退出时，会调用代理<code>applicationWillTerminate:</code></p>

<p>&#8220;`
&ndash; (void)applicationWillTerminate:(UIApplication *)application
{</p>

<pre><code>// Saves changes in the application's managed object context before the application terminates.
[self saveContext];
</code></pre>

<p>}
<code>``
它调用了</code>saveContext`方法：</p>

<p>&#8220;`
&ndash; (void)saveContext
{</p>

<pre><code>NSError *error = nil;
NSManagedObjectContext *managedObjectContext = self.managedObjectContext;
if (managedObjectContext != nil) {
    if ([managedObjectContext hasChanges] &amp;&amp; ![managedObjectContext save:&amp;error]) {
         // Replace this implementation with code to handle the error appropriately.
         // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    } 
}
</code></pre>

<p>}
<code>``
</code>managedObjectContext<code>对象中的数据无论怎么修改，都是发生在内存中的，需要调用</code>save`方法来保存到存储文件当中。</p>

<p>按理说接下来应该看看<code>MasterViewController中</code>被传入的<code>managedObjectContext</code>对象是如何使用的，但在这之前，我们先运行下程序，看看这个App有什么功能：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353397837.png" alt="" /></p>

<p>再普通不过的tableview了，点击加号便可添加一条记录，内容为时间戳，回想起之前看的名称为Event的Entity，是不是想起了什么，嘿嘿。再添加了四条记录后，不妨打开sqlite文件查看下，路径为<code>~/Library/Application Support/iPhone Simulator/[OS version]/Applications/[appGUID]/Documents/</code>，目录内包含了三个文件MyCDDemo.sqlite、MyCDDemo.sqlite-shm、MyCDDemo.sqlite-wal。如上文所述，根据AppDelegate.m文件中的<code>persistentStoreCoordinator</code>方法可知，时间戳记录被存储在MyCDDemo.sqlite文件中。我用Navicat Premium将其打开：</p>

<p><img src="http://yulingtianxia.qiniudn.com/14035339876.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353398727.png" alt="" /></p>

<p>相信你对“三剑客”有了更深的理解，再附上一张图加深下印象：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353388879.png" alt="" /></p>

<p>一个<code>NSManagedObjectModel</code>对象处在<code>NSPersistentStoreCoordinator</code>对象和<code>NSManagedObjectContext</code>对象之间。Core Data根据<code>NSManagedObjectModel</code>对象确定如何将底层的持久化文件中的数据映射为<code>NSManagedObject</code>对象。一个<code>NSManagedObjectModel</code>对象用于表示数据的结构。<code>NSManagedObjectModel</code>对象也被称为对象图(object graph)。你可以简单的理解为：<strong>在数据库sqlite文件中，一张表中的一条数据（table row）就相当于代码中的一个NSManagedObject对象，他们之间的映射是通过<code>NSManagedObjectModel</code>对象完成的</strong></p>

<p>下面让我们进入到<code>MasterViewController</code>中来认识一下这个新出现的<code>NSManagedObject</code>“小弟”</p>

<p>既然数据库中的数据最终显示在了<code>UITableView</code>上，我们撇开<code>MasterViewController</code>中其他的方法，直奔<code>UITableViewDataSource</code>协议中已经实现的那几个方法：</p>

<p>&#8220;`
&ndash; (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{</p>

<pre><code>return [[self.fetchedResultsController sections] count];
</code></pre>

<p>}</p>

<ul>
<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
  id <NSFetchedResultsSectionInfo> sectionInfo = [self.fetchedResultsController sections][section];
  return [sectionInfo numberOfObjects];
}</p></li>
<li><p>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
  UITableViewCell </em>cell = [tableView dequeueReusableCellWithIdentifier:@&ldquo;Cell&rdquo; forIndexPath:indexPath];
  [self configureCell:cell atIndexPath:indexPath];
  return cell;
}</p></li>
<li><p>(BOOL)tableView:(UITableView <em>)tableView canEditRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  // Return NO if you do not want the specified item to be editable.
  return YES;
}</p></li>
<li><p>(void)tableView:(UITableView <em>)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  if (editingStyle == UITableViewCellEditingStyleDelete) {
      NSManagedObjectContext *context = [self.fetchedResultsController managedObjectContext];
      [context deleteObject:[self.fetchedResultsController objectAtIndexPath:indexPath]];</p>

<pre><code>  NSError *error = nil;
  if (![context save:&amp;error]) {
       // Replace this implementation with code to handle the error appropriately.
       // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
      NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
      abort();
  }
</code></pre>

<p>  } <br/>
}</p></li>
<li><p>(BOOL)tableView:(UITableView <em>)tableView canMoveRowAtIndexPath:(NSIndexPath </em>)indexPath
{
  // The table view should not be re-orderable.
  return NO;
}
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">如果你对</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">UITableView</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">的使用很有经验，一眼就可看出数据是由</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">对象提供的。即使在</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">tableView</span><span class="p">:</span> <span class="nl">cellForRowAtIndexPath</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中没出现</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，但是在其调用的</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nl">configureCell</span><span class="p">:</span> <span class="nl">atIndexPath</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">方法中依然用到了</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fetchedResultsController</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">：</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">```</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">configureCell</span><span class="p">:(</span><span class="bp">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">cell</span> <span class="nl">atIndexPath</span><span class="p">:(</span><span class="bp">NSIndexPath</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="bp">NSManagedObject</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[[</span><span class="n">object</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;timeStamp&quot;</span><span class="p">]</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
嗯看来NSManagedObject对象全都由这个fetchedResultsController提供咯，下面揭开它神秘的面纱：</p>

<p>&#8220;`
&ndash; (NSFetchedResultsController *)fetchedResultsController
{</p>

<pre><code>if (_fetchedResultsController != nil) {
    return _fetchedResultsController;
}

NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
// Edit the entity name as appropriate.
NSEntityDescription *entity = [NSEntityDescription entityForName:@"Event" inManagedObjectContext:self.managedObjectContext];
[fetchRequest setEntity:entity];

// Set the batch size to a suitable number.
[fetchRequest setFetchBatchSize:20];

// Edit the sort key as appropriate.
NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@"timeStamp" ascending:NO];
NSArray *sortDescriptors = @[sortDescriptor];

[fetchRequest setSortDescriptors:sortDescriptors];

// Edit the section name key path and cache name if appropriate.
// nil for section name key path means "no sections".
NSFetchedResultsController *aFetchedResultsController = [[NSFetchedResultsController alloc] initWithFetchRequest:fetchRequest managedObjectContext:self.managedObjectContext sectionNameKeyPath:nil cacheName:@"Master"];
aFetchedResultsController.delegate = self;
self.fetchedResultsController = aFetchedResultsController;

NSError *error = nil;
if (![self.fetchedResultsController performFetch:&amp;error]) {
     // Replace this implementation with code to handle the error appropriately.
     // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
    NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
    abort();
}

return _fetchedResultsController;
</code></pre>

<p>}
&#8220;`</p>

<p>嗯，之前提到过，Core Data在iOS平台使用了<code>NSFetchedResultsController</code>对象来简化对提取结果和表格视图的处理。<code>NSFetchedResultsController</code>对象被惰性创建并只在表格视图数据源方法有需要时才提取数据。你会看到在<code>NSFetchRequest</code>对象的配置中，使用了Event实体，并提供了一个<code>NSSortDescriptor</code>对象以让提取结果按timeStamp进行排序。最后通过<code>NSFetchRequest</code>对象和<code>managedObjectContext</code>（在AppDelegate中传入的<code>NSManagedObjectContext</code>实例）作为参数传入<code>NSFetchedResultsController</code>的初始化方法。（<code>sectionNameKeyPath</code>参数传入nil时表示只有一个section，你会发现<code>NSFetchedResultsController</code>从数据库获取的结果跟<code>UITableView</code>需要的数据格式相同，都通过<code>NSIndexPath</code>地址来获取一条数据的内容）<br/>
<code>NSFetchedResultsController</code>也有它的代理，将<code>MasterViewController</code>设置为其代理，这样在fetched results 发生变化时，<code>MasterViewController</code>中实现的<code>NSFetchedResultsControllerDelegate</code>方法会被调用：</p>

<p>&#8220;`
&ndash; (void)controllerWillChangeContent:(NSFetchedResultsController *)controller
{</p>

<pre><code>[self.tableView beginUpdates];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)controller:(NSFetchedResultsController *)controller didChangeSection:(id <NSFetchedResultsSectionInfo>)sectionInfo
         atIndex:(NSUInteger)sectionIndex forChangeType:(NSFetchedResultsChangeType)type
{
  switch(type) {
      case NSFetchedResultsChangeInsert:
          [self.tableView insertSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
          break;</p>

<pre><code>  case NSFetchedResultsChangeDelete:
      [self.tableView deleteSections:[NSIndexSet indexSetWithIndex:sectionIndex] withRowAnimation:UITableViewRowAnimationFade];
      break;
</code></pre>

<p>  }
}</p></li>
<li><p>(void)controller:(NSFetchedResultsController <em>)controller didChangeObject:(id)anObject
     atIndexPath:(NSIndexPath </em>)indexPath forChangeType:(NSFetchedResultsChangeType)type
    newIndexPath:(NSIndexPath <em>)newIndexPath
{
  UITableView </em>tableView = self.tableView;</p>

<p>  switch(type) {
      case NSFetchedResultsChangeInsert:
          [tableView insertRowsAtIndexPaths:@[newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
          break;</p>

<pre><code>  case NSFetchedResultsChangeDelete:
      [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
      break;

  case NSFetchedResultsChangeUpdate:
      [self configureCell:[tableView cellForRowAtIndexPath:indexPath] atIndexPath:indexPath];
      break;

  case NSFetchedResultsChangeMove:
      [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
      [tableView insertRowsAtIndexPaths:@[newIndexPath] withRowAnimation:UITableViewRowAnimationFade];
      break;
</code></pre>

<p>  }
}</p></li>
<li><p>(void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
  [self.tableView endUpdates];
}</p></li>
</ul>


<p>/*
// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed.</p>

<ul>
<li>(void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
 // In the simplest, most efficient, case, reload the table view.
 [self.tableView reloadData];
}</li>
</ul>


<p>&#8220;`</p>

<p>相对于之前<code>UITableViewDataSource</code>协议方法对<code>NSFetchedResultsController</code>对象中数据的修改（通过<code>NSManagedObject</code>对象做载体），<code>NSFetchedResultsControllerDelegate</code>协议方法会在察觉到数据修改后被调用，用于产生tableview操作数据后对应的动画效果。</p>

<p>可能你会觉得有些混乱，这里贴上几张图梳理下各个类的关系和结构：</p>

<p><img src="http://yulingtianxia.qiniudn.com/140353388301.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353389167.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353388423.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353389646.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353389047.png" alt="" /></p>

<p><img src="http://yulingtianxia.qiniudn.com/140353388523.jpg" alt="" /></p>

<p>最后，找到<code>insertNewObject</code>方法，当用户尝试加入一个对象到表视图时，该方法将被调用。接着你将看到如下的处理过程：</p>

<ul>
<li>获得一个<code>NSManagedObjectContext</code>对象；</li>
<li>决定创建新对象的实体；</li>
<li>根据实体名称创建一个新的<code>NSManagedObject</code>对象并将其插入到<code>NSManagedObjectContext</code>对象；</li>
<li>对新创建的<code>NSManagedObject</code>对象设置timeStamp属性值</li>
<li><code>NSManagedObjectContext</code>对象执行保存。</li>
</ul>


<p>当上下文执行保存，新的对象将被写到持久存储区中。这是如此简单！</p>

<p>DetailViewController的内容比较简单，不在叙述，到此结束，新建Core Data的模版工程代码已经解析完毕了。在下一期文章中将会亲手修改代码，探索Core Data更多的使用技巧。</p>

<h2>总结</h2>

<p>Core Data框架基本的5个类：：NSPersistentStoreCoordinator、NSManagedObjectContext、NSManagedObjectModel、NSEntityDescription、NSManagedObject。</p>

<ul>
<li><p>NSPersistentStoreCoordinator持久化存储协调器（简称协调器）：负责从磁盘加载数据和将数据写入磁盘。协调器可以处理多种格式的数据库文件（NSPersistentStore），如二进制文件，XML文件、SQLite文件。你也可以实现自己的数据库文件格式（使用NSAtomicStore和NSIncrementalStore类），理论上你可以实现打开World或Photoshop文件的协调器。</p></li>
<li><p>NSEntityDescription实体描述（简称实体）：实体可以被看做是NSManagedObject对象的“class”。实体定义了一个NSManagedObject对象所拥有的所有属性（NSAttributeDescription）,关系（NSRelationshipDescription），提取属性（NSFetchedPropertyDescription）。</p></li>
<li><p>NSManagedObjectContext托管对象上下文（简称上下文）：上下文是内存中的一块暂存区域。查询对象（使用NSFetchRequest），创建对象，删除对象等操作都是在上下文中进行。在上下文没有保存之前，对数据的任何修改都只记录在暂存区中，不会影响磁盘上的数据。你可以创建多个上下文，但整个程序只能创建一个NSPersstentStoreCoordinator对象。</p></li>
<li><p>NSManagedObject托管对象：Core Data的核心单元。模型对象的数据被持有在NSManagedObject对象中。每一个NSManagedObject对象都对应一个实体（就像每一个对象都有一个类）</p></li>
<li><p>NSManagedObjectModel托管对象模型：NSManagedObjectModel通常被定义在一个.mom文件中，文件中保存了所有实体的定义。NSManagedObjectModel and the NS*Description 类完整定义了Core Data模型应该/可以包含的内容。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-04-13T18:13:57+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Double Dispatch模式及其在iOS开发中实践]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan/"/>
    <updated>2014-04-13T15:51:03+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/13/double-dispatchmo-shi-ji-qi-zai-ioskai-fa-zhong-shi-zhan</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>在一个太空大战游戏中，导弹可以撞向飞船，也可能撞向行星，所以在碰撞检测的时候就需要判断碰撞的结果。假设游戏有四种物体：飞船，陨石，行星，导弹，那么就产生了<code>4*3/2+4</code>种情形（一枚导弹撞上另一枚导弹）。这种排列组合计算出的结果会随着物体种类N的增多爆炸性增长，如果这个时候还用一堆if－else来检测碰撞，那真是<code>Naive</code>了。这时我们可以利用面向对象语言的多态性质来在程序运行时动态绑定，因为碰撞检测是一种“双向选择”，所以我们需要<code>double dispatch</code>（双分派），<code>Visitor</code>模式就是<code>double dispatch</code>的一种应用。<br/>
<img src="http://yulingtianxia.com/images/blog/doubledispatch.jpg" alt="Visitor模式" /></p>

<p>DD模式适合于处理多个对象之间的相互作用。假如不用DD模式的话，那么每个对象跟别的对象发生关系时，就必须辛辛苦苦的进行if&hellip;else&hellip;枚举，因为它并不知道对方是何神圣。DD模式的引入解决了这个问题，其实说白了就是利用语言内置的虚函数机制来替你干活，把工作移交给编译器去做了。</p>

<h2>本文内容</h2>

<ul>
<li>C++中的Double Dispatch实例</li>
<li>Java中的Double Dispatch实例</li>
<li>Objective-C中实现碰撞检测用到的Visitor模式</li>
</ul>


<!-- more-->


<h2>C++中的Double Dispatch实例</h2>

<p>本节内容摘自<a href="http://www.cnblogs.com/west-link/archive/2011/07/26/2116887.html">这里</a><br/>
我们先从字面上去理解它吧，直观地说，它指的是两次dispatch。这里的dispatch指的是什么呢？举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Event</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="k">public</span><span class="o">:</span>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">PrintName</span><span class="p">()</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>                <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;我是通用事件&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">class</span> <span class="nc">KeyEvent</span><span class="o">:</span><span class="k">public</span> <span class="n">Event</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span><span class="o">:</span>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">PrintName</span><span class="p">()</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>                <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;我是按键事件&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">class</span> <span class="nc">ClickEvent</span><span class="o">:</span><span class="k">public</span> <span class="n">Event</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="k">public</span><span class="o">:</span>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">PrintName</span><span class="p">()</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>                <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;我是单击事件&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>多态性是动态的，被调用的方法由对象的真正类型确定，这个过程就被称之为dispatch。例如在C++中，每个对象都有一个虚函数表，当用基类的类型引用子类对象时，虚函数指针指向的是子类的虚函数表，调用的虚函数都是子类中的版本，所以下面代码输出的是：“我是按键事件”，这就算是一次dispatch的过程，即根据对象类型来动态确定调用哪个函数的过程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Event</span><span class="o">*</span> <span class="n">pEvent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyEvent</span><span class="p">();</span>
</span><span class='line'><span class="n">pEvent</span><span class="o">-&gt;</span><span class="n">PrintName</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>什么时候会用到两次dispatch呢? 继续往下看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">EventRecorder</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="k">public</span><span class="o">:</span>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">Event</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>               <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;使用EventRecorder记录通用事件&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>               <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;使用EventRecorder记录按键事件&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">ClickEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>               <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;使用EventRecorder记录单击事件&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">class</span> <span class="nc">AdvanceEventRecorder</span><span class="o">:</span><span class="k">public</span> <span class="n">EventRecorder</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="k">public</span><span class="o">:</span>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">Event</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>               <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;使用高级EventRecorder记录通用事件&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">KeyEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>               <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;使用高级EventRecorder记录按键事件&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>           <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">ClickEvent</span><span class="o">*</span> <span class="n">event</span><span class="p">)</span>
</span><span class='line'>           <span class="p">{</span>
</span><span class='line'>               <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;使用高级EventRecorder记录单击事件&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这两个类中分别包含三个重载函数，多态是动态的，而函数重载则是静态的，它在编译时期就确定下来了，所以，下面代码片段的运行结果并不是我们所期望的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">EventRecorder</span><span class="o">*</span> <span class="n">pRecorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdvanceEventRecorder</span><span class="p">();</span>
</span><span class='line'><span class="n">Event</span><span class="o">*</span> <span class="n">pEvent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyEvent</span><span class="p">();</span>
</span><span class='line'><span class="n">pRecorder</span><span class="o">-&gt;</span><span class="n">RecordEvent</span><span class="p">(</span><span class="n">pEvent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
输出内容为：使用高级EventRecorder记录通用事件<br/>
实际上，在这个场景中，我们期望调用的是：AdvanceEventRecorder::RecordEvent(KeyEvent* event)<br/>
下面我们使用Double Dispatch设计模式来达到上面的代码片段的目的，在所有Event对象中增加下面的函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>   <span class="k">virtual</span> <span class="kt">void</span> <span class="n">RecordEvent</span><span class="p">(</span><span class="n">EventRecorder</span><span class="o">*</span> <span class="n">recorder</span><span class="p">)</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="n">recorder</span><span class="o">-&gt;</span><span class="n">RecordEvent</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
下面的代码片段将输出：使用高级EventRecorder记录按键事件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">EventRecorder</span><span class="o">*</span> <span class="n">pRecorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AdvanceEventRecorder</span><span class="p">();</span>
</span><span class='line'>      <span class="n">Event</span><span class="o">*</span> <span class="n">pEvent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KeyEvent</span><span class="p">();</span>
</span><span class='line'>      <span class="n">pEvent</span><span class="o">-&gt;</span><span class="n">RecordEvent</span><span class="p">(</span><span class="n">pRecorder</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可以看出，第一次dispatch正确地找到了<code>KeyEvent</code>的<code>RecordEvent(EventRecorder* recorder)</code>，第二次dispatch找到了<code>AdvanceEventRecorder</code>的<code>RecordEvent(KeyEvent* event)</code>。
   Visitor模式就是对Double Dispatch的应用，另外，在碰撞检测算法中也会经常用到。</p>

<h2>Java中的Double Dispatch实例</h2>

<p>本节参考自<a href="http://www.blogjava.net/chaocai/archive/2009/02/19/255640.html">这里</a>
相对于C++中使用继承来说，Java提供的接口和函数重载让Double Dispatch模式更容易实现<br/>
1 根据对象来选择行为问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Event</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlueEvent</span> <span class="kd">implements</span> <span class="n">Event</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedEvent</span> <span class="kd">implements</span> <span class="n">Event</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Handler</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Event</span> <span class="n">event</span><span class="o">){</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It is event&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">RedEvent</span> <span class="n">event</span><span class="o">){</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It is RedEvent&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">BlueEvent</span> <span class="n">event</span><span class="o">){</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It is BlueEvent&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Event</span> <span class="n">evt</span><span class="o">=</span><span class="k">new</span> <span class="n">BlueEvent</span><span class="o">();</span>
</span><span class='line'><span class="k">new</span> <span class="nf">Handler</span><span class="o">().</span><span class="na">handle</span><span class="o">(</span><span class="n">evt</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你认为运行结果是什么呢？<br/>
结果：It is event<br/>
是不是有点出乎意料，不是It is BlueEvent，<strong>这是因为Overload并不支持在运行时根据参数的运行时类型来绑定方法</strong>，所以要执行哪个方法是在编译时就选定了的。  <br/>
2 Double Dispatch Pattern<br/>
由于Java,C++及C#都具有上述局限，通常我们只能通过Switch或if结构来实现，当然这种实现方式既不优雅而且影响代码的可维护性。<br/>
通过以下的Double Dispatch Pattern便可以优雅的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Event</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">injectHandler</span><span class="o">(</span><span class="n">EventHandler</span> <span class="n">v</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlueEvent</span> <span class="kd">implements</span> <span class="n">Event</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">injectHandler</span><span class="o">(</span><span class="n">EventHandler</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedEvent</span> <span class="kd">implements</span> <span class="n">Event</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">injectHandler</span><span class="o">(</span><span class="n">EventHandler</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventHandler</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">BlueEvent</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It is BlueEvent&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">RedEvent</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;It is RedEvent&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">Event</span> <span class="n">evt</span><span class="o">=</span><span class="k">new</span> <span class="n">BlueEvent</span><span class="o">();</span>
</span><span class='line'><span class="n">evt</span><span class="o">.</span><span class="na">injectHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">EventHandler</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Objective-C中实现碰撞检测用到的Visitor模式</h2>

<p>虽然OC不支持函数重载，但是其独有的SEL类型可以很好的解决这个问题<br/>
感谢kouky提供的iOS上碰撞检测的<a href="https://github.com/kouky/iOS-SpriteKit-Pong">Demo</a>，这里他用到了Visitor模式<br/>
由于判断物体类型是用一个32位掩码来标记，所以这里不可避免的要用到if语句，这不代表它不是动态绑定，因为if语句是在初始化方法<code>+ (id)contactVisitorWithBody:(SKPhysicsBody *)body forContact:(SKPhysicsContact *)contact</code>中其作用的，只是为了判断物体类型，而不是判断碰撞两者的组合类型<br/>
可以参考我写的例子<a href="https://github.com/yulingtianxia/MyFirstGame/tree/master/ColorAtom">ColorAtom</a></p>

<p>首先新建一个访问者基本类<code>ContactVisitor</code>，其本质为对SKPhysicsBody和SKPhysicsContact对象的封装，而SKPhysicsContact在本例中虽未用到（因为碰撞检测后啥也没干，只输出了碰撞双方name），但其保存着碰撞坐标等信息，也很重要。两次dispatch都是在访问者基本类实现的，而碰撞后具体操作则卸载了访问者具体类（如AtomNodeContactVisitor）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//  ContactVisitor.h</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;SpriteKit/SpriteKit.h&gt;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">ContactVisitor</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="n">body</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">SKPhysicsContact</span> <span class="o">*</span><span class="n">contact</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">contactVisitorWithBody:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span> <span class="nf">forContact:</span><span class="p">(</span><span class="n">SKPhysicsContact</span> <span class="o">*</span><span class="p">)</span><span class="nv">contact</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">visit:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>属性body即为访问者的SKPhysicsBody，而方法<code>visit:</code>的参数为被访问者的SKPhysicsBody<br/>
<code>contactVisitorWithBody:forContact:</code>方法的作用是根据掩码类型初始化对应类型的访问者具体类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ContactVisitor.m</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ContactVisitor.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;NodeCategories.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;AtomNodeContactVisitor.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;PlayFieldSceneContactVisitor.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">ContactVisitor</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">contactVisitorWithBody:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span> <span class="nf">forContact:</span><span class="p">(</span><span class="n">SKPhysicsContact</span> <span class="o">*</span><span class="p">)</span><span class="nv">contact</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//第一次dispatch，通过node类别返回对应的实例</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">body</span><span class="p">.</span><span class="n">categoryBitMask</span><span class="o">&amp;</span><span class="n">AtomCategory</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[[</span><span class="n">AtomNodeContactVisitor</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBody:</span><span class="n">body</span> <span class="nl">forContact:</span><span class="n">contact</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">body</span><span class="p">.</span><span class="n">categoryBitMask</span><span class="o">&amp;</span><span class="n">PlayFieldCategory</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[[</span><span class="n">PlayFieldSceneContactVisitor</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBody:</span><span class="n">body</span> <span class="nl">forContact:</span><span class="n">contact</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithBody:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span> <span class="nf">forContact:</span><span class="p">(</span><span class="n">SKPhysicsContact</span> <span class="o">*</span><span class="p">)</span><span class="nv">contact</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_contact</span> <span class="o">=</span> <span class="n">contact</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_body</span> <span class="o">=</span> <span class="n">body</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">visit:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//第二次dispatch，通过构造方法名来执行对应方法</span>
</span><span class='line'>    <span class="c1">// 生成node的名字，比如&quot;AtomNode&quot;</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">bodyClassName</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithUTF8String:</span><span class="n">class_getName</span><span class="p">(</span><span class="n">body</span><span class="p">.</span><span class="n">node</span><span class="p">.</span><span class="n">class</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 生成方法名，比如&quot;visitAtomBody&quot;</span>
</span><span class='line'>    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">contactSelectorString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;visit&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">contactSelectorString</span> <span class="nl">appendString:</span><span class="n">bodyClassName</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">contactSelectorString</span> <span class="nl">appendString:</span><span class="s">@&quot;:&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">contactSelectorString</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//判断是否存在此方法</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">self</span> <span class="nl">respondsToSelector:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">performSelector:</span><span class="n">selector</span> <span class="nl">withObject:</span><span class="n">body</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>以访问者具体类以<code>AtomNodeContactVisitor</code>类为例，它继承自访问者基本类ContactVisitor</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  AtomNodeContactVisitor.h</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;ContactVisitor.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AtomNodeContactVisitor</span> : <span class="nc">ContactVisitor</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*Atom访问了Atom，同类碰撞*/</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">visitAtomNode:</span><span class="p">(</span><span class="n">SKPhysicsBody</span><span class="o">*</span><span class="p">)</span> <span class="n">anotherAtomBody</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*Atom访问了边界，也就是球撞墙上了*/</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">visitPlayFieldScene:</span><span class="p">(</span><span class="n">SKPhysicsBody</span><span class="o">*</span><span class="p">)</span> <span class="n">playfieldBody</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在处理碰撞后的visitXXX方法中，我将碰撞双方的访问者和被访问者的关系输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  AtomNodeContactVisitor.m</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;AtomNodeContactVisitor.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;AtomNode.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;PlayFieldScene.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">AtomNodeContactVisitor</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">visitAtomNode:</span><span class="p">(</span><span class="n">SKPhysicsBody</span><span class="o">*</span><span class="p">)</span> <span class="n">anotherAtomBody</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AtomNode</span> <span class="o">*</span><span class="n">thisAtom</span> <span class="o">=</span> <span class="p">(</span><span class="n">AtomNode</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">AtomNode</span> <span class="o">*</span><span class="n">anotherAtom</span> <span class="o">=</span> <span class="p">(</span><span class="n">AtomNode</span><span class="o">*</span><span class="p">)</span><span class="n">anotherAtomBody</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//处理碰撞后的结果</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@-&gt;%@&quot;</span><span class="p">,</span><span class="n">thisAtom</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="n">anotherAtom</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">visitPlayFieldScene:</span><span class="p">(</span><span class="n">SKPhysicsBody</span><span class="o">*</span><span class="p">)</span> <span class="n">playfieldBody</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AtomNode</span> <span class="o">*</span><span class="n">atom</span> <span class="o">=</span> <span class="p">(</span><span class="n">AtomNode</span><span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PlayFieldScene</span> <span class="o">*</span><span class="n">playfield</span> <span class="o">=</span> <span class="p">(</span><span class="n">PlayFieldScene</span><span class="o">*</span><span class="p">)</span> <span class="n">playfieldBody</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@-&gt;%@&quot;</span><span class="p">,</span><span class="n">atom</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="n">playfield</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
下面建立被访问者类，其本质就是对SKPhysicsBody的封装，并接受Visitor的注入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  VisitablePhysicsBody.h</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;ContactVisitor.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">VisitablePhysicsBody</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="n">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">initWithBody:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">acceptVisitor:</span><span class="p">(</span><span class="n">ContactVisitor</span> <span class="o">*</span><span class="p">)</span><span class="nv">visitor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>关键的一步：在<code>acceptVisitor:</code>方法中调用访问者的<code>visit:</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  VisitablePhysicsBody.m</span>
</span><span class='line'><span class="c1">//  ColorAtom</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by 杨萧玉 on 14-4-13.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 杨萧玉. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;VisitablePhysicsBody.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">VisitablePhysicsBody</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithBody:</span><span class="p">(</span><span class="n">SKPhysicsBody</span> <span class="o">*</span><span class="p">)</span><span class="nv">body</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_body</span> <span class="o">=</span> <span class="n">body</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">acceptVisitor:</span><span class="p">(</span><span class="n">ContactVisitor</span> <span class="o">*</span><span class="p">)</span><span class="nv">visitor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">visitor</span> <span class="nl">visit:</span><span class="n">self</span><span class="p">.</span><span class="n">body</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可能有人会有疑问，<code>visit:</code>方法穿入的参数类型永远是<code>SKPhysicsBody</code>，这哪里是动态绑定啊，其实是由于本例的特殊性，碰撞检测时区分物体类型不是靠<code>SKPhysicsBody</code>子类化来区分和绑定，而是靠SKPhysicsBody类中的<code>categoryBitMask</code>属性来区分，这也就免不了需要在<code>ContactVisitor</code>初始化的时候通过if语句来判断具体初始化哪个子类<br/>
最后，在Scene实现SKPhysicsContactDelegate协议</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark SKPhysicsContactDelegate</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didBeginContact:</span><span class="p">(</span><span class="n">SKPhysicsContact</span> <span class="o">*</span><span class="p">)</span><span class="nv">contact</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//A-&gt;B</span>
</span><span class='line'>    <span class="n">ContactVisitor</span> <span class="o">*</span><span class="n">visitorA</span> <span class="o">=</span> <span class="p">[</span><span class="n">ContactVisitor</span> <span class="nl">contactVisitorWithBody:</span><span class="n">contact</span><span class="p">.</span><span class="n">bodyA</span> <span class="nl">forContact:</span><span class="n">contact</span><span class="p">];</span>
</span><span class='line'>    <span class="n">VisitablePhysicsBody</span> <span class="o">*</span><span class="n">visitableBodyB</span> <span class="o">=</span> <span class="p">[[</span><span class="n">VisitablePhysicsBody</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBody:</span><span class="n">contact</span><span class="p">.</span><span class="n">bodyB</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">visitableBodyB</span> <span class="nl">acceptVisitor:</span><span class="n">visitorA</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//B-&gt;A</span>
</span><span class='line'>    <span class="n">ContactVisitor</span> <span class="o">*</span><span class="n">visitorB</span> <span class="o">=</span> <span class="p">[</span><span class="n">ContactVisitor</span> <span class="nl">contactVisitorWithBody:</span><span class="n">contact</span><span class="p">.</span><span class="n">bodyB</span> <span class="nl">forContact:</span><span class="n">contact</span><span class="p">];</span>
</span><span class='line'>    <span class="n">VisitablePhysicsBody</span> <span class="o">*</span><span class="n">visitableBodyA</span> <span class="o">=</span> <span class="p">[[</span><span class="n">VisitablePhysicsBody</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBody:</span><span class="n">contact</span><span class="p">.</span><span class="n">bodyA</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">visitableBodyA</span> <span class="nl">acceptVisitor:</span><span class="n">visitorB</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
物理老师总说力的作用时相互的，所以我们需要两次访问：A访问B和B访问A，但是这样会调用两次visitXXX方法，原则上这两个逻辑上对称的方法我们只需要实现其中一个就可以，但必须得像上面代码一样，A->B和B->A缺一不可，因为碰撞的时候我们不知道bodyA和bodyB的类型，也就无法判断visitXXX方法是A->B时能调用还是B->A时能调用到<br/>
当然，你也可以两个visit方法都实现，但只对visitor的node做操作，或只对visitable的node操作，总之仁者见仁智者见智啦</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS的.gitignore]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/09/iosde-dot-gitignore/"/>
    <updated>2014-04-09T16:59:19+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/09/iosde-dot-gitignore</id>
    <content type="html"><![CDATA[<p>在多人一起开发XCode项目的时候，很多中间生成的临时文件并不需要加入到版本控制当中，所以记录下XCode需要用到的<code>.gitignore</code>文件</p>

<!-- more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Xcode
</span><span class='line'>.DS_Store
</span><span class='line'>*/build/*
</span><span class='line'>*.pbxuser
</span><span class='line'>!default.pbxuser
</span><span class='line'>*.mode1v3
</span><span class='line'>!default.mode1v3
</span><span class='line'>*.mode2v3
</span><span class='line'>!default.mode2v3
</span><span class='line'>*.perspectivev3
</span><span class='line'>!default.perspectivev3
</span><span class='line'>xcuserdata
</span><span class='line'>profile
</span><span class='line'>*.moved-aside
</span><span class='line'>DerivedData
</span><span class='line'>.idea/
</span><span class='line'>*.hmap
</span><span class='line'>*.xccheckout
</span><span class='line'>
</span><span class='line'>#CocoaPods
</span><span class='line'>Pods</span></code></pre></td></tr></table></div></figure>


<p>
还有需要记住一点的是，使用IB进行界面设计，无论是xib文件还是storyboard，同一时间只能右一个人更改一个Window或VC，虽然XCode5之后xib和storyboard可读性大大增强，但是仍不像Android开发界面的xml格式那么普及，还是小心谨慎为好</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS刮刮卡的实现]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/09/iosgua-gua-qia-de-shi-xian/"/>
    <updated>2014-04-09T15:38:52+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/09/iosgua-gua-qia-de-shi-xian</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>去年在实习的期间，需要写一个类似刮刮乐的小功能，当时是从网上下载的demo，后来经过自己研读代码和debug后，终于整理出了一套比较easy的实现方法</p>

<!-- more-->


<h2>正文</h2>

<p>需要源码的可以在<a href="https://github.com/yulingtianxia/ImageMask">这里</a>下载<br/>
我用的是从网上下载的<code>ImageMaskView</code>类，这个类还调用了工具类<code>Matrix</code>以及<code>PointTransforms.h</code>,使用非ARC实现并且在<code>ImageMaskView</code>类中使用了Objective－C和C＋＋混编，废话不多说，介绍下具体搭建方法吧<br/>
首先需要使用IB在你的工程的某个ViewController中加入一个UIImageView，任选一张图片赋予它image属性，并在Identity Inspector中将其类型设置成我们的自定义类<code>ImageMaskView</code><br/>
<img src="http://yulingtianxia.com/images/blog/QQ20140409-0@2x.png" alt="QQ20140409-0@2x" /><br/>
我选的是一个美女图片，这张图片将会作为一个Mask来遮挡住它“底下”的View（在这之前我已经在美女图片底下放置了一个UIImageView作为背景，当然你也可以根据你的需要自定义其他的背景）
上素材！下面分别是我的背景图片和遮罩图片  <br/>
 <img src="http://yulingtianxia.com/images/blog/QQ20140409-2@2x.png" alt="QQ20140409-2@2x" /><img src="http://yulingtianxia.com/images/blog/QQ20140409-3@2x.png" alt="QQ20140409-3@2x" /><br/>
下面就是通过IB将ImageMaskView按住Ctrl拖拽到ViewController.h中作为一个新的属性，属性名自己起，并将其设置为strong类型<br/>
<img src="http://yulingtianxia.com/images/blog/QQ20140409-1@2x.png" alt="QQ20140409-1@2x" /><br/>
然后在ViewController.m中重写viewDidLoad</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@synthesize</span> <span class="n">FengjieMask</span><span class="p">;</span><span class="c1">//是的，它是个ImageMaskView类的对象，名字很古怪吧</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>    <span class="n">FengjieMask</span><span class="p">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span><span class="c1">//设置画笔半径</span>
</span><span class='line'>    <span class="p">[</span><span class="n">FengjieMask</span> <span class="n">beginInteraction</span><span class="p">];</span><span class="c1">//初始化方法</span>
</span><span class='line'>    <span class="n">FengjieMask</span><span class="p">.</span><span class="n">imageMaskFilledDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span><span class="c1">//将代理设置为当前的VC</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里需要特别说明的是，<code>radius</code>是刮刮卡刮奖的时候画笔的半径，<code>imageMaskFilledDelegate</code>是一个代理，协议类型为<code>ImageMaskFilledDelegate</code>，只声明了一个方法<code>- (void) imageMaskView:(ImageMaskView *)maskView clearPercentDidChanged:(float)clearPercent</code>，这个方法在刮刮卡被刮下的面积变化时被调用，下面让我们的VC实现这个协议，并实现这个方法<br/>
先在VC头文件增加<code>&lt;ImageMaskFilledDelegate&gt;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">YXYViewController</span> : <span class="nc">UIViewController</span><span class="o">&lt;</span><span class="n">ImageMaskFilledDelegate</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
然后实现协议方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="err">#</span><span class="n">pragma</span> <span class="n">mark</span> <span class="n">ImageMaskFilledDelegate</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">imageMaskView:</span><span class="p">(</span><span class="n">ImageMaskView</span> <span class="o">*</span><span class="p">)</span><span class="n">maskView</span> <span class="nl">clearPercentDidChanged:</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">clearPercent</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">clearPercent</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">UIView</span> <span class="nl">animateWithDuration:</span><span class="mi">2</span>
</span><span class='line'>                         <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>                             <span class="n">FengjieMask</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>                             <span class="n">FengjieMask</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                             <span class="n">FengjieMask</span><span class="p">.</span><span class="n">imageMaskFilledDelegate</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>                         <span class="p">}</span>
</span><span class='line'>                         <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                         <span class="p">}];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <br/>
上面的代码先是做了个判断，当被涂刮的面积超过50%的时候，产生一个时长2秒的动画，让ImageMaskView渐渐变透明，传入的animations参数是个block块<br/>
好的，现在可以运行啦，我的demo效果如下<br/>
<img src="http://yulingtianxia.com/images/blog/QQ20140409-4@2x.png" alt="QQ20140409-4@2x" /></p>

<h2>后记</h2>

<p>对iOS的Core Graphics不是很熟悉，还没有去深入看代码中的实现过程，不过修复了一个小bug：在UITouchPhaseBegan的时候刮开的圆形面积坐标错位了，并针对Retina和非Retina进行测试，效果都不错。以前用过其他的刮刮乐的代码，缺点是跟图片像素比之类的有关，显示效果很不好；但这个demo可以适配任意大小的Image而不用更改代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识block]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/08/block/"/>
    <updated>2014-04-08T16:41:39+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/08/block</id>
    <content type="html"><![CDATA[<h2><strong><span style="color: #339966;">前言</span></strong></h2>

<p>本文是小弟从<strong><span style="color: #339966;">破船</span></strong>大哥那转载来的，感觉比较经典，所以就收藏了，原文<a href="http://beyondvincent.com/blog/2013/07/08/98/">出处</a></p>

<p><img class="alignnone size-full wp-image-1563" alt="blocks_2x" src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks_2x.png" width="1140" height="420" /></p>

<hr />

<p>本文由<strong><span style="color: #339966;">破船</span></strong>译自<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/blocks.html" target="_blank"><span style="color: #339966; text-decoration: underline;">rypress</span></a></span></span></strong></p>

<!--more-->


<h2><strong><span style="color: #339966;">小引</span></strong></h2>

<p>本周末微博上朋友发了一个关于block的MV，只能说老外太逗了。大家也可以去看看怎么回事：<a href="http://blog.bignerdranch.com/3001-cocoa-got-blocks/" target="_blank"> <strong><span style="text-decoration: underline;"><span style="color: #339966; text-decoration: underline;">Cocoa Got Blocks</span></span></strong></a>。虽然之前也有接触过block，不过没有深入完整的学习过，借此机会来学习一下，顺便翻译几篇block相关的文章，本文是第一篇，算是block的入门。本文的最后延伸阅读给出了4篇相关文章，不出意外的话，本周大家能看到对应的中文版。</p>

<h2><strong><span style="color: #339966;">目录：</span></strong></h2>

<ul>
<li><strong><span style="color: #339966;">Block简介</span></strong></li>
<li><strong><span style="color: #339966;">Block的创建</span></strong></li>
<li><strong><span style="color: #339966;">不带参数的Block</span></strong></li>
<li><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></li>
<li><strong><span style="color: #339966;">修改非局部变量</span></strong></li>
<li><strong><span style="color: #339966;">Block作为函数的参数</span></strong></li>
<li><strong><span style="color: #339966;">定义Block类型</span></strong></li>
<li><strong><span style="color: #339966;">总结</span></strong></li>
<li><strong><span style="color: #339966;">延伸阅读</span></strong></li>
</ul>


<h3><strong><span style="color: #339966;">正文</span></strong></h3>

<h2><strong><span style="color: #339966;">Block简介</span></strong></h2>

<p>我们可以把Block当做Objective-C的匿名函数。Block允许开发者在两个对象之间将任意的语句当做数据进行传递，往往这要比引用定义在别处的函数直观。另外，block的实现具有封闭性(closure)，而又能够很容易获取上下文的相关状态信息。</p>

<hr />

<h2><strong><span style="color: #339966;">Block的创建</span></strong></h2>

<p>实际上，block使用了与<span style="text-decoration: underline;"><strong><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html" target="_blank"><span style="color: #339966; text-decoration: underline;">函数</span></a></span></strong></span>相同的机制：可以像声明函数一样，来声明一个bock变量；可以利用定义一个函数的方法来定义一个block；也可以将block当做一个函数来调用。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // Declare the block variable
        double (^distanceFromRateAndTime)(double rate, double time);

        // Create and assign the block
        distanceFromRateAndTime = ^double(double rate, double time) {
            return rate * time;
        };
        // Call the block
        double dx = distanceFromRateAndTime(35, 1.5);

        NSLog(@"A car driving 35 mph will travel "
              @"%.2f miles in 1.5 hours.", dx);
    }
    return 0;
}</pre>


<p>在上面的代码中，利用插入符(^)将distanceFromRateAndTime变量标记为一个block。就像声明函数一样，需要包含返回值的类型，以及参数的类型，这样编译器才能安全的进行强制类型转换。插入符(^)跟指针(例如 int *aPointer)前面的星号(*)类似——只是在声明的时候需要使用，之后用法跟普通的变量一样。</p>

<p>block的定义本质上跟函数一样——只不过不需要函数名。block以签名字符串开始：<sup>double</sup>(double rate, double time)标示返回一个double，以及接收两个同样为double的参数(如果不需要返回值，可以忽略掉)。在签名后面是一个大括弧({})，在这个括弧里面可以编写任意的语句代码，这跟普通的函数一样。</p>

<p>当把block赋值给distanceFromRateAndTime后，我们就可以像调用函数一样调用这个变量了。</p>

<h2><strong><span style="color: #339966;">不带参数的Block</span></strong></h2>

<p>如果block不需要任何的参数，那么可以忽略掉参数列表。另外，在定义block的时候，返回值的类型也是可选的，所以这样情况下，block可以简写为^ { … }：</p>

<pre class="wp-code-highlight prettyprint linenums:1">double (^randomPercent)(void) = ^ {
    return (double)arc4random() / 4294967295;
};
NSLog(@"Gas tank is %.1f%% full",
      randomPercent() * 100);</pre>


<p>在上面的代码中，利用内置的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/arc4random.3.html" target="_blank"><span style="color: #339966; text-decoration: underline;">arc4random()</span></a></span></span></strong>方法返回一个32位的整型随机数——为了获得0-1之间的一个值，通过除以arc4random()方法能够获取到的最大值(4294967295)。</p>

<p>到现在为止，block看起来可能有点像利用一种复杂的方式来定义一个方法。事实上，block是被设计为闭包的(closure)——这就提供了一种新的、令人兴奋的编程方式。</p>

<h2><strong><span style="color: #339966;">Block的闭包性(closure)</span></strong></h2>

<p>在block内部，可以像普通函数一样访问数据：局部变量、传递给block的参数，全局变量/函数。并且由于block具有<span style="color: #ff0000;"><strong>闭包性</strong></span>，所以还能访问<strong><span style="color: #ff0000;">非局部变量(non-local variable)</span></strong>。非局部变量定义在block之外，但是在block内部有它的作用域。例如，getFullCarName可以使用定义在block前面的make变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord</pre>


<p>非局部变量会以const变量被拷贝并存储到block中，也就是说block对其是只读的。如果尝试在block内部给make变量赋值，会抛出编译器错误。</p>

<div id="attachment_1546" class="wp-caption alignnone" style="width: 340px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png"><img class="size-full wp-image-1546" alt="const-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/const-non-local-variables.png" width="330" height="170" /></a><p class="wp-caption-text">
    以const拷贝的方式访问非局部变量
  </p>
</div>


<p>&nbsp;</p>

<p>以const拷贝的方式访问非局部变量，意味着block实际上并不是真正的访问了非局部变量——只不过在block中创建了非局部变量的一个快照。当定义block时，无论非局部变量的值是什么，都将被冻结，并且block会一直使用这个值，即使在之后的代码中修改了非局部变量的值。下面通过代码来看看，在创建好block之后，修改make变量的值，会发生什么：</p>

<pre class="wp-code-highlight prettyprint linenums:1">NSString *make = @"Honda";
NSString *(^getFullCarName)(NSString *) = ^(NSString *model) {
    return [make stringByAppendingFormat:@" %@", model];
};
NSLog(@"%@", getFullCarName(@"Accord"));    // Honda Accord

// Try changing the non-local variable (it won&#039;t change the block)
make = @"Porsche";
NSLog(@"%@", getFullCarName(@"911 Turbo")); // Honda 911 Turbo</pre>


<p>block的闭包性为block与上下文交互的时候带来极大的便利性，当block需要额外的数据时，可以避免使用参数——只需要简单的使用非局部变量即可。</p>

<h2><strong><span style="color: #339966;">修改非局部变量</span></strong></h2>

<p>冻结中的非局部变量是一个常量值，这也是一种默认的安全行为——因为这可以防止在block中的代码对非局部变量做了意外的修改。那么如果我们希望在block中对非局部变量值进行修改要如何做呢——用__block存储修饰符(storage modifier)来声明非局部变量：</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block NSString *make = @"Honda";</pre>


<p>这将告诉block对非局部变量做引用处理，在block外部make变量和内部的make变量创建一个直接的链接(direct link)。现在就可以在block外部修改make，然后反应到block内部，反过来，也是一样。</p>

<div id="attachment_1547" class="wp-caption alignnone" style="width: 270px">
  <a href="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png"><img class="size-full wp-image-1547" alt="mutable-non-local-variables" src="http://beyondvincent.com/wp-content/uploads/2013/07/mutable-non-local-variables.png" width="260" height="150" /></a><p class="wp-caption-text">
    通过引用的方式访问非局部变量
  </p>
</div>


<p>这跟普通函数中的<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://rypress.com/tutorials/objective-c/functions.html#static-local-variables" target="_blank"><span style="color: #339966; text-decoration: underline;">静态局部变量(static local variable)</span></a></span></span></strong>类似，用__block修饰符声明的变量可以记录着block多次调用的结果。例如下面的代码创建了一个block，在block中对i进行累加。</p>

<pre class="wp-code-highlight prettyprint linenums:1">__block int i = 0;
int (^count)(void) = ^ {
    i += 1;
    return i;
};
NSLog(@"%d", count());    // 1
NSLog(@"%d", count());    // 2
NSLog(@"%d", count());    // 3</pre>


<h2></h2>

<h2><strong><span style="color: #339966;">Block作为函数的参数</span></strong></h2>

<p>把block存储在变量中有时候非常有用，比如将其用作函数的参数。这可以解决类似函数指针能解决的问题，不过我们也可以定义内联的block，这样代码更加易读。<br/>
例如下面Car interface中声明了一个方法，该方法用来计算汽车的里程数。这里并没有强制要求调用者给该方法传递一个常量速度，相反可以改方法接收一个block——该block根据具体的时间来定义汽车的速度。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>上面代码中block的数据类型是double (^)(double time)，也就是说block的调用者需要传递一个double类型的参数，并且该block的返回值为double类型。注意：上面代码中的语法基本与本文开头介绍的block变量声明相同，只不过没有变量名字。<br/>
在函数的实现里面可以通过speedFunction来调用block。下面的示例通过算法计算出汽车行驶的大约距离。其中steps参数是由调用者确定的一个准确值。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.m
#import "Car.h"

@implementation Car

@synthesize odometer = _odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(double (^)(double time))speedFunction
                   steps:(int)numSteps {
    double dt = duration / numSteps;
    for (int i=1; i&lt;=numSteps; i++) {
        _odometer += speedFunction(i*dt) * dt;
    }
}

@end</pre>


<p>在下面的代码中，有一个main函数，在main函数中block定义在另一个函数的调用过程中。虽然理解其中的语法需要话几秒钟时间，不过这比起另外声明一个函数，再定义withVariableSpeed参数要更加直观。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// main.m
#import &lt;Foundation/Foundation.h&gt;
#import "Car.h"

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        Car *theCar = [[Car alloc] init];

        // Drive for awhile with constant speed of 5.0 m/s
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);

        // Start accelerating at a rate of 1.0 m/s^2
        [theCar driveForDuration:10.0
               withVariableSpeed:^(double time) {
                           return time + 5.0;
                       } steps:100];
        NSLog(@"The car has now driven %.2f meters", theCar.odometer);
    }
    return 0;
}</pre>


<p>上面利用一个简单的示例演示了block的通用性。在iOS的SDK中有许多API都利用了block的其它一些功能。<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/NSArray.html" target="_blank"><span style="color: #339966; text-decoration: underline;">NSArray</span></a></span></span></strong>的sortedArrayUsingComparator:方法可以使用一个block对元素进行排序，而<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/uiview/uiview.html" target="_blank"><span style="color: #339966; text-decoration: underline;">UIView</span></a></span></span></strong>的animateWithDuration:animations:方法使用了一个block来定义动画的最终状态。此外，block在并发编程中具有强大的作用。</p>

<h2><strong><span style="color: #339966;">定义Block类型</span></strong></h2>

<p>由于block数据类型的语法会很快把函数的声明搞得难以阅读，所以经常使用typedef对block的签名(signature)做处理。例如，下面的代码创建了一个叫做SpeedFunction的新类型，这样我们就可以对withVariableSpeed参数使用一个更加有语义的数据类型。</p>

<pre class="wp-code-highlight prettyprint linenums:1">// Car.h
#import &lt;Foundation/Foundation.h&gt;

// Define a new type for the block
typedef double (^SpeedFunction)(double);

@interface Car : NSObject

@property double odometer;

- (void)driveForDuration:(double)duration
       withVariableSpeed:(SpeedFunction)speedFunction
                   steps:(int)numSteps;

@end</pre>


<p>许多标准的Objective-C框架也使用了这样的技巧，例如<strong><span style="text-decoration: underline;"><span style="color: #339966;"><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_DataTypes/Reference/reference.html#//apple_ref/doc/c_ref/NSComparator" target="_blank"><span style="color: #339966; text-decoration: underline;">NSComparator</span></a></span></span></strong>。</p>

<h2><strong><span style="color: #339966;">总结</span></strong></h2>

<p>Block不仅提供了C函数同样的功能，而且block看起来更加直观。block可以定义为内联(inline)，这样在函数内部调用的时候就非常方便，由于block具有闭包性(closure)，所以block可以很容易获得上下文信息，而又不会对这些数据产生负面影响。</p>

<h2><strong><span style="color: #339966;">延伸阅读</span></strong></h2>

<ul>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 1</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 2</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/" target="_blank"><span style="color: #339966; text-decoration: underline;">A look inside blocks: Episode 3 (Block_copy)</span></a></span></strong></span></li>
<li><span style="text-decoration: underline;"><strong><span style="color: #339966; text-decoration: underline;"><a href="http://www.xs-labs.com/en/archives/articles/objc-blocks/" target="_blank"><span style="color: #339966; text-decoration: underline;">Closure and anonymous functions in Objective-C</span></a></span></strong></span></li>
</ul>


<p>&nbsp;</p>

<p>本文由<span style="text-decoration: underline;"><span style="color: #339966;"><strong><a href="http://beyondvincent.com/"><span style="color: #339966; text-decoration: underline;">破船</span></a></strong></span></span>翻译●转载请注明出处●<time datetime="2013-05-18T17:37:00+08:00" data-updated="true">2013-07-08</time></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS单例模式 or NSUserDefaults]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/07/iosdan-li-mo-shi-ornsuserdefaults/"/>
    <updated>2014-04-07T15:07:08+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/07/iosdan-li-mo-shi-ornsuserdefaults</id>
    <content type="html"><![CDATA[<p>本文内容：</p>

<ul>
<li>iOS的单例模式</li>
<li>NSUserDefaults的使用</li>
<li>总结：iOS单例模式 and NSUserDefaults</li>
</ul>


<!-- more-->


<h1>iOS的单例模式</h1>

<p>提起单例模式大家都不陌生，什么懒汉式，饿汉式，老汉式。。。扯远了</p>

<p>一开始觉得Objective－C中没有绝对的私有方法，该如何实现单例模式呢？后来觉得想多了，限制构造方法的使用式徒劳的，因为程序是人写的，既然是单例了，那就老老实实调用自己写的getInstance吧。Java笑了？一个反射打趴下！
在ARC诞生之前，可以通过重写<code>allocWithZone</code>方法等来实现，下面是苹果官方的单例写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">static</span> <span class="n">MyGizmoClass</span> <span class="o">*</span><span class="n">sharedGizmoManager</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">MyGizmoClass</span><span class="o">*</span><span class="p">)</span><span class="nf">sharedManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sharedGizmoManager</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span> <span class="c1">// assignment not done here</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sharedGizmoManager</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">allocWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">sharedGizmoManager</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sharedGizmoManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">allocWithZone:</span><span class="n">zone</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">sharedGizmoManager</span><span class="p">;</span>  <span class="c1">// assignment and return on first allocation</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">//on subsequent allocation attempts return nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">retain</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">unsigned</span><span class="p">)</span><span class="nf">retainCount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UINT_MAX</span><span class="p">;</span>  <span class="c1">//denotes an object that cannot be released</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">release</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//do nothing</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">autorelease</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在ARC时代，程序员不用费心计算static的实例被引用多少次，需要release巴拉巴拉。。。而自从有了GCD，iOS的单例模式变得超级简单了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">Singleton</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">id</span> <span class="n">instance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
instance为将被实例化的对象，为了让instance只被实例化一次，用到了GCD(Grand Central Dispatch)中的<code>dispatch_once</code>方法。该方法有两个参数，第二个参数是一个block，只会被执行一次。而第一个参数是一个谓词，用于判断代码块（block）是否执行完，这个谓词只能是全局或静态变量，类型为dispatch_once_t，其实dispatch_once_t就是long类型。你可以理解为第一个参数是个标识位，能保证记录第二个参数block的执行情况，即使是在最复杂的多线程并发执行的情况下，也就是说，GCD的这个方法是线程安全的。如果你对block这种类型比较陌生，可以把它暂时当作函数指针，当然，它比函数指针还要强大。<br/>
你可以重写init方法来实现饿汉式单例，也可以自定义initwithXXX来在需要实例化的时候调用之，实现懒汉式单例。</p>

<h1>NSUserDefaults</h1>

<p>很多APP启动时需要读取上次运行保存的一些状态，如何保存呢？Core Data，SQlite和UIDocuments未免杀鸡用牛刀了，而<code>NSUserDefaults</code>很适用于快速读取小规模的数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">standardDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
写入数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithString</span> <span class="s">@&quot;hahaha&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="nl">setObject:</span><span class="n">string</span> <span class="nl">forKey:</span><span class="s">@&quot;myKey&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="n">synchronize</span><span class="p">];</span><span class="c1">//写完别忘了同步</span>
</span></code></pre></td></tr></table></div></figure>


<p>
读取数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">standardDefaults</span> <span class="nl">objectForKey:</span><span class="s">&quot;myKey&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>NSUserDefaults</code>可以很好地理解成键值对</p>

<p>有时在写数据之前，想判断下这个健是否已经设置过默认值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">standardDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">standardDefaults</span> <span class="nl">stringForKey:</span><span class="s">@&quot;favoriteColor&quot;</span><span class="p">]</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="nl">setObject:</span><span class="s">@&quot;Green&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;favoriteColor&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
其实大可不必这么麻烦，摘自<a href="http://beyondvincent.com/blog/2013/04/20/13/">破船</a>推荐的方法<code>registerDefaults:</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">standardDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="nl">registerDefaults:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;favoriteColor&quot;</span><span class="o">:</span> <span class="s">@&quot;Green&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
每次程序启动的时候调用<code>registerDefaults:</code> 方法都是安全的。完全可以将这个方法的调用放到<code>applicationDidFinishLaunching:</code>方法中. 这个方法永远都不会覆盖用户设置的值。<br/>
但是并不是所有类型的对象都能够直接放入NSUserDefaults，NSUserDefaults只支持： NSString, NSNumber, NSDate, NSArray, NSDictionary<br/>
解决方法：让这个自定义的类实现<NSCoding>协议，举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//SNShops.h</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SNShops</span> : <span class="nc">NSObject</span><span class="o">&lt;</span><span class="n">NSCoding</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">sid</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">initWithCoder:</span> <span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">coder</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">encodeWithCoder:</span> <span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">coder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//SNShops.m</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SNShops</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">initWithCoder:</span> <span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">coder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="p">[</span><span class="n">coder</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;sid&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="p">[</span><span class="n">coder</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">encodeWithCoder:</span> <span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">coder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">coder</span> <span class="nl">encodeObject:</span><span class="n">self</span><span class="p">.</span><span class="n">sid</span> <span class="nl">forKey:</span><span class="s">@&quot;sid&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">coder</span> <span class="nl">encodeObject:</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后再存取时通过<code>NSData</code>做载体：<br/>
存入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">standardDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'><span class="n">SNShops</span> <span class="o">*</span><span class="n">shop</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SNShops</span> <span class="n">alloc</span><span class="p">]</span><span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">shopData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="nl">archivedDataWithRootObject:</span><span class="n">shop</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="nl">setObject:</span><span class="n">shopData</span> <span class="nl">forKey:</span><span class="s">@&quot;myshop&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">standardDefaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
读取</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">newshopData</span> <span class="o">=</span> <span class="p">[</span><span class="n">standardDefaults</span> <span class="nl">objectForKey:</span><span class="s">&quot;myshop&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">SNShops</span> <span class="o">*</span><span class="n">newshop</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedUnarchiver</span> <span class="nl">unarchiveObjectWithData:</span><span class="n">newshopData</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>总结：iOS单例模式 and NSUserDefaults</h1>

<p>单例模式虽然能存入任何类型的对象，但是它会随着程序的挂起而消亡。而NSUserDefaults在读取自定义类型时有些繁琐，降低编码效率和可读性，好处是程序下次启动依然能读取到上次的状态。<br/>
笔者在实际应用中采取了二者结合的模式：让单例模式的类实现<NSCoding>协议，程序第一次启动的时候通过NSData做载体读取单例类的实例，并存入单例，程序运行中一直对单例做存储操作，当程序快要进入到后台挂起的时候，通过NSData做载体存入NSUserDefaults，一举两得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS程序员必备网站]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/07/ioscheng-xu-yuan-bi-bei-wang-zhan/"/>
    <updated>2014-04-07T13:50:00+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/07/ioscheng-xu-yuan-bi-bei-wang-zhan</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>记得最早接触iOS开发是在大二，那时国内相关资源还很少，比较适合新手入门的文章和视频也很少，感觉斯坦福大学的iPhone开发公开课算是最喜欢的了，还有<a href="http://blog.csdn.net/nicktang">NickTang</a>和<a href="http://www.cnblogs.com/dotey/">宝玉</a>的博客也给了我很多启发。那时正逢Objective－C刚刚推出了ARC，正处于是否用ARC的讨论中，这让我更加迷茫。<br/>
英文菜成渣的我开始看Apple官方的文档，download官方的demo，光是一个OC内存管理就看了好久；而如今国内中文的开发资源可以说比那时多很多了，所以想总结一下，方便大家。（PS：其实发现写博客最大的好处就是免得以后再用到某些东西的时候重复的查找，以前一直觉得应该把经验记录下来，但是一直懒得写，这次终于动手了^_^）</p>

<!-- more-->


<h2>正题</h2>

<h3>比较适合入门的</h3>

<ul>
<li><a href="http://www.cocoachina.com/">CocoaChina</a>创立于2008年3月，是一个苹果产品和 iOS 开发的中文社区网站，主要为苹果产品开发者提供资讯、信息及服务。</li>
<li>Apple的官方文档，尤其是关于人机界面设计的和OC的，网址不固定，XCode中可以查看。（这里还建议使用Dash管理API文档）</li>
</ul>


<h3>学习进阶参考</h3>

<ul>
<li><a href="http://beyondvincent.com">破船之家</a> 翻译和汇总了很多来自<a href="http://www.raywenderlich.com">Ray</a>的教程，很经典实用，也有大量原创文章</li>
<li><a href="http://www.ityran.com">泰然网</a> 感觉做游戏比较多</li>
<li><a href="http://code4app.com/">Code4App</a> 偶然发现这个网站，集合了大量实例代码，超赞</li>
<li><a href="http://blog.devtang.com/">唐巧的博客</a> 大神人物，总怀疑当初启蒙我的Nick Tang就是他</li>
<li><a href="http://onevcat.com">王巍的博客</a> 精力充沛的大神，工作之余还上架了一些App，他的博客令我大开眼界</li>
<li><a href="http://www.cocos2d-x.org">cocos2d-x</a> 跨平台游戏制作神器，虽然我已经用上了Sprite Kit，但是这种重量级的游戏引擎还是必须mark下</li>
</ul>


<h3>工具类网站</h3>

<ul>
<li><a href="https://github.com/">Github</a> 代码托管版本控制，不解释</li>
<li><a href="http://stackoverflow.com/">Stackoverflow</a> 最令我佩服的就是80%的疑难杂症最后都在这里找到解决方案，这里有好多耐心的老外！</li>
</ul>


<p>其实还有很多优秀的网站没有收录，本文只是收录了本人能看懂的网址（英文伤不起），其实大量优秀的教程都是英文的啊！碰到问题现用现查还是最快，没事儿的时候可以看看本文提到的网站充充电。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode和Objective-C Cheat Sheet]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/06/xcodehe-objective-c-cheat-sheet/"/>
    <updated>2014-04-06T18:38:24+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/06/xcodehe-objective-c-cheat-sheet</id>
    <content type="html"><![CDATA[<p>关于XCode和OC的速查，方便记忆，以后会更新</p>

<!-- more-->


<p>XCode5 Cheat Sheet:(<a href="http://www.git-tower.com/blog/xcode-cheat-sheet/">作者</a>)<br/>
<img src="http://yulingtianxia.com/images/blog/xcode-cheat-sheet_页面_1.jpg"> <br/>
<img src="http://yulingtianxia.com/images/blog/xcode-cheat-sheet_页面_2.jpg">
Objective-C Cheat Sheet and Quick Reference Updated for Xcode 5:(<a href="http://www.raywenderlich.com/54099/objective-c-cheat-sheet-and-quick-reference-updated-for-xcode-5">作者</a>) <br/>
<img src="http://yulingtianxia.com/images/blog/RW-Objective-C-Cheatsheet-v-1-5.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOSX10.9上用Octopress和Github搭建个人博客]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/05/macosx10-dot-9shang-yong-octopresshe-githubda-jian-ge-ren-bo-ke/"/>
    <updated>2014-04-05T14:28:54+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/05/macosx10-dot-9shang-yong-octopresshe-githubda-jian-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<p>网上已经有很多关于搭建Octopress的文章了，但我写这篇文章的目的是帮助Mac新手们搭建自己的Octopress，尤其是最新的Mavericks系统</p>

<p>这篇博文包括：</p>

<ul>
<li>Octopress搭建</li>
<li>Github Page 部署</li>
<li>Blog的美化工作</li>
</ul>


<!-- more -->


<hr />

<h1>Octopress搭建</h1>

<p>众所周知，MacOSX自带Ruby，10.9系统带了两个版本的Ruby：1.8和2.0，因为Octopress需要Ruby1.9.3以上的支持，所以Mavericks自带的Ruby2.0是可以胜任的，新手们可以松一口气了。<br/>
如果没有安装command line tools，可以直接安装XCode。XCode5之后，command line tools都是跟随XCode自带的，不用单独安装，想卸载也就麻烦了，可以在XCode中Preferences->Locations中查看command line tools版本。</p>

<p>系统没升级到最新版的童鞋，可以打开终端（terminal）通过下面的命令查看自己的Ruby版本：</p>

<pre><code>ruby --version
</code></pre>

<p>没安装RVM的童鞋运行下面的命令：</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>下面我们需要从Github上clone下Octopress</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>这条命令将octopress的源码下载到了你个人文件夹下的octopress文件夹，如果对git命令不太熟，可以在<a href="https://mac.github.com">这里</a>下载Github的Mac客户端，关于Github的使用，网上有很多教程。<br/>
下一步，安装依赖</p>

<pre><code>cd octopress ＃进入octopress目录
gem install bundler
</code></pre>

<p>这里碰到的问题可能有两种：<br/>
1. 权限不够，无法访问到一些文件夹<br/>
2. 等了很久没有反应<br/>
如果你之前对Linux比较熟，第一个问题可以很简单的解决，这是因为一些文件夹需要root权限访问，运行</p>

<pre><code>sudo gem install bundler
</code></pre>

<p>提示输入密码的时候，输入你自己的MacOSX开机密码后回车，注意输入密码的过程中终端无任何显示，这跟Linux一样<br/>
如果半天都没有反应，这是因为rubygems.org 的文件资源被墙了，可以在<a href="http://ruby.taobao.org">这里</a>查看解决方法，或者干脆翻墙，推荐一款Mac上比较傻瓜式的翻墙软件－－<a href="http://macappbox.com/yubaibai/">鱼摆摆</a>,我个人比较推荐翻墙。</p>

<p>接下来运行：</p>

<pre><code>bundle install
</code></pre>

<p>不出意外，肯定会出错，最后一句应该是“Make sure that <code>gem install RedCloth -v '4.2.9'</code> succeeds before bundling.”再往前追寻问题的根源，会发现这么一句“clang: error: unknown argument: &lsquo;-multiply_definedsuppress&rsquo; [-Wunused-command-line-argument-hard-err”。<br/>
这是因为Xcode 5.1的LLVM编译器将未识别的命令行选项认为是error，导致诸如Python本地拓展和Ruby Gem报错，解决方案：在执行命令行前加ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future，这样就忽略了报错。感谢<a href="http://www.andrewhay.ca/archives/2558?utm_source=tuicool">Andrew Hay的文章</a>帮我解决了问题。<br/>
所以应该这样：</p>

<pre><code>ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future bundle install
</code></pre>

<p>问题解决<br/>
最后安装默认的主题</p>

<pre><code>rake install
</code></pre>

<p>关于创建博文</p>

<pre><code>rake new_post["first post"]＃双引号中为博文标题，可以自己定义，生成markdown文件
rake generate ＃生成HTML文件
</code></pre>

<p>这里推荐一个markdown编辑器<a href="http://mouapp.com">Mou</a>，markdown是用来编写我们博客的语言，文件后缀名为md或markdown，学过Latex的童鞋可能会了解得更快一些，用markdown编写HTML版面是再好不过得了，markdown速成<a href="http://www.ituring.com.cn/article/23">传送门</a>。网上教程也挺多的，语法风格跟Latex有点像。</p>

<h1>Github Page 部署</h1>

<p>首先要有一个Github账号，假设用户名为username，那么新建一个仓库，名字叫“username.github.io”，Github会自动识别它为你的个人页面。你可以通过username.github.io这个网址来访问你部署的静态网页。创建完成后，获取你这个仓库的Git Url，SSH或者Http协议的都可以，然后执行<code>rake setup_github_pages</code>，当提示你的时候输入你前面创建的仓库的Git Url。比如<code>git@github.com:username/username.github.com.git</code><br/>
你会发现octopress文件夹中多了_deploy目录，并将这个目录当作master分支，而其余的文件都作为新建立的source分支。octopress原理是在source分支保存框架所需要的文件，还有博客的markdown文件，然后每次将生成的html文件放入master分支，通过username.github.io访问到的是已经生成好的master分支的文件，也就是_deploy文件夹的内容。<br/>
运行下面代码来生成部署网页到Github：</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>现在访问你的网站，已经有了一个页面，使用的是系统默认主题。为了避免博客的源码受到破坏，需要把source分支也commit上去。不会用git命令的同学可以用Github的Mac客户端。</p>

<pre><code>git add .
git commit -m 'your message'
git push origin source
</code></pre>

<p>如果你有自己的域名，可以通过在仓库中新建CNAME文件进行配置映射，这里不再细说。</p>

<h1>Blog的美化工作</h1>

<p>可以用<a href="https://github.com/shashankmehta/greyshade">greyshade</a>或者<a href="https://github.com/tommy351/Octopress-Theme-Slash">slash</a>主题美化博客，根据个人喜好了。需要注意的是，greyshade这个主题有些不足之处，比如，disqus实效，还有如何添加新浪微博链接，请看<a href="http://bryanone.com/blog/2014/03/01/problem-with-greyshade/">这里</a>和<a href="http://imallen.com/blog/2013/05/12/add-support-for-weibo-and-dribbble-to-greyshade.html">这里</a>。如果首页左侧没有显示title和subtitle等信息，可以修改/source/_includes/header.html文件，添加</p>

<pre><code>&lt;h1&gt;&lt;a href="http://yulingtianxia.com/"&gt;玉令天下的Blog&lt;/a&gt;&lt;/h1&gt;
&lt;p class="subtitle"&gt;I'm not a hacker.&lt;/p&gt;
</code></pre>

<p>修改_config.yml文件，可以配置博客的参数，网上有很多详细的教程来说明每个属性是干什么的，需要注意的一点就是冒号后面一定要加空格，否则编译不通过。建议下载一个Sublime Text来打开这些前台文件，增加效率。博客头像和Github一样采用<a href="www.gravatar.com">gravatar</a>的头像托管服务，在_config.yml文件中的email属性中填入你在gravatar的邮件或者在email_md5属性中填入md5码也可。<br/>
诸如添加Google Analyse和百度统计，添加分享和评论系统，还有版权信息，网上的教程也很多，参考<a href="http://www.cnblogs.com/oec2003/archive/2013/05/31/3109577.html">oec2003</a>和<a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">破船</a>的文章，本文主要是介绍MacOSX上面的部署工作。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[玉令天下的Blog]]></title>
  <link href="http://yulingtianxia.com/atom.xml" rel="self"/>
  <link href="http://yulingtianxia.com/"/>
  <updated>2014-07-11T17:55:44+08:00</updated>
  <id>http://yulingtianxia.com/</id>
  <author>
    <name><![CDATA[玉令天下]]></name>
    <email><![CDATA[yulingtianxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift中的位运算符合溢出运算符]]></title>
    <link href="http://yulingtianxia.com/blog/2014/07/11/bitwise-and-overflow-operators-in-swift/"/>
    <updated>2014-07-11T15:15:59+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/07/11/bitwise-and-overflow-operators-in-swift</id>
    <content type="html"><![CDATA[<p>位运算符（Bitwise Operators），在各种语言中都存在，虽然用的有些少，但是在诸如类别判断，类型检测等方案中经常用位运算来实现。很多枚举类型的成员都是将<code>0x1</code>左移位来赋值，而不是从0递增，这其中就蕴含着位运算。而数值运算中的溢出也是一个不常遇到但又值得注意的地方，虽然很少有人用<code>Int8</code>来存储大数，但了解下Swift处理溢出的这一特性也是很有用的。</p>

<!--more-->


<h2>基本位运算符</h2>

<p><code>~</code>,<code>&amp;</code>,<code>|</code>,<code>^</code>分别为取反，与，或，异或运算：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let firstBit: UInt8 = 0b10000000
</span><span class='line'>let lastBit: UInt8  = 0b00000001
</span><span class='line'>let invertedBits = ~lastBit  // 等于 0b11111110
</span><span class='line'>let noneBit = firstBit & lastBit  // 等于 0b00000000
</span><span class='line'>let twoSideBits = firstBit | lastBit //等于 0b10000001
</span><span class='line'>let middleSixBits = firstBit ^ lastBit //等于 0b10000001</span></code></pre></td></tr></table></div></figure>


<p>
左移运算符<code>&lt;&lt;</code>和右移运算符<code>&gt;&gt;</code>分别扮演着乘2和除2的角色，对于<code>UInt</code>来讲很简单，只需要填充0就行：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftUnsigned_2x.png" alt="" /></p>

<p>但对于有符号整型数，移位时需要考虑到符号位，第一个比特位表达这个整数是正数还是负数。0代表正数，1代表负数。也就是说<code>Int8</code>最大是127，因为只有7位存储实际值，而且负数采用补码来表示。</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSignedFour_2x.png" alt="" /></p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSignedMinusFour_2x.png" alt="" /></p>

<p>正数的补码是原码；负数的补码是符号位不变，数值位各位取反，最后整个数加1，补码之所以被机器采用是因为它符合机器的架构设计，只用加法就能算减法：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSignedAddition_2x.png" alt="" /></p>

<p>有符号整型右移运算时用符号位填充：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/bitshiftSigned_2x.png" alt="" /></p>

<p>这就确保了在右移的过程中，有符整型的符号不会发生变化。这称为算术移位。</p>

<h2>溢出运算符</h2>

<p>Swift中如果计算结果超出了它的类型能承载的范围，那么就会发生溢出错误，除非你已经使用溢出运算符来进行操作：</p>

<ul>
<li>溢出加法 <code>&amp;+</code></li>
<li>溢出减法 <code>&amp;-</code></li>
<li>溢出乘法 <code>&amp;*</code></li>
<li>溢出除法 <code>&amp;/</code></li>
<li>溢出求余 <code>&amp;%</code></li>
</ul>


<h3>值的上溢出</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var willOverflow = UInt8.max
</span><span class='line'>// willOverflow 等于UInt8的最大整数 255
</span><span class='line'>willOverflow = willOverflow &+ 1
</span><span class='line'>// 此时 willOverflow 等于 0</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/overflowAddition_2x.png" alt="" /></p>

<h3>值的下溢出</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var willUnderflow = UInt8.min
</span><span class='line'>// willUnderflow 等于UInt8的最小值0
</span><span class='line'>willUnderflow = willUnderflow &- 1
</span><span class='line'>// 此时 willUnderflow 等于 255</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/overflowUnsignedSubtraction_2x.png" alt="" /></p>

<p>有符整型也有类似的下溢出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var signedUnderflow = Int8.min
</span><span class='line'>// signedUnderflow 等于最小的有符整数 -128
</span><span class='line'>signedUnderflow = signedUnderflow &- 1
</span><span class='line'>// 此时 signedUnderflow 等于 127</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/overflowSignedSubtraction_2x.png" alt="" /></p>

<h3>除零溢出</h3>

<p>一个数除以0，或者对0求余数，就会产生一个错误；使用它们对应的可溢出的版本的运算符<code>&amp;/</code>和<code>&amp;%</code>进行除0操作时就会得到0值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let x = 1
</span><span class='line'>let y = x &/ 0
</span><span class='line'>// y 等于 0</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Your Own VPN With PPTP]]></title>
    <link href="http://yulingtianxia.com/blog/2014/07/11/setup-your-own-vpn-with-pptp/"/>
    <updated>2014-07-11T13:22:16+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/07/11/setup-your-own-vpn-with-pptp</id>
    <content type="html"><![CDATA[<p>博主买的DigitalOcean的VPS服务，在配置好SSH远程访问后，准备继续配置pptp来搭建VPN科学上网。DO官网有详细的<a href="https://www.digitalocean.com/community/tutorials/how-to-setup-your-own-vpn-with-pptp">配置教程</a></p>

<p>但是一步一步配置效率较低，多亏了脚本<a href="http://yansu.org/2013/12/11/deploy-pptp-vpn-in-ubuntu.html">http://yansu.org</a></p>

<!--more-->


<p>脚本虽然方便，但是需要改动几个地方，比如你可以设定你喜欢的<code>remoteip</code>范围，这样就可以调整你的VPN分配的IP范围；还可以添加可以使用VPN的自定义账户密码，下面是我修改过的脚本，里面添加了两个账户：yulingtianxia和802，每行四个参数分别是账户名、服务类型、密码和验证IP：</p>

<script src="https://gist.github.com/yulingtianxia/296b1b3b2edf5d762ae7.js"></script>


<p>在VPS上使用自动脚本只需要下面的操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -c https://gist.githubusercontent.com/yulingtianxia/296b1b3b2edf5d762ae7/raw/e2ef1b18e85b393d22c82d26d72b20af14567e9c/pptp.sh
</span><span class='line'>chmod +x pptp.sh
</span><span class='line'>./pptp.sh</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>上面的命令先是用ssh的wget命令下载gist上的原始Shell脚本文件到VPS上，速度之快和安全性是ftp上传所不能比拟的。然后赋予pptp.sh可执行权限，最后执行pptp.sh</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Core Data(3)]]></title>
    <link href="http://yulingtianxia.com/blog/2014/07/03/chu-shi-core-data-3/"/>
    <updated>2014-07-03T10:28:28+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/07/03/chu-shi-core-data-3</id>
    <content type="html"><![CDATA[<p>在Swift发布后，我尝试用Swift和Core Data做了一个小Demo，名字叫“HardChoice”。它用于帮助人们随机生成一个问题的结果，当然结果是预设好的，并可以加入权值。本文将通过这个Demo来进一步阐述Core Data的知识。</p>

<p>本文包含以下内容：</p>

<ul>
<li>建立数据模型</li>
<li>Swift与Objective-C桥接</li>
<li>NSFetchedResultsController</li>
<li>UITextField键盘响应</li>
<li>随机选择算法</li>
</ul>


<!--more-->


<p>你可以在<a href="https://github.com/yulingtianxia/HardChoice">GitHub</a>上下载HardChoice的代码</p>

<p>在没弄懂Core Data的基础知识之前，我建议你先阅读我之前的两篇博文：</p>

<p><a href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/">初识Core Data(1)</a><br/>
<a href="http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2/">初识Core Data(2)</a></p>

<p>如果你不懂Swift也没关系，只要了解OC和Core Data，总是能看懂的</p>

<p>在写代码前先了解下我们要做什么：<br/>
<img src="http://wal8.com/64224622" alt="" />
<img src="http://wal8.com/64224623" alt="" /></p>

<p>先在第一个页面添加问题（吃啥？），然后点击问题进入到第二个添加选项（鸭子，蛋，猪）的页面。每个选项左边是选项名，右边是该选项的权值。摇动手机就能随机从所有选项中选出答案（就像第二张图那样）。</p>

<h2>建立数据模型</h2>

<p>还是像以前那样新建一个Master-Detail Application，勾选Use Core Data选项，语言选择Swift，然后Xcode会自动生成一个具有<code>UITableView</code>的Demo，这些内容之前说过。下面我们需要打开xcdatamodeld文件来建立我们的数据模型：</p>

<p><img src="http://byetz.img41.wal8.com/img41/425047_20140623222918/140436356516.png" alt="" /></p>

<p><code>Question</code>这个实体只具有一个属性，那就是问题内容<code>content</code>，类型为<code>String</code>；<code>Choice</code>实体有一个类型为<code>String</code>的<code>name</code>属性和一个类型为<code>Integer32</code>的<code>weight</code>属性，分别代表问题选项的名字和权重。</p>

<p>下面我们来建立<code>Question</code>和<code>Choice</code>这两个实体之间的关系：</p>

<p>假设每个问题都对应多个选项，也可以没有选项：</p>

<p><img src="http://byetz.img41.wal8.com/img41/425047_20140623222918/14043675716.png" alt="" /></p>

<p><code>Optional</code>被打钩是因为问题可以没有任何选项，在Tpye那里我们选择<code>To Many</code></p>

<p>相反，每个选项一定会对应一个问题，并且是唯一的问题：</p>

<p><img src="http://byetz.img41.wal8.com/img41/425047_20140623222918/140436793089.png" alt="" /></p>

<p><code>Optional</code>那里不打钩是为了避免关系的目标为空，在<code>Tpye</code>那里我们选择了<code>To One</code></p>

<p><strong>关于<code>Delete Rule</code>的选择</strong></p>

<p>下面会通过部门与员工的例子来阐述<code>Delete Rule</code>的用法</p>

<ul>
<li><strong><code>Deny</code></strong> 如果关系指向的目标仍然有对象，那么关系的源对象就不会被删除，比如你想删除一个部门，必须先确保该部门所有员工已经调到其他部门（或被解雇），否则这个部门就不会被删除。</li>
<li><strong><code>Nullify</code></strong> 将被删除对象反向关系的目标设为null，比如如果你删除了一个部门，那么将这个部门所有成员的department关系目标设为null。需要注意的是员工的department关系应该被勾选为Optional，或者是在删除部门之后马上给该部门员工设置一个新的部门。</li>
<li><strong><code>Cascade</code></strong> 顾名思义它会传递删除命令，删除一个对象会导致这个对象关系中所指向的所有目标对象也被删除。比如如果你删除了一个部门那么这个部门所有员工都会被立即删除。</li>
<li><strong><code>No Action</code></strong> 无为而治。比如如果你删除了一个部门，那么这个部门底下的所有员工什么都不知道，他们还以为自己还属于这个部门。</li>
</ul>


<p>回到我们的例子，因为<code>Question</code>指向<code>Choice</code>的<code>choices</code>关系具有从属的性质，问题被删除后<code>choices</code>所指向的选项也应该被删除，所以<code>choices</code>关系中的<code>Delete Rule</code>我们选择<code>Cascade</code>；而<code>Choice</code>指向<code>Question</code>的<code>question</code>关系中<code>Delete Rule</code>被设置成了<code>Nullify</code>，也就是解除了<code>Question</code>与这个<code>Choice</code>的关系，并且我们之前已经设置<code>Question</code>的<code>choices</code>关系设置为<code>Optional</code>来满足<code>Nullify</code>这一选项的要求。</p>

<p><strong>注意：每当你修改过数据模型后，需要将以前生成好的APP删除后再重新Run一下，这样才不会发生错误。这是因为手动删除APP会连同将其数据一起删除，然后重新Run一下会将新的数据表结构安装在模拟器或真机上</strong></p>

<p>如果你对建立数据模型的过程生疏，建议回到<a href="http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2/">初识Core Data(2)</a>中复习下“使用数据模型设计器”一节</p>

<h2>Swift与Objective-C桥接</h2>

<p>在使用Xcode6 Beta2生成<code>NSManagedObject</code>子类的时候，生成的代码依然是Objective-C的代码（即使我的工程是用Swift语言建立的），这就涉及到在Swift工程中调用Objective-C类的问题。苹果给我们提供了一个比较简单的解决方案。在你向工程中加入OC文件时，Xcode会自动弹出消息问你是否需要生成一个桥接头文件（“工程名-Bridging-Header.h”），然后我们在这个头文件中加入想要在Swift中调用的OC类的头文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Use this file to import your target&#39;s public headers that you would like to expose to Swift.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;Question.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Choice.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;CustomIOS7AlertView.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>Question</code>和<code>Choice</code>这两个类是用之前数据模型中同名实例创建的<code>NSManagedObject</code>子类，<code>CustomIOS7AlertView</code>类是本项目用到的一个自定义AlertView（iOS7之后苹果不再允许自定义<code>UIAlertView</code>了）</p>

<p>这样在Swift文件中不用<code>import</code>任何东西就可以直接使用上面被引入的OC类了</p>

<p>有关Swift和OC在同一项目中混合使用的方法详见<a href="https://github.com/CocoaChina-editors/Welcome-to-Swift/blob/master/Using%20Swift%20with%20Cocoa%20and%20Objective-C/03Mix%20and%20Match/Swift%20and%20Objective-C%20in%20the%20Same%20Project.md">这里</a></p>

<h2>NSFetchedResultsController</h2>

<p>在<a href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/">初识Core Data(1)</a>中我们提到过<code>NSFetchedResultsController</code>的作用，简单地说，<code>NSFetchedResultsController</code>的作用就是有效率的管理从CoreData获取请求的数据结果，并将结果提供给<code>UITableView</code>作为数据源。</p>

<p>在<code>MasterViewController.swift</code>文件中，Xcode生成了两个<code>NSFetchedResultsController</code>属性：一个只读计算属性<code>fetchedResultsController</code>和一个可选存储属性<code>_fetchedResultsController</code>，通过两者搭配来实现setter，这里不再多说，将计算属性<code>fetchedResultsController</code>的定义替换如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">fetchedResultsController</span><span class="o">:</span> <span class="nx">NSFetchedResultsController</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">_fetchedResultsController</span> <span class="o">!=</span> <span class="nx">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">_fetchedResultsController</span><span class="o">!</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">fetchRequest</span> <span class="o">=</span> <span class="nx">NSFetchRequest</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Edit the entity name as appropriate.</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">entity</span> <span class="o">=</span> <span class="nx">NSEntityDescription</span><span class="p">.</span><span class="nx">entityForName</span><span class="p">(</span><span class="s2">&quot;Question&quot;</span><span class="p">,</span> <span class="nx">inManagedObjectContext</span><span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">managedObjectContext</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">fetchRequest</span><span class="p">.</span><span class="nx">entity</span> <span class="o">=</span> <span class="nx">entity</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set the batch size to a suitable number.</span>
</span><span class='line'>        <span class="nx">fetchRequest</span><span class="p">.</span><span class="nx">fetchBatchSize</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Edit the sort key as appropriate.</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">sortDescriptor</span> <span class="o">=</span> <span class="nx">NSSortDescriptor</span><span class="p">(</span><span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="nx">ascending</span><span class="o">:</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">sortDescriptors</span> <span class="o">=</span> <span class="p">[</span><span class="nx">sortDescriptor</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">fetchRequest</span><span class="p">.</span><span class="nx">sortDescriptors</span> <span class="o">=</span> <span class="nx">sortDescriptors</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Edit the section name key path and cache name if appropriate.</span>
</span><span class='line'>        <span class="c1">// nil for section name key path means &quot;no sections&quot;.</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">aFetchedResultsController</span> <span class="o">=</span> <span class="nx">NSFetchedResultsController</span><span class="p">(</span><span class="nx">fetchRequest</span><span class="o">:</span> <span class="nx">fetchRequest</span><span class="p">,</span> <span class="nx">managedObjectContext</span><span class="o">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">managedObjectContext</span><span class="p">,</span> <span class="nx">sectionNameKeyPath</span><span class="o">:</span> <span class="nx">nil</span><span class="p">,</span> <span class="nx">cacheName</span><span class="o">:</span> <span class="s2">&quot;Master&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">aFetchedResultsController</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>        <span class="nx">_fetchedResultsController</span> <span class="o">=</span> <span class="nx">aFetchedResultsController</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">NSError</span><span class="o">?</span> <span class="o">=</span> <span class="nx">nil</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">!</span><span class="nx">_fetchedResultsController</span><span class="o">!</span><span class="p">.</span><span class="nx">performFetch</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>           <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>             <span class="c1">//println(&quot;Unresolved error \(error), \(error.userInfo)&quot;)</span>
</span><span class='line'>           <span class="nx">abort</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">_fetchedResultsController</span><span class="o">!</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>NSFetchRequest</code>对象描述了从数据持久层获取数据的标准，也就是相当于SQL中的from和where等条件语句，它是初始化<code>NSFetchedResultsController</code>的必要参数之一，因为它规定了从<code>NSManagedObjectContext</code>实例中获取什么样的数据。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389167.png" alt="" /></p>

<p><code>NSFetchRequest</code>的属性<code>NSEntityDescription</code>，<code>predicate</code>和<code>sortDescriptors</code>分别对应着SQL中的from，where和order by语句，只不过<code>NSFetchRequest</code>把复杂的SQL语句进行了简化，查抄条件和排序方法更加灵活。</p>

<p>在上面的<code>fetchedResultsController</code>属性中我们设置了<code>NSFetchRequest</code>实例：获取所有<code>Question</code>实体对应的数据，并将结果按照<code>content</code>属性的升序排列。</p>

<p><code>init(fetchRequest: NSFetchRequest!, managedObjectContext context: NSManagedObjectContext!, sectionNameKeyPath: String!, cacheName name: String!)</code>是<code>NSFetchedResultsController</code>的指定构造器，除了刚才提到的<code>fetchRequest</code>参数外，还需传入一个必要参数<code>managedObjectContext</code>，在这里我们传入的<code>managedObjectContext</code>是来自<code>AppDelegate</code>的<code>managedObjectContext</code>属性。有关<code>NSManagedObjectContext</code>的知识参见<a href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/">初识Core Data(1)</a>，这里不再赘述。<strong>当构造器执行结束后，你就不能再修改<code>NSFetchedResultsController</code>的<code>fetchRequest</code>属性了</strong>。</p>

<p><code>sectionNameKeyPath</code>参数是用来指定抓取数据结果的<code>section</code>信息的，这样<code>UITableView</code>的<code>section</code>信息此时已经预编译好了。因为我们的程序只需要一个<code>section</code>，所以只需传入<code>nil</code>；<code>cacheName</code>参数用于指定缓存<code>section</code>预编译信息的文件名，我们不需要缓存<code>section</code>信息，所以传入<code>nil</code>。</p>

<p>当执行<code>performFetch(error: NSErrorPointer) -&gt; Bool</code>方法成功后，你可以通过<code>NSFetchedResultsController</code>的<code>fetchedObjects</code>属性来获取数据结果，如果为<code>UITableView</code>提供数据，可以用<code>objectAtIndexPath(indexPath: NSIndexPath!) -&gt; AnyObject!</code>方法来更加便捷的将数据与<code>NSIndexPath</code>对接上。在我们的例子中，会把数据结果转化为<code>NSManagedObject</code>的子类<code>Question</code>或<code>Choice</code>类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">func</span> <span class="nx">configureCell</span><span class="p">(</span><span class="nx">cell</span><span class="o">:</span> <span class="nx">UITableViewCell</span><span class="p">,</span> <span class="nx">atIndexPath</span> <span class="nx">indexPath</span><span class="o">:</span> <span class="nx">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">objectAtIndexPath</span><span class="p">(</span><span class="nx">indexPath</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">Question</span>
</span><span class='line'>    <span class="nx">cell</span><span class="p">.</span><span class="nx">textLabel</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>下面修改<code>insertNewObject</code>方法来添加新的<code>Question</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">addAV</span> <span class="o">=</span> <span class="nx">CustomIOS7AlertView</span><span class="p">()</span>
</span><span class='line'><span class="nx">func</span> <span class="nx">insertNewObject</span><span class="p">(</span><span class="nx">sender</span><span class="o">:</span> <span class="nx">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">textField</span> <span class="o">=</span> <span class="nx">UITextField</span><span class="p">(</span><span class="nx">frame</span><span class="o">:</span><span class="nx">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">290</span><span class="p">,</span><span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">placeholder</span> <span class="o">=</span> <span class="s2">&quot;question&quot;</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Default</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">returnKeyType</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Done</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">containerView</span> <span class="o">=</span> <span class="nx">textField</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">buttonTitles</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span><span class="s2">&quot;Cancel&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">useMotionEffects</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>有了添加<code>Question</code>功能，当然还会有修改功能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">modifyAV</span> <span class="o">=</span> <span class="nx">CustomIOS7AlertView</span><span class="p">()</span>
</span><span class='line'><span class="nx">func</span> <span class="nx">modifyObject</span><span class="p">(</span><span class="nx">indexPath</span><span class="o">:</span><span class="nx">NSIndexPath</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">question</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">objectAtIndexPath</span><span class="p">(</span><span class="nx">indexPath</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">Question</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">textField</span> <span class="o">=</span> <span class="nx">UITextField</span><span class="p">(</span><span class="nx">frame</span><span class="o">:</span><span class="nx">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">290</span><span class="p">,</span><span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">becomeFirstResponder</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">placeholder</span> <span class="o">=</span> <span class="s2">&quot;question&quot;</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Default</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">returnKeyType</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Done</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>    <span class="nx">modifyAV</span><span class="p">.</span><span class="nx">containerView</span> <span class="o">=</span> <span class="nx">textField</span>
</span><span class='line'>    <span class="nx">modifyAV</span><span class="p">.</span><span class="nx">buttonTitles</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span><span class="s2">&quot;Cancel&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">modifyAV</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>    <span class="nx">modifyAV</span><span class="p">.</span><span class="nx">useMotionEffects</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">modifyAV</span><span class="p">.</span><span class="nx">containerView</span> <span class="nx">as</span> <span class="nx">UITextField</span><span class="p">).</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">question</span><span class="p">.</span><span class="nx">content</span>
</span><span class='line'>    <span class="nx">modifyAV</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>CustomIOS7AlertView</code>是一个第三方的开源AlertView，它允许我们自定义AlertView的内容，并提供了<code>CustomIOS7AlertViewDelegate</code>协议来用于按钮点击的回调，我们将这两个<code>CustomIOS7AlertView</code>实例的<code>delegate</code>属性都设置为<code>self</code>，然后在<code>MasterViewController</code>中的实现协议中唯一的方法<code>customIOS7dialogButtonTouchUpInside(alertView:AnyObject!, clickedButtonAtIndex buttonIndex:Int)</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">func</span> <span class="nx">customIOS7dialogButtonTouchUpInside</span><span class="p">(</span><span class="nx">alertView</span><span class="o">:</span><span class="nx">AnyObject</span><span class="o">!</span><span class="p">,</span> <span class="nx">clickedButtonAtIndex</span> <span class="nx">buttonIndex</span><span class="o">:</span><span class="nx">Int</span><span class="p">){</span>
</span><span class='line'>    <span class="k">switch</span> <span class="nx">buttonIndex</span><span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">managedObjectContext</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">entity</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">fetchRequest</span><span class="p">.</span><span class="nx">entity</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">newManagedObject</span><span class="o">:</span><span class="nx">Question</span><span class="o">!</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">av</span> <span class="o">=</span> <span class="nx">alertView</span> <span class="nx">as</span> <span class="nx">CustomIOS7AlertView</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">addAV</span> <span class="o">==</span> <span class="nx">av</span><span class="p">{</span>
</span><span class='line'>            <span class="nx">newManagedObject</span> <span class="o">=</span> <span class="nx">NSEntityDescription</span><span class="p">.</span><span class="nx">insertNewObjectForEntityForName</span><span class="p">(</span><span class="nx">entity</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">inManagedObjectContext</span><span class="o">:</span> <span class="nx">context</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">Question</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">modifyAV</span> <span class="o">==</span> <span class="nx">av</span><span class="p">{</span>
</span><span class='line'>            <span class="nx">newManagedObject</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">objectAtIndexPath</span><span class="p">(</span><span class="nx">selectedIndexPath</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">Question</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// If appropriate, configure the new managed object.</span>
</span><span class='line'>        <span class="c1">// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.</span>
</span><span class='line'>        <span class="nx">newManagedObject</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="p">(</span><span class="nx">av</span><span class="p">.</span><span class="nx">containerView</span> <span class="nx">as</span> <span class="nx">UITextField</span><span class="p">).</span><span class="nx">text</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Save the context.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">NSError</span><span class="o">?</span> <span class="o">=</span> <span class="nx">nil</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>            <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span>
</span><span class='line'>            <span class="c1">//println(&quot;Unresolved error \(error), \(error.userInfo)&quot;)</span>
</span><span class='line'>            <span class="nx">abort</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">alertView</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="nx">alertView</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>当用户点击<code>alertView</code>的OK按钮时，判断<code>alertView</code>对象是<code>addAV</code>还是<code>modifyAV</code>，然后对应通过不同途径（新插入到<code>ManagedObjectContext</code>还是从<code>ManagedObjectContext</code>中取出）产生<code>Question</code>实例<code>newManagedObject</code>，最后的结果会保存回<code>ManagedObjectContext</code>中，最后关闭<code>alertView</code>。</p>

<p>添加<code>Question</code>时使用的<code>insertNewObjectForEntityForName(entityName: String!, inManagedObjectContext context: NSManagedObjectContext!) -&gt; AnyObject!</code>方法是一个配置和添加实体，并返回该实体对应<code>NSManagedObject</code>子类（在这里是<code>Question</code>类）的便捷方法，这是一个很强大的类方法，我们无需知道创建<code>Question</code>类的细节就能创建并添加一个<code>Question</code>实例到<code>NSManagedObjectContext</code>中，在保存前我们还可以对这个方法返回的<code>Question</code>实例做修改，然后再通过<code>save(error: NSErrorPointer) -&gt; Bool</code>方法保存。</p>

<p>修改<code>Question</code>的过程其实就是先通过<code>objectAtIndexPath(indexPath: NSIndexPath!) -&gt; AnyObject!</code>方法取出数据请求结果当中的某一项并转换成<code>Question</code>对象，对其进行修改后再保存。在界面中通过点击cell右侧带有字母i的蓝色圆圈来修改<code>Question</code>内容：</p>

<p><img src="http://byetz.img41.wal8.com/img41/425047_20140623222918/140438530596.png" alt="" /></p>

<p>上图的中的蓝色圆圈是<code>AccessoryButton</code>，需要在IB中设置<code>TableViewCell</code>的<code>Identifier</code>为<code>QuestionCell</code>，<code>Accessory</code>为<code>Detail Disclosure</code>，这样我们就能在<code>UITableViewDelegate</code>的<code>tableView(tableView: UITableView!, accessoryButtonTappedForRowWithIndexPath indexPath: NSIndexPath!)</code>方法中响应<code>AccessoryButton</code>了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">override</span> <span class="nx">func</span> <span class="nx">tableView</span><span class="p">(</span><span class="nx">tableView</span><span class="o">:</span> <span class="nx">UITableView</span><span class="o">!</span><span class="p">,</span> <span class="nx">accessoryButtonTappedForRowWithIndexPath</span> <span class="nx">indexPath</span><span class="o">:</span> <span class="nx">NSIndexPath</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">selectedIndexPath</span> <span class="o">=</span> <span class="nx">indexPath</span>
</span><span class='line'>    <span class="nx">modifyObject</span><span class="p">(</span><span class="nx">indexPath</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>导航栏右侧的添加<code>Question</code>按钮已经通过下面的代码配置了响应函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">addButton</span> <span class="o">=</span> <span class="nx">UIBarButtonItem</span><span class="p">(</span><span class="nx">barButtonSystemItem</span><span class="o">:</span> <span class="p">.</span><span class="nx">Add</span><span class="p">,</span> <span class="nx">target</span><span class="o">:</span> <span class="nx">self</span><span class="p">,</span> <span class="nx">action</span><span class="o">:</span> <span class="s2">&quot;insertNewObject:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">navigationItem</span><span class="p">.</span><span class="nx">rightBarButtonItem</span> <span class="o">=</span> <span class="nx">addButton</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在<code>UITableViewDelegate</code>中删除<code>Question</code>的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">override</span> <span class="nx">func</span> <span class="nx">tableView</span><span class="p">(</span><span class="nx">tableView</span><span class="o">:</span> <span class="nx">UITableView</span><span class="p">,</span> <span class="nx">commitEditingStyle</span> <span class="nx">editingStyle</span><span class="o">:</span> <span class="nx">UITableViewCellEditingStyle</span><span class="p">,</span> <span class="nx">forRowAtIndexPath</span> <span class="nx">indexPath</span><span class="o">:</span> <span class="nx">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">editingStyle</span> <span class="o">==</span> <span class="p">.</span><span class="nx">Delete</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">managedObjectContext</span>
</span><span class='line'>        <span class="nx">context</span><span class="p">.</span><span class="nx">deleteObject</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">objectAtIndexPath</span><span class="p">(</span><span class="nx">indexPath</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">NSManagedObject</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">NSError</span><span class="o">?</span> <span class="o">=</span> <span class="nx">nil</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="nx">context</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>            <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span>
</span><span class='line'>            <span class="c1">//println(&quot;Unresolved error \(error), \(error.userInfo)&quot;)</span>
</span><span class='line'>            <span class="nx">abort</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里多说一嘴，如果你想打印出错误信息的话，不要直接反注释那行<code>println</code>代码，还需要在<code>error</code>后加上感叹号，因为<code>error</code>是可选类型，需要强制解析：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Unresolved error \(error!), \(error!.userInfo)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>UITextField键盘响应</h2>

<p>在将<code>UITextField</code>实例赋值给<code>CustomIOS7AlertView</code>的<code>containerView</code>属性前需要先让其获取当前焦点，并将<code>UITextField</code>的<code>delegate</code>属性设为<code>self</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">addAV</span> <span class="o">=</span> <span class="nx">CustomIOS7AlertView</span><span class="p">()</span>
</span><span class='line'><span class="nx">func</span> <span class="nx">insertNewObject</span><span class="p">(</span><span class="nx">sender</span><span class="o">:</span> <span class="nx">AnyObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">textField</span> <span class="o">=</span> <span class="nx">UITextField</span><span class="p">(</span><span class="nx">frame</span><span class="o">:</span><span class="nx">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">290</span><span class="p">,</span><span class="mi">50</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">becomeFirstResponder</span><span class="p">()</span><span class="c1">//获取当前焦点</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">placeholder</span> <span class="o">=</span> <span class="s2">&quot;question&quot;</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">keyboardType</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Default</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">returnKeyType</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Done</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">containerView</span> <span class="o">=</span> <span class="nx">textField</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">buttonTitles</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;OK&quot;</span><span class="p">,</span><span class="s2">&quot;Cancel&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">delegate</span> <span class="o">=</span> <span class="nx">self</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">useMotionEffects</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="nx">addAV</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后让<code>MasterViewController</code>遵循<code>UITextFieldDelegate</code>协议，并实现下面两个协议中的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">func</span> <span class="nx">textFieldDidBeginEditing</span><span class="p">(</span><span class="nx">textField</span><span class="o">:</span> <span class="nx">UITextField</span><span class="o">!</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">animationDuration</span><span class="o">:</span><span class="nx">NSTimeInterval</span>  <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">frame</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">y</span><span class="o">-=</span><span class="mi">116</span>
</span><span class='line'>    <span class="nx">frame</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">height</span><span class="o">+=</span><span class="mi">116</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">frame</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">UIView</span><span class="p">.</span><span class="nx">animateWithDuration</span><span class="p">(</span><span class="nx">animationDuration</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">frame</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">func</span> <span class="nx">textFieldShouldEndEditing</span><span class="p">(</span><span class="nx">textField</span><span class="o">:</span> <span class="nx">UITextField</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Bool</span><span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">animationDuration</span><span class="o">:</span><span class="nx">NSTimeInterval</span>  <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">frame</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="mi">116</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">frame</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">height</span><span class="o">-=</span><span class="mi">116</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">frame</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//self.view移回原位置</span>
</span><span class='line'>    <span class="nx">UIView</span><span class="p">.</span><span class="nx">animateWithDuration</span><span class="p">(</span><span class="nx">animationDuration</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">frame</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">textField</span><span class="p">.</span><span class="nx">resignFirstResponder</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这里我将键盘高度硬编码为116，当<code>UITextField</code>开始编辑时获取焦点键盘弹出，背景上移；当其结束编辑时键盘消失，背景移回原位。</p>

<p>在Xcode6 beta2中的模拟器不是很好使，经常不能弹出键盘，这里给出的代码有很多疏漏，只提供个参考，主要是处理<code>UITextField</code>代理的思想</p>

<h2>随机选择算法</h2>

<p><code>DetailViewController</code>的内容跟<code>MasterViewController</code>内容很像，最大的区别在于多了一个从<code>Choice</code>数据中随机抽选的一个方法。因为是通过摇一摇的方式来触发随机算法，所以我们重载<code>motionBegan(motion: UIEventSubtype, withEvent event: UIEvent!)</code>方法来响应手机摇动：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">override</span> <span class="nx">func</span> <span class="nx">motionBegan</span><span class="p">(</span><span class="nx">motion</span><span class="o">:</span> <span class="nx">UIEventSubtype</span><span class="p">,</span> <span class="nx">withEvent</span> <span class="nx">event</span><span class="o">:</span> <span class="nx">UIEvent</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">motion</span> <span class="o">==</span> <span class="p">.</span><span class="nx">MotionShake</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">fetchedObjects</span><span class="p">.</span><span class="nx">count</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">fetchedResultsController</span><span class="p">.</span><span class="nx">fetchedObjects</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">sum</span><span class="o">:</span><span class="nx">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">for</span> <span class="nx">object</span> <span class="o">:</span> <span class="nx">AnyObject</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">{</span>
</span><span class='line'>                <span class="nx">sum</span><span class="o">+=</span><span class="p">(</span><span class="nx">object</span> <span class="nx">as</span> <span class="nx">Choice</span><span class="p">).</span><span class="nx">weight</span><span class="p">.</span><span class="nx">integerValue</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="nx">sum</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">lucknum</span> <span class="o">=</span> <span class="nx">arc4random</span><span class="p">()</span><span class="o">%</span><span class="nx">UInt32</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span>
</span><span class='line'><span class="c1">//                println(&quot;\(lucknum)&quot;)</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">n</span><span class="o">:</span><span class="nx">UInt32</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="k">while</span> <span class="nx">lucknum</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="nx">lucknum</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">{</span>
</span><span class='line'>                        <span class="k">break</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                        <span class="nx">num</span><span class="o">++</span>
</span><span class='line'>                        <span class="nx">lucknum</span><span class="o">-=</span><span class="nx">n</span>
</span><span class='line'>                        <span class="k">if</span> <span class="nx">num</span><span class="o">&gt;=</span><span class="nx">count</span><span class="p">{</span>
</span><span class='line'>                            <span class="k">break</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="nx">n</span> <span class="o">=</span> <span class="nx">UInt32</span><span class="p">((</span><span class="nx">arr</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="nx">as</span> <span class="nx">Choice</span><span class="p">).</span><span class="nx">weight</span><span class="p">.</span><span class="nx">integerValue</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'><span class="c1">//                println(&quot;\(num)&quot;)</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">alertView</span> <span class="o">=</span> <span class="nx">UIAlertView</span><span class="p">()</span>
</span><span class='line'>                <span class="nx">alertView</span><span class="p">.</span><span class="nx">alertViewStyle</span> <span class="o">=</span> <span class="p">.</span><span class="nx">Default</span>
</span><span class='line'>                <span class="nx">alertView</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;恭喜&quot;</span>
</span><span class='line'>                <span class="nx">alertView</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s2">&quot;\(detailItem!.content)的答案是：\n\((arr[num] as Choice).name)&quot;</span>
</span><span class='line'>                <span class="nx">alertView</span><span class="p">.</span><span class="nx">addButtonWithTitle</span><span class="p">(</span><span class="s2">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="nx">alertView</span><span class="p">.</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>前面提到过<code>NSFetchedResultsController</code>对象在执行<code>performFetch(error: NSErrorPointer) -&gt; Bool</code>方法后会将获取的数据存在<code>fetchedObjects</code>数组中，上面这段代码首先获取该问题对应的选项数量，并通过加权运算得到总的权重，然后通过随机数算法生成一个幸运数字，最后计算幸运数字落在哪个选项上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initialization in Swift]]></title>
    <link href="http://yulingtianxia.com/blog/2014/06/24/initialization-in-swift/"/>
    <updated>2014-06-24T09:50:23+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/06/24/initialization-in-swift</id>
    <content type="html"><![CDATA[<p>本文参考自Swift文档，主要包括以下内容：</p>

<ul>
<li>简介</li>
<li>自定义构造过程</li>
<li>默认构造器</li>
<li>值类型的构造器代理</li>
<li>类的继承和构造过程</li>
<li>通过闭包和函数来设置属性的默认值</li>
</ul>


<!--more-->


<h2>简介</h2>

<p>构造过程是为了使用某个类、结构体或枚举类型的实例而进行的准备过程。这个过程包含了为实例中的每个属性设置初始值和为其执行必要的准备和初始化任务。</p>

<p>Swift中的构造器不像Objective-C那样有返回值，但是跟C++有点像：所有的构造器都以<code>init</code>命名，用参数列表来区分各个构造器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">struct</span> <span class="nx">Fahrenheit</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temperature</span> <span class="o">=</span> <span class="mf">16.0</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">temperature</span> <span class="o">=</span> <span class="mf">32.0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">Fahrenheit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>Fahrenheit</code>是一个结构体，与类一样，Swift中的值类型也有构造器和普通方法。上面的代码先是定义了<code>temperature</code>属性的默认值，然后又在构造器中将其赋值，最后<code>temperature</code>属性的值为32。对于<code>temperature</code>这种存储型属性，无论定义默认值还是在构造器中赋值，最终它们实现的效果是一样的。</p>

<p><strong>给存储型类型属性赋默认值或在初始构造器中设置初始值时，此属性的属性观察者不会被调用</strong></p>

<h2>自定义构造过程</h2>

<p>你可以定义一些带参数的构造器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">struct</span> <span class="nx">Celsius</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">temperatureInCelsius</span><span class="o">:</span> <span class="nx">Double</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">fromFahrenheit</span> <span class="nx">fahrenheit</span><span class="o">:</span> <span class="nx">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">temperatureInCelsius</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fahrenheit</span> <span class="o">-</span> <span class="mf">32.0</span><span class="p">)</span> <span class="o">/</span> <span class="mf">1.8</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">fromKelvin</span> <span class="nx">kelvin</span><span class="o">:</span> <span class="nx">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">temperatureInCelsius</span> <span class="o">=</span> <span class="nx">kelvin</span> <span class="o">-</span> <span class="mf">273.15</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
构造器的参数也跟Swift中的方法定义（注意不是函数）一样，也分内部和外部参数名。上面代码中两个构造器外部参数名不同，调用构造器的时候也是通过外部参数名来区分的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">boilingPointOfWater</span> <span class="o">=</span> <span class="nx">Celsius</span><span class="p">(</span><span class="nx">fromFahrenheit</span><span class="o">:</span> <span class="mf">212.0</span><span class="p">)</span>
</span><span class='line'><span class="c1">// boilingPointOfWater.temperatureInCelsius 是 100.0</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">freezingPointOfWater</span> <span class="o">=</span> <span class="nx">Celsius</span><span class="p">(</span><span class="nx">fromKelvin</span><span class="o">:</span> <span class="mf">273.15</span><span class="p">)</span>
</span><span class='line'><span class="c1">// freezingPointOfWater.temperatureInCelsius 是 0.0”</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果不写外部参数名那么外部参数名就等于内部参数名。如果你不希望为构造器的某个参数提供外部名字，你还可以使用下划线<code>_</code>来显示描述它的外部名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">struct</span> <span class="nx">Color</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">red</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">green</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">blue</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">red</span><span class="o">:</span> <span class="nx">Double</span><span class="p">,</span> <span class="nx">green</span><span class="o">:</span> <span class="nx">Double</span><span class="p">,</span> <span class="nx">blue</span><span class="o">:</span> <span class="nx">Double</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">red</span>   <span class="o">=</span> <span class="nx">red</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">green</span> <span class="o">=</span> <span class="nx">green</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">blue</span>  <span class="o">=</span> <span class="nx">blue</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">magenta</span> <span class="o">=</span> <span class="nx">Color</span><span class="p">(</span><span class="nx">red</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nx">green</span><span class="o">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">blue</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你会发现构造器的第一个内部参数名也会默认作为其外部参数名供调用，这一点与方法不同（方法不会默认将第一个内部参数名作为外部参数名使用），因为方法名可以在结尾加上介词来烘托出第一个参数的名字，这样就不需要为第一个参数弄一个外部参数名了，但是构造器只能用<code>init</code>关键字来定义。</p>

<p>如果你定制的类型包含一个逻辑上允许取值为空的存储型属性&mdash;不管是因为它无法在初始化时赋值，还是因为它可以在之后某个时间点可以赋值为空&mdash;你都需要将它定义为可选类型<code>optional type</code>。可选类型的属性将自动初始化为空<code>nil</code>，表示这个属性是故意在初始化时设置为空的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">SurveyQuestion</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">text</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">response</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">ask</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">println</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">cheeseQuestion</span> <span class="o">=</span> <span class="nx">SurveyQuestion</span><span class="p">(</span><span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;Do you like cheese?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">cheeseQuestion</span><span class="p">.</span><span class="nx">ask</span><span class="p">()</span>
</span><span class='line'><span class="c1">// 输出 &quot;Do you like cheese?&quot;</span>
</span><span class='line'><span class="nx">cheeseQuestion</span><span class="p">.</span><span class="nx">response</span> <span class="o">=</span> <span class="err">&quot;</span><span class="nx">Yes</span><span class="p">,</span> <span class="nx">I</span> <span class="k">do</span> <span class="nx">like</span> <span class="nx">cheese</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>调查问题在问题提出之后，我们才能得到回答。所以我们将属性回答response声明为String?类型，或者说是可选字符串类型optional String。当SurveyQuestion实例化时，它将自动赋值为空nil，表明暂时还不存在此字符串。<br/>
只要在构造过程结束前常量的值能确定，你可以在构造过程中的任意时间点修改常量属性的值。尽管text属性是常量，我们仍然可以在其类的构造器中设置它的值。<strong>对某个类实例来说，它的常量属性只能在定义它的类的构造过程中修改；不能在子类中修改。</strong></p>

<h2>默认构造器</h2>

<p>Swift将为所有属性已提供默认值的且自身没有定义任何构造器的结构体或基类，提供一个默认的构造器。这个默认构造器将简单的创建一个所有属性值都设置为默认值的实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">ShoppingListItem</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">quantity</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">purchased</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">ShoppingListItem</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>ShoppingListItem</code>类没有父类（是基类），所有属性都有默认值（可选属性默认值为<code>nil</code>），所以可以直接调用默认的无参数构造器来初始化。<br/>
除上面提到的默认构造器，如果结构体对所有存储型属性提供了默认值且自身没有提供定制的构造器，它们能自动获得一个<strong>逐一成员构造器（Memberwise Initializers）</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">struct</span> <span class="nx">Size</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">height</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">twoByTwo</span> <span class="o">=</span> <span class="nx">Size</span><span class="p">(</span><span class="nx">width</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
逐一成员构造器是用来初始化结构体新实例里成员属性的快捷方法。我们在调用逐一成员构造器时，通过与成员属性名相同的参数名进行传值来完成对成员属性的初始赋值。</p>

<h2>值类型的构造器代理</h2>

<p>构造器可以通过调用其它构造器来完成实例的部分构造过程。这一过程称为构造器代理，它能减少多个构造器间的代码重复：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">struct</span> <span class="nx">Size</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">height</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">struct</span> <span class="nx">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">struct</span> <span class="nx">Rect</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">origin</span> <span class="o">=</span> <span class="nx">Point</span><span class="p">()</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="nx">Size</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">origin</span><span class="o">:</span> <span class="nx">Point</span><span class="p">,</span> <span class="nx">size</span><span class="o">:</span> <span class="nx">Size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">origin</span> <span class="o">=</span> <span class="nx">origin</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="nx">size</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">center</span><span class="o">:</span> <span class="nx">Point</span><span class="p">,</span> <span class="nx">size</span><span class="o">:</span> <span class="nx">Size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">originX</span> <span class="o">=</span> <span class="nx">center</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="p">(</span><span class="nx">size</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="kd">let</span> <span class="nx">originY</span> <span class="o">=</span> <span class="nx">center</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="p">(</span><span class="nx">size</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">origin</span><span class="o">:</span> <span class="nx">Point</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="nx">originX</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">originY</span><span class="p">),</span> <span class="nx">size</span><span class="o">:</span> <span class="nx">size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在值类型中，如果你添加了自定义构造器（如<code>init(center: Point, size: Size)</code>），Swift不会再为结构体生成一个默认构造器和逐一成员构造器，所以我们自己定义了<code>init()</code>和<code>init(origin: Point, size: Size)</code>，他们与自动生成的默认构造器和逐一成员构造器是一样的。这样子会显得很麻烦，我们可以将自定义构造器<code>init(center: Point, size: Size)</code>写在结构体<code>Rect</code>的扩展（<code>extension</code>）里，这样就不用自己把默认构造器和逐一成员构造器写一遍了。</p>

<p>构造器<code>init(center:size:)</code>先通过<code>center</code>和<code>size</code>的值计算出<code>origin</code>的坐标。然后再调用（或代理给）<code>init(origin:size:)</code>构造器来将新的<code>origin</code>和<code>size</code>值赋值到对应的属性中。因为值类型（结构体和枚举类型）不支持继承，所以构造器代理的过程相对简单，因为它们只能代理给本身提供的其它构造器：你只能在构造器内部调用<code>self.init</code></p>

<h2>类的继承和构造过程</h2>

<p>类里面的所有存储型属性&mdash;包括所有继承自父类的属性&mdash;都必须在构造过程中设置初始值。</p>

<p>Swift 提供了两种类型的类构造器来确保所有类实例中存储型属性都能获得初始值，它们分别是指定构造器(<code>Designated Initializers</code>)和便利构造器(<code>Convenience Initializers</code>)。</p>

<h3>指定构造器和便利构造器</h3>

<p>指定构造器是类中最主要的构造器。一个指定构造器将初始化类中提供的所有属性，并根据父类链往上调用父类的构造器来实现父类的初始化。<strong>每一个类都必须拥有至少一个指定构造器。</strong></p>

<p>便利构造器是类中比较次要的、辅助型的构造器。你可以定义便利构造器来调用同一个类中的指定构造器，并为其参数提供默认值。你也可以定义便利构造器来创建一个特殊用途或特定输入的实例。</p>

<p>类的指定构造器的写法跟值类型简单构造器一样，便利构造器也采用相同样式的写法，但需要在init关键字之前放置convenience关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">convenience</span> <span class="nx">init</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">statements</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>构造器链</h3>

<p>为了简化指定构造器和便利构造器之间的调用关系，Swift 采用以下三条规则来限制构造器之间的代理调用：</p>

<ol>
<li>指定构造器必须调用其直接父类的的指定构造器。</li>
<li>便利构造器必须调用同一类中定义的其它构造器。</li>
<li>便利构造器必须最终以调用一个指定构造器结束。</li>
</ol>


<p>一个更方便记忆的方法是:</p>

<ul>
<li>指定构造器必须总是向上代理</li>
<li>便利构造器必须总是横向代理</li>
</ul>


<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializerDelegation01_2x.png" alt="" />
举个栗子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Food</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">convenience</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;[Unnamed]&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">namedMeat</span> <span class="o">=</span> <span class="nx">Food</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Bacon&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// namedMeat 的名字是 &quot;Bacon”</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">mysteryMeat</span> <span class="o">=</span> <span class="nx">Food</span><span class="p">()</span>
</span><span class='line'><span class="c1">// mysteryMeat 的名字是 [Unnamed]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializersExample01_2x.png" alt="" /></p>

<h3>两段式构造过程</h3>

<p>Swift 中类的构造过程包含两个阶段。第一个阶段，每个存储型属性通过引入它们的类的构造器来设置初始值。当每一个存储型属性值被确定后，第二阶段开始，它给每个类一次机会在新实例准备使用之前进一步定制它们的存储型属性。<br/>
下图展示了在假定的子类和父类之间构造的阶段1：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/twoPhaseInitialization01_2x.png" alt="" /></p>

<p>指定构造器将确保所有子类的属性都有值，然后它将调用父类的指定构造器，并沿着造器链一直往上完成父类的构建过程。一旦父类中所有属性都有了初始值，实例的内存被认为是完全初始化，而阶段1也已完成。</p>

<p>以下展示了相同构造过程的阶段2：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/twoPhaseInitialization02_2x.png" alt="" /></p>

<p>父类中的指定构造器现在有机会进一步来定制实例（尽管它没有这种必要）。</p>

<p>一旦父类中的指定构造器完成调用，子类的构指定构造器可以执行更多的定制操作（同样，它也没有这种必要）。</p>

<p>最终，一旦子类的指定构造器完成调用，最开始被调用的便利构造器可以执行更多的定制操作。</p>

<p>两段式构造过程是基于<strong>安全检查</strong>的，可以简单的理解为：</p>

<ul>
<li>指定构造器初始化顺序：初始化类自己引入的属性->向上代理调用父类指定构造器->为继承的属性设置新值</li>
<li>便利构造器初始化顺序：代理调用同一类中的其它构造器->为任意属性赋新值</li>
<li>构造器在第一阶段构造完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self的值。</li>
</ul>


<h3>构造器的继承和重载</h3>

<p><strong>跟 Objective-C 中的子类不同，Swift 中的子类不会默认继承父类的构造器。</strong>这是为了防止你想初始化一个很牛逼的类，但是调用的却是它继承于父类的菜逼构造器，那将会是个悲剧。</p>

<p><strong>但是如果特定条件可以满足，父类构造器是可以被自动继承的：</strong></p>

<ol>
<li>如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器。</li>
<li>如果子类提供了所有父类指定构造器的实现&mdash;不管是通过规则1继承过来的，还是通过自定义实现的&mdash;它将自动继承所有父类的便利构造器。</li>
</ol>


<p>即使你在子类中添加了更多的便利构造器，这两条规则仍然适用。子类可以通过定义便利构造器来实现父类中的指定构造器，来部分满足规则2</p>

<p>如果你需要重写一个跟父类一样的构造器，无论是指定构造器还是便利构造器，不同于重载方法、属性和下标，在重载构造器时你没有必要使用关键字<code>override</code></p>

<p>还记得之前指定的<code>Food</code>类吧，现在它多了一个子类<code>RecipeIngredient</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">RecipeIngredient</span><span class="o">:</span> <span class="nx">Food</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">quantity</span><span class="o">:</span> <span class="nx">Int</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">quantity</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="nx">quantity</span>
</span><span class='line'>        <span class="kr">super</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">convenience</span> <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">quantity</span><span class="o">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可以看出来<code>RecipeIngredient</code>类的指定构造器和便利构造器都符合两段式构造安全检查，并且便利构造器跟<code>Food</code>类中的指定构造器具有相同的参数，尽管<code>RecipeIngredient</code>这个构造器是便利构造器，<code>RecipeIngredient</code>依然提供了对所有父类指定构造器的实现。因此，<code>RecipeIngredient</code>也能自动继承了所有父类的便利构造器(也就是<code>init()</code>):</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializersExample02_2x.png" alt="" /></p>

<p>上图中<code>RecipeIngredient</code>类继承的init()函数版本跟Food提供的版本是一样的，除了它是将任务代理给RecipeIngredient版本的init(name: String)而不是Food提供的版本。</p>

<p>食材都已经建立好了，下面开始采购吧！我们需要一个购物单，购物单中每一项是这样子的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">ShoppingListItem</span><span class="o">:</span> <span class="nx">RecipeIngredient</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">purchased</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">description</span><span class="o">:</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="s2">&quot;\(quantity) x \(name.lowercaseString)&quot;</span>
</span><span class='line'>        <span class="nx">output</span> <span class="o">+=</span> <span class="nx">purchased</span> <span class="o">?</span> <span class="s2">&quot; ✔&quot;</span> <span class="o">:</span> <span class="s2">&quot; ✘&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">output</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>由于它为自己引入的所有属性都提供了默认值，并且自己没有定义任何构造器，ShoppingListItem将自动继承所有父类中的指定构造器和便利构造器。</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Art/initializersExample03_2x.png" alt="" /></p>

<p>你可以使用全部三个继承来的构造器来创建ShoppingListItem的新实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">breakfastList</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="nx">ShoppingListItem</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">ShoppingListItem</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Bacon&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">ShoppingListItem</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Eggs&quot;</span><span class="p">,</span> <span class="nx">quantity</span><span class="o">:</span> <span class="mi">6</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="nx">breakfastList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Orange juice&quot;</span>
</span><span class='line'><span class="nx">breakfastList</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">purchased</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="k">for</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">breakfastList</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">description</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 1 x orange juice ✔</span>
</span><span class='line'><span class="c1">// 1 x bacon ✘</span>
</span><span class='line'><span class="c1">// 6 x eggs ✘</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>通过闭包和函数来设置属性的默认值</h2>

<p>如果某个存储型属性的默认值需要特别的定制或准备，你就可以使用闭包或全局函数来为其属性提供定制的默认值。每当某个属性所属的新类型实例创建时，对应的闭包或函数会被调用，而它们的返回值会当做默认值赋值给这个属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">SomeClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">someProperty</span><span class="o">:</span> <span class="nx">SomeType</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 在这个闭包中给 someProperty 创建一个默认值</span>
</span><span class='line'>        <span class="c1">// someValue 必须和 SomeType 类型相同</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">someValue</span>
</span><span class='line'>        <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>注意闭包结尾的大括号后面接了一对空的小括号。这是用来告诉 Swift 需要立刻执行此闭包。如果你忽略了这对括号，相当于是将闭包本身作为值赋值给了属性，而不是将闭包的返回值赋值给属性。</p>

<p>如果你使用闭包来初始化属性的值，请记住在闭包执行时，实例的其它部分都还没有初始化。这意味着你不能够在闭包里访问其它的属性，就算这个属性有默认值也不允许。同样，你也不能使用隐式的self属性，或者调用其它的实例方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让软件支持Retina]]></title>
    <link href="http://yulingtianxia.com/blog/2014/06/19/rang-ruan-jian-zhi-chi-retina/"/>
    <updated>2014-06-19T16:07:28+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/06/19/rang-ruan-jian-zhi-chi-retina</id>
    <content type="html"><![CDATA[<ol>
<li>右键单击程序，选择“显示包内容”</li>
<li>找到“info.plist”文件并打开</li>
<li>如果用Xcode打开：添加一个新的键值对，类型为Boolean，Key为“NSHighResolutionCapable”，Value选择“YES”；如果用其他软件打开，直接在plist节点中的dict中添加一个键值对就可以：<key>NSHighResolutionCapable</key><br/>
<true/></li>
<li>为了使系统更新，复制一份“软件.app”，改成别的名字如“软件1.app”，删除原来的“软件.app”，再把“软件1.app”重命名为“软件.app”</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optionals and Optional Chaining in Swift]]></title>
    <link href="http://yulingtianxia.com/blog/2014/06/17/optionals-and-optional-chaining-in-swift/"/>
    <updated>2014-06-17T20:42:17+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/06/17/optionals-and-optional-chaining-in-swift</id>
    <content type="html"><![CDATA[<p>可选类型（<code>Optionals</code>）在Swift中用于处理值可能缺失的情况，也就是说可能存在没有值的情况。C 和 Objective-C 中并没有可选类型这个概念。但在Objective-C中，一个方法的返回值可以是一个对象或<code>nil</code>值（<code>nil</code>表示缺少一个合法对象），而对象只是针对类而言，结构体、基本C类型和枚举并不适用<code>nil</code>来表示值的缺失，对于这些类型，Objective-C 方法一般会返回一个特殊值（比如<code>NSNotFound</code>）来暗示值缺失。这种表示“值缺失”方法不统一的局面使得调用方法的程序员蛋疼了-需要针对不同情况进行处理-但随着可选类型的诞生，这种情形在Swift中得到解决，<code>Optionals</code>可以表示任意类型值的缺失。</p>

<!--more-->


<h2>可选类型（Optionals）</h2>

<p>在Swift中，有时候需要把内容为数字的字符串转化成数字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">possibleNumber</span> <span class="o">=</span> <span class="s2">&quot;123&quot;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">convertedNumber</span> <span class="o">=</span> <span class="nx">possibleNumber</span><span class="p">.</span><span class="nx">toInt</span><span class="p">()</span>
</span><span class='line'><span class="c1">// convertedNumber 被推测为类型 &quot;Int?&quot;， 或者类型 &quot;optional Int&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
因为Swift是类型安全的语言，为了保证转化过程中不出错，<code>toInt()</code>方法返回的是一个<code>Optional&lt;Int&gt;</code>(也可写成<code>Int?</code>)类型的实例。如果被转化的字符串不是一个数字（比如是“hello world”），那样<code>toInt()</code>返回的内容将不含有<code>Int</code>值。这保证了整个过程不报错，下面我们可以“优雅的”检查下<code>convertedNumber</code>是否有<code>Int</code>值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="nx">convertedNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(possibleNumber) has an integer value of \(convertedNumber!)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(possibleNumber) could not be converted to an integer&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 输出 &quot;123 has an integer value of 123&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号（!）来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）</p>

<p>这里细心的同学可能看不懂了：<code>convertedNumber</code>不是应该是一个可选的整型值么，怎么还能作为条件判断的逻辑值（Bool）呢？让我们来分析下<code>Optional</code>类型的真身：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">enum</span> <span class="nx">Optional</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">:</span> <span class="nx">LogicValue</span><span class="p">,</span> <span class="nx">Reflectable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">None</span>
</span><span class='line'>    <span class="k">case</span> <span class="nx">Some</span><span class="p">(</span><span class="nx">T</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">_</span> <span class="nx">some</span><span class="o">:</span> <span class="nx">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Allow use in a Boolean context.</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">getLogicValue</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nx">Bool</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Haskell&#39;s fmap, which was mis-named</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">map</span><span class="o">&lt;</span><span class="nx">U</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">f</span><span class="o">:</span> <span class="p">(</span><span class="nx">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">U</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">getMirror</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nx">Mirror</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>原来可选类型是本质是一个枚举类型，包含两个成员：<code>None</code>和<code>Some</code>，其中<code>Some</code>成员还有一个类型为泛型<code>T</code>的关联值（Associated Values）。它之所以能够当做条件判断语句是因为它遵循了<code>LogicValue</code>协议：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">/// Protocol describing types that can be used as logical values within</span>
</span><span class='line'><span class="c1">/// a condition.</span>
</span><span class='line'><span class="c1">///</span>
</span><span class='line'><span class="c1">/// Types that conform to the `LogicValue` protocol can be used as</span>
</span><span class='line'><span class="c1">/// condition in various control statements (`if`, `while`, C-style</span>
</span><span class='line'><span class="c1">/// `for`) as well as other logical value contexts (e.g., `case`</span>
</span><span class='line'><span class="c1">/// statement guards).</span>
</span><span class='line'><span class="nx">protocol</span> <span class="nx">LogicValue</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">getLogicValue</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nx">Bool</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
看了Swift对<code>LogicValue</code>协议的描述，这下子应该明白了吧。光凭猜测大约知道：当可选类型有值的时候其实是<code>Some</code>成员，并在构造器<code>init(_ some: T)</code>调用时将值存储在<code>Some</code>成员的关联值中，此时<code>getLogicValue()</code>方法返回true；当可选类型没有值的时候其实是<code>None</code>成员，并在构造器<code>init()</code>调用时将<code>nil</code>给了<code>None</code>成员，具体细节不是很清楚。<br/>
看得出可选类型的设计借鉴了Haskell语言，至于<code>nil</code>到底是什么：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">/// A null sentinel value.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">nil</span><span class="o">:</span> <span class="nx">NilType</span> <span class="p">{</span> <span class="nx">get</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>nil</code>是<code>NilType</code>类型唯一的实例，好特殊啊。Swift 的<code>nil</code>和 Objective-C 中的<code>nil</code>并不一样。在 Objective-C 中，<code>nil</code>是一个指向不存在对象的指针。在 Swift 中，<code>nil</code>不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为<code>nil</code>，不只是对象类型。</p>

<p><strong>在Xcode6Beta3发布后，Swift中的nil类型被修改为字面量了，不再是NilType的实例</strong></p>

<p><strong>可选类型默认值为<code>nil</code></strong></p>

<p>除了用if语句判断和强制解析来获取可选类型中的值，还可以用可选绑定的方式来来判断可选类型是否包含值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">constantName</span> <span class="o">=</span> <span class="nx">someOptional</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">statements</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
于是之前的例子可以可以改写为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">actualNumber</span> <span class="o">=</span> <span class="nx">possibleNumber</span><span class="p">.</span><span class="nx">toInt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(possibleNumber) has an integer value of \(actualNumber)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(possibleNumber) could not be converted to an integer&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 输出 &quot;123 has an integer value of 123&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果<code>possibleNumber.toInt</code>返回的可选<code>Int</code>包含一个值，创建一个叫做<code>actualNumber</code>的新常量并将可选包含的值赋给它。它已经被可选类型包含的值初始化过，所以不需要再使用<code>!</code>后缀来获取它的值。</p>

<p>有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型总会有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。这种类型的可选状态被定义为<strong>隐式解析可选类型</strong>（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（String?）改成感叹号（String!）来声明一个隐式解析可选类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">possibleString</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span> <span class="o">=</span> <span class="s2">&quot;An optional string.&quot;</span>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="nx">possibleString</span><span class="o">!</span><span class="p">)</span> <span class="c1">// 需要惊叹号来获取值</span>
</span><span class='line'><span class="c1">// 输出 &quot;An optional string.&quot;</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">assumedString</span><span class="o">:</span> <span class="nb">String</span><span class="o">!</span> <span class="o">=</span> <span class="s2">&quot;An implicitly unwrapped optional string.&quot;</span>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="nx">assumedString</span><span class="p">)</span>  <span class="c1">// 不需要感叹号</span>
</span><span class='line'><span class="c1">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你仍然可以把隐式解析可选类型当做普通可选类型来判断它是否包含值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="nx">assumedString</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="nx">assumedString</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你也可以在可选绑定中使用隐式解析可选类型来检查并解析它的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">definiteString</span> <span class="o">=</span> <span class="nx">assumedString</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="nx">definiteString</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 输出 &quot;An implicitly unwrapped optional string.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可能看到这里你会觉得隐式解析可选类型的存在意义是什么？为何不直接用普通的非可选类型呢？其实<code>Implicitly Unwrapped Optionals</code>被用于类的初始化方法中，避免循环引用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Country</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">capitalCity</span><span class="o">:</span> <span class="nx">City</span><span class="o">!</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">capitalName</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">capitalCity</span> <span class="o">=</span> <span class="nx">City</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">capitalName</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="nx">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">City</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="nx">unowned</span> <span class="kd">let</span> <span class="nx">country</span><span class="o">:</span> <span class="nx">Country</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="nx">Country</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">country</span> <span class="o">=</span> <span class="nx">Country</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Canada&quot;</span><span class="p">,</span> <span class="nx">capitalName</span><span class="o">:</span> <span class="s2">&quot;Ottawa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(country.name)&#39;s capital city is called \(country.capitalCity.name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;Canada&#39;s capital city is called Ottawa”</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>因为编译器会将其认为默认<code>nil</code>，不需赋值就可以完成类的初始化，在例子中<code>capitalCity</code>还没被赋值时<code>Country</code>类就已经初始化并可以被引用；这样就能实现一行代码建立<code>Country</code>和<code>City</code>实例而不造成强引用循环。有关ARC的更多知识可以看看这篇<a href="http://yulingtianxia.com/blog/2014/06/17/swiftzhong-de-arc/">文章</a></p>

<h2>可选链（Optional Chaining）</h2>

<p>可选链（Optional Chaining）是一种可以请求和调用属性、方法及下标的过程，它的可选性体现于请求或调用的目标当前可能为空（nil）。如果可选的目标有值，那么调用就会成功；相反，如果选择的目标为空（nil），则这种调用将返回空（nil）。多次请求或调用可以被链接在一起形成一个链，如果任何一个节点为空（nil）将导致整个链失效。</p>

<p>可能官方的定义不接地气，先来个例子做铺垫：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">residence</span><span class="o">:</span> <span class="nx">Residence</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Residence</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">rooms</span> <span class="o">=</span> <span class="nx">Room</span><span class="p">[]()</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">numberOfRooms</span><span class="o">:</span> <span class="nx">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">rooms</span><span class="p">.</span><span class="nx">count</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">subscript</span><span class="p">(</span><span class="nx">i</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Room</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">rooms</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">printNumberOfRooms</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;The number of rooms is \(numberOfRooms)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">address</span><span class="o">:</span> <span class="nx">Address</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Room</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Address</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buildingName</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buildingNumber</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">street</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">buildingIdentifier</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">buildingName</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">buildingName</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">buildingNumber</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">buildingNumber</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>人（<code>Person</code>）可能会拥有住所（<code>Residence</code>），一个住所肯定会有一些带名字的房间（<code>Room</code>），还有可能注明所在地址（<code>Address</code>）。住所还提供了获取房间数目的方法，并能通过下标访问某个房间，而地址包含了一些可选的信息。</p>

<p>PS：不要嫌我墨迹，官方文档比我墨迹多了。。。</p>

<p>现在我造个人（邪恶的孩子面壁思过去！），就叫john</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">john</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果我们想知道john同学家房子大不大，有几个房间啊？但是直接问不太好，万一john家里穷漂泊不定四海为家，那不就玩脱了么？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">roomCount</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">!</span><span class="p">.</span><span class="nx">numberOfRooms</span>
</span><span class='line'><span class="c1">//将导致运行时错误</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>所以还是先问问他家有没有房子吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">roomCount</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">.</span><span class="nx">numberOfRooms</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;John&#39;s residence has \(roomCount) room(s).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;我造john的时候没给他分房子，这可怜孩子！&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;我造john的时候没给他分房子，这可怜孩子！&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可选链提供了一种另一种获得<code>numberOfRooms</code>的方法。利用可选链，使用<code>?</code>来代替原来<code>!</code>的位置，因为这种尝试获得<code>numberOfRooms</code>的操作有可能失败，可选链会返回<code>Int?</code>类型值。要注意的是，虽然<code>numberOfRooms</code>是非可选<code>Int</code>，这一点也成立。只要是通过可选链的请求就意味着最后<code>numberOfRooms</code>总是返回一个<code>Int?</code>而不是<code>Int</code>。</p>

<p>我们也可以在可选链上调用方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">.</span><span class="nx">printNumberOfRooms</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;It was possible to print the number of rooms.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;It was not possible to print the number of rooms.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;It was not possible to print the number of rooms.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>虽然<code>printNumberOfRooms</code>方法无返回值，但是它有一个隐式的返回类型<code>Void</code>，在可选链上调用后返回类型就成了<code>Void?</code>，既然是可选类型，就可以放到if语句条件判断中啦！</p>

<p>现在想看看john家第一间房子名字叫啥，但却怕人家没房子遭遇尴尬，不用怕：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">firstRoomName</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;The first room name is \(firstRoomName).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;连房子都没有更别提第一间房间名了！&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;连房子都没有更别提第一间房间名了！&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在下标调用中可选链的问号直接跟在<code>john.residence</code>的后面，在下标中括号的前面，因为<code>john.residence</code>才是可选链试图获得的可选值。（关键是<code>Person</code>不一定有<code>residence</code>，但<code>Residence</code>肯定有<code>rooms</code>）</p>

<p>造个john玩了人家这么久，还不快给人家分套房子！（其实是为了演示后面的<code>Address</code>）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">johnsHouse</span> <span class="o">=</span> <span class="nx">Residence</span><span class="p">()</span>
</span><span class='line'><span class="nx">johnsHouse</span><span class="p">.</span><span class="nx">rooms</span> <span class="o">+=</span> <span class="nx">Room</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Living Room&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">johnsHouse</span><span class="p">.</span><span class="nx">rooms</span> <span class="o">+=</span> <span class="nx">Room</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Kitchen&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">john</span><span class="p">.</span><span class="nx">residence</span> <span class="o">=</span> <span class="nx">johnsHouse</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">firstRoomName</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;The first room name is \(firstRoomName).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Unable to retrieve the first room name.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;The first room name is Living Room.&quot;。</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>现在john乔迁新居奔小康了，快问问他家地址，好串个门</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">johnsAddress</span> <span class="o">=</span> <span class="nx">Address</span><span class="p">()</span>
</span><span class='line'><span class="nx">johnsAddress</span><span class="p">.</span><span class="nx">buildingName</span> <span class="o">=</span> <span class="s2">&quot;The Larches&quot;</span>
</span><span class='line'><span class="nx">johnsAddress</span><span class="p">.</span><span class="nx">street</span> <span class="o">=</span> <span class="s2">&quot;Laurel Street&quot;</span>
</span><span class='line'><span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">!</span><span class="p">.</span><span class="nx">address</span> <span class="o">=</span> <span class="nx">johnsAddress</span>
</span><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">johnsStreet</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="o">?</span><span class="p">.</span><span class="nx">street</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;John&#39;s street name is \(johnsStreet).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Unable to retrieve the address.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;John&#39;s street name is Laurel Street.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
值得注意的是<code>john.residence</code>属性是一个可选类型并且已经不为<code>nil</code>(刚刚奔小康了嘛)，因此你需要在它获取<code>address</code>属性之前使用<code>!</code>强制解析以获得它的实际值。</p>

<p>虽然这条可选链上有两个问号（两层可选链），但其返回类型依然是可选类型（<code>String?</code>），而不是可选类型的嵌套（<code>String??</code>即<code>Optional&lt;Optional&lt;String&gt;&gt;</code>）。你可以将多层可选链连接在一起，可以掘取模型内更下层的属性方法和下标。然而多层可选链不能再添加比已经返回的可选值更多的层。 也就是说：</p>

<p><strong>如果你试图获得的类型不是可选类型，由于使用了可选链它将变成可选类型。 如果你试图获得的类型已经是可选类型，由于可选链它也不会提高可选性。</strong></p>

<p>前面的例子解释了如何通过可选链来获得可选类型属性值。你也可以通过可选链调用一个返回可选类型值的方法并按需链接该方法的返回值。 如上所述，<code>buildingIdentifier</code>方法在可选链调用后最终的返回值类型依然是<code>String?</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">buildingIdentifier</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="o">?</span><span class="p">.</span><span class="nx">buildingIdentifier</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;John&#39;s building identifier is \(buildingIdentifier).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;John&#39;s building identifier is The Larches.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果你还想进一步对方法返回值执行可选链，将可选链问号符放在方法括号的后面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nx">upper</span> <span class="o">=</span> <span class="nx">john</span><span class="p">.</span><span class="nx">residence</span><span class="o">?</span><span class="p">.</span><span class="nx">address</span><span class="o">?</span><span class="p">.</span><span class="nx">buildingIdentifier</span><span class="p">()</span><span class="o">?</span><span class="p">.</span><span class="nx">uppercaseString</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;John&#39;s uppercase building identifier is \(upper).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 打印 &quot;John&#39;s uppercase building identifier is THE LARCHES.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你将可选链问号符放在括号后面是因为你想要链接的可选值是<code>buildingIdentifier</code>方法的返回值，不是<code>buildingIdentifier</code>方法本身。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift中的ARC]]></title>
    <link href="http://yulingtianxia.com/blog/2014/06/17/swiftzhong-de-arc/"/>
    <updated>2014-06-17T10:32:38+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/06/17/swiftzhong-de-arc</id>
    <content type="html"><![CDATA[<p>Objective-C中的ARC被Swift很好的继承下来了，本文参考自Swift文档网上的翻译，主要重点记录下Swift中的ARC与OC对比需要注意的地方。</p>

<!--more-->


<h2>简介</h2>

<p>当你每次创建一个类的新的实例的时候，ARC 会分配一大块内存用来储存实例的信息。内存中会包含实例的类型信息，以及这个实例所有相关属性的值。此外，当实例不再被使用时，ARC 释放实例所占用的内存，并让释放的内存能挪作他用。这确保了不再被使用的实例，不会一直占用内存空间。</p>

<h2>类实例之间强引用循环的产生</h2>

<p>如果你对OC中的强引用循环很了解，可以直接跳过这节。</p>

<p>但是如果两个类的实例之间互相引用，这样就产生了强引用循环。下面展示了一个不经意产生强引用循环的例子。例子定义了两个类：<code>Person</code>和<code>Apartment</code>，用来建模公寓和它其中的居民:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">apartment</span><span class="o">:</span> <span class="nx">Apartment</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span> <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Apartment</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">number</span><span class="o">:</span> <span class="nx">Int</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">number</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tenant</span><span class="o">:</span> <span class="nx">Person</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span> <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Apartment #\(number) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>接下来的代码片段定义了两个可选类型的变量<code>john</code>和<code>number73</code>,并分别被设定为下面的<code>Apartment</code>和<code>Person</code>的实例。这两个变量都被初始化为<code>nil</code>，并为可选的（让它们可选是为了以后能销毁，为了演示程序）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">john</span><span class="o">:</span> <span class="nx">Person</span><span class="o">?</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">number73</span><span class="o">:</span> <span class="nx">Apartment</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>现在你可以创建特定的<code>Person</code>和<code>Apartment</code>实例并将类实例赋值给<code>john</code>和<code>number73</code>变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">john</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;John Appleseed&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">number73</span> <span class="o">=</span> <span class="nx">Apartment</span><span class="p">(</span><span class="nx">number</span><span class="o">:</span> <span class="mi">73</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在<code>john</code>和<code>number73</code>互相引用之前，它们的强引用关系是这样的：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle01_2x.png" alt="" /></p>

<p>现在你能够将这两个实例关联在一起，这样人就能有公寓住了，而公寓也有了房客。注意感叹号是用来强制解析可选变量<code>john</code>和<code>number73</code>中的实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">john</span><span class="o">!</span><span class="p">.</span><span class="nx">apartment</span> <span class="o">=</span> <span class="nx">number73</span>
</span><span class='line'><span class="nx">number73</span><span class="o">!</span><span class="p">.</span><span class="nx">tenant</span> <span class="o">=</span> <span class="nx">john</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在将两个实例联系在一起之后，强引用的关系变成了这样：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle02_2x.png" alt="" /></p>

<p>这样即使让<code>john</code>和<code>number73</code>断开它们持有的强引用，内存中的那两个<code>Person</code>和<code>Apartment</code>实例并不会销毁，因为它们互相引用，引用计数都为1：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">john</span> <span class="o">=</span> <span class="nx">nil</span>
</span><span class='line'><span class="nx">number73</span> <span class="o">=</span> <span class="nx">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>
当你把这两个变量设为<code>nil</code>时，没有任何一个析构函数被调用。强引用循环阻止了<code>Person</code>和<code>Apartment</code>类实例的销毁，并在你的应用程序中造成了内存泄漏。</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/referenceCycle03_2x.png" alt="" /></p>

<h2>如何解决实例间强引用循环</h2>

<h3>弱引用</h3>

<p>跟OC中的弱引用相似，声明属性或者变量时，在前面加上<code>weak</code>关键字表明这是一个弱引用。弱引用不会牢牢保持住引用的实例，并且不会阻止 ARC 销毁被引用的实例。因为弱引用的值会变化并可能为<code>nil</code>，所以弱引用不能是常量，必须是可选类型（Optional）。因为弱引用不会保持所引用的实例，即使引用存在，实例也有可能被销毁。因此，ARC 会在引用的实例被销毁后自动将其赋值为nil。</p>

<p>下面的例子跟上面<code>Person</code>和<code>Apartment</code>的例子一致，但是有一个重要的区别。这一次，<code>Apartment</code>的<code>tenant</code>属性被声明为弱引用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span> <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">apartment</span><span class="o">:</span> <span class="nx">Apartment</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span> <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Apartment</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">number</span><span class="o">:</span> <span class="nx">Int</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">number</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="p">}</span>
</span><span class='line'>    <span class="nx">weak</span> <span class="kd">var</span> <span class="nx">tenant</span><span class="o">:</span> <span class="nx">Person</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span> <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Apartment #\(number) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
然后跟之前一样，建立两个变量（<code>john</code>和<code>number73</code>）之间的强引用，并关联两个实例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">john</span><span class="o">:</span> <span class="nx">Person</span><span class="o">?</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">number73</span><span class="o">:</span> <span class="nx">Apartment</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="nx">john</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;John Appleseed&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">number73</span> <span class="o">=</span> <span class="nx">Apartment</span><span class="p">(</span><span class="nx">number</span><span class="o">:</span> <span class="mi">73</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">john</span><span class="o">!</span><span class="p">.</span><span class="nx">apartment</span> <span class="o">=</span> <span class="nx">number73</span>
</span><span class='line'><span class="nx">number73</span><span class="o">!</span><span class="p">.</span><span class="nx">tenant</span> <span class="o">=</span> <span class="nx">john</span>
</span></code></pre></td></tr></table></div></figure>


<p>
现在的引用关系如下：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference01_2x.png" alt="" /></p>

<p>当<code>john</code>的强引用断开后，引用关系变成了这样子：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference02_2x.png" alt="" /></p>

<p>因为没有强引用指向<code>Person</code>实例，它的引用计数为0，所以该实例会被销毁。因此<code>number73</code>指向的<code>Apartment</code>实例的的引用计数会变为1，因为<code>Person</code>实例销毁后，其<code>apartment</code>属性对<code>Apartment</code>实例的强引用也会断开。此时如果再断开<code>number73</code>对<code>Apartment</code>实例的强引用：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/weakReference03_2x.png" alt="" /></p>

<p><code>Apartment</code>实例因为引用计数为0，会被销毁，到此为止强引用循环被打破。</p>

<h3>无主引用</h3>

<p>和弱引用类似，无主引用不会牢牢保持住引用的实例。和弱引用不同的是，无主引用是永远有值的（不能为<code>nil</code>）。因此，无主引用总是被定义为非可选类型（non-optional type）。你可以在声明属性或者变量时，在前面加上关键字<code>unowned</code>表示这是一个无主引用。</p>

<p>下面的例子定义了两个类，<code>Customer</code>和<code>CreditCard</code>，模拟了银行客户和客户的信用卡。一个客户可能有或者没有信用卡，但是一张信用卡总是关联着一个客户。所以<code>Customer</code>类的<code>card</code>属性可以为<code>nil</code>，但是<code>CreditCard</code>类的<code>customer</code>属性不能为<code>nil</code>，所以创建CreditCard实例的时候必须给<code>customer</code>属性赋值避免其为<code>nil</code>。将<code>customer</code>属性定义为无主引用，用以避免循环强引用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Customer</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">card</span><span class="o">:</span> <span class="nx">CreditCard</span><span class="o">?</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span> <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">CreditCard</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">number</span><span class="o">:</span> <span class="nx">Int</span>
</span><span class='line'>    <span class="nx">unowned</span> <span class="kd">let</span> <span class="nx">customer</span><span class="o">:</span> <span class="nx">Customer</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">number</span><span class="o">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">customer</span><span class="o">:</span> <span class="nx">Customer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">customer</span> <span class="o">=</span> <span class="nx">customer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span> <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Card #\(number) is being deinitialized&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">john</span><span class="o">:</span> <span class="nx">Customer</span><span class="o">?</span>
</span><span class='line'><span class="nx">john</span> <span class="o">=</span> <span class="nx">Customer</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;John Appleseed&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">john</span><span class="o">!</span><span class="p">.</span><span class="nx">card</span> <span class="o">=</span> <span class="nx">CreditCard</span><span class="p">(</span><span class="nx">number</span><span class="o">:</span> <span class="mi">1234</span><span class="nx">_5678_9012_3456</span><span class="p">,</span> <span class="nx">customer</span><span class="o">:</span> <span class="nx">john</span><span class="o">!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
关联两个实例后，引用关系如下：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/unownedReference01_2x.png" alt="" /></p>

<p>由于<code>customer</code>的无主引用，当你断开<code>john</code>变量持有的强引用时，再也没有指向<code>Customer</code>实例的强引用了：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/unownedReference02_2x.png" alt="" /></p>

<p>于是<code>Customer</code>实例被销毁，这样又导致没有强引用指向<code>CreditCard</code>实例，最后<code>CreditCard</code>实例也被销毁了，这样说明强引用循环被打破了。</p>

<h3>无主引用以及隐式解析可选属性</h3>

<p>下面的例子定义了两个类，<code>Country</code>和<code>City</code>，每个类将另外一个类的实例保存为属性。在这个模型中，每个国家必须有首都，而每一个城市必须属于一个国家。为了实现这种关系，<code>Country</code>类拥有一个<code>capitalCity</code>属性，而<code>City</code>类有一个<code>country</code>属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Country</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">capitalCity</span><span class="o">:</span> <span class="nx">City</span><span class="o">!</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">capitalName</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">capitalCity</span> <span class="o">=</span> <span class="nx">City</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nx">capitalName</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="nx">self</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">City</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="nx">unowned</span> <span class="kd">let</span> <span class="nx">country</span><span class="o">:</span> <span class="nx">Country</span>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">country</span><span class="o">:</span> <span class="nx">Country</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">country</span> <span class="o">=</span> <span class="nx">country</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在这种场景中，两个属性都必须有值，并且初始化完成后不能为<code>nil</code>。在这种场景中，需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</p>

<p>隐式解析可选(<code>Implicitly Unwrapped Optionals</code>)被用于类的初始化方法中，避免循环引用，因为编译器会将其认为默认<code>nil</code>，不需赋值就可以完成类的初始化，在例子中一旦<code>name</code>属性被赋值后(但<code>capitalCity</code>还没被赋值时)<code>Country</code>类就已经初始化并且自身（<code>self</code>）可以被引用；这样就能实现一行代码建立<code>Country</code>和<code>City</code>实例而不造成强引用循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">country</span> <span class="o">=</span> <span class="nx">Country</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Canada&quot;</span><span class="p">,</span> <span class="nx">capitalName</span><span class="o">:</span> <span class="s2">&quot;Ottawa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(country.name)&#39;s capital city is called \(country.capitalCity.name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// prints &quot;Canada&#39;s capital city is called Ottawa&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
使用隐式解析可选值的意义在于满足了两个类构造函数的需求。<code>capitalCity</code>属性在初始化完成后，能像非可选值一样使用和存取同时还避免了循环强引用。</p>

<h3>总结</h3>

<p><code>Person</code>和<code>Apartment</code>的例子展示了两个属性的值都允许为<code>nil</code>，并会潜在的产生循环强引用。这种场景最适合用弱引用来解决。</p>

<p><code>Customer</code>和<code>CreditCard</code>的例子展示了一个属性的值允许为<code>nil</code>，而另一个属性的值不允许为<code>nil</code>，并会潜在的产生循环强引用。这种场景最适合通过无主引用来解决。</p>

<p><code>Country</code>和<code>City</code>的例子展示了两个属性的值都不允许为<code>nil</code>，并会潜在的产生循环强引用。这种场景需要一个类使用无主属性，而另外一个类使用隐式解析可选属性。</p>

<h2>闭包引起的强引用循环</h2>

<p>强引用循环还会发生在当你将一个闭包赋值给类实例的某个属性，并且这个闭包体中又使用了实例。这个闭包体中可能访问了实例的某个属性，例如<code>self.someProperty</code>，或者闭包中调用了实例的某个方法，例如<code>self.someMethod</code>。这两种情况都导致了闭包 “捕获&#8221; <code>self</code>，因为闭包也是引用类型，从而产生了强引用循环。在Swift中闭包如果想使用外部的实例，不必像OC中的Block那样在外部实例前加<code>__block</code>加以修饰，而是可以直接用“值捕获”的方式捕获到闭包外面的实例。Swift 会决定捕获引用还是拷贝值，并负责管理内存释放。</p>

<p>Swift 有如下要求：只要在闭包内使用self的成员，就要用self.someProperty或者self.someMethod（而不只是someProperty或someMethod）。这提醒你可能会不小心就捕获了self。</p>

<p>在OC中也存在<code>Block</code>中引用<code>self</code>或<code>self</code>的属性而导致<code>self</code>被<code>Block</code> retain，进而产生引用循环，这也是为什么代理属性都被声明为<code>weak</code>的原因。</p>

<p>下面的例子为你展示了当一个闭包引用了self后是如何产生一个循环强引用的。例子中定义了一个叫HTMLElement的类，用一种简单的模型表示 HTML 中的一个单独的元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">HTMLElement</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">text</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="nx">lazy</span> <span class="kd">var</span> <span class="nx">asHTML</span><span class="o">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">text</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;&lt;\(self.name) /&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span> <span class="o">=</span> <span class="nx">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>HTMLElement</code>定义了一个<code>lazy</code>属性<code>asHTML</code>。这个属性引用了一个闭包，将<code>name</code>和<code>text</code>组合成 HTML 字符串片段。该属性是<code>() -&gt; String</code>类型，或者可以理解为“一个没有参数，返回<code>String</code>的函数”。因为该闭包无参数并可推断出返回值类型，所以采取了简写，省略了关键字<code>in</code>和闭包的参数和返回值类型声明。</p>

<p><code>asHTML</code>声明为<code>lazy</code>属性，因为只有当元素确实需要处理为HTML输出的字符串时，才需要使用<code>asHTML</code>。也就是说，在默认的闭包中可以使用<code>self</code>，因为只有当初始化完成以及<code>self</code>确实存在后，才能访问<code>lazy</code>属性。</p>

<p>下面的代码展示了如何用HTMLElement类创建实例并打印消息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">paragraph</span><span class="o">:</span> <span class="nx">HTMLElement</span><span class="o">?</span> <span class="o">=</span> <span class="nx">HTMLElement</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;p&quot;</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s2">&quot;hello, world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="nx">paragraph</span><span class="o">!</span><span class="p">.</span><span class="nx">asHTML</span><span class="p">())</span>
</span><span class='line'><span class="c1">// prints&quot;hello, world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>不幸的是，上面写的HTMLElement类产生了类实例和asHTML默认值的闭包之间的循环强引用。循环强引用如下图所示：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/closureReferenceCycle01_2x.png" alt="" /></p>

<p>虽然闭包多次使用了<code>self</code>，它只捕获<code>HTMLElement</code>实例的一个强引用。如果设置<code>paragraph</code>变量为<code>nil</code>，打破它持有的<code>HTMLElement</code>实例的强引用，<code>HTMLElement</code>实例和它的闭包都不会被销毁，也是因为强引用循环</p>

<h2>解决闭包引起的循环强引用</h2>

<p>Swift 提供了一种优雅的方法来解决这个问题，称之为闭包占用列表（closuer capture list）</p>

<h3>定义捕获列表</h3>

<p>捕获列表放置在闭包参数列表和返回类型之前，列表中每项都是由weak或unowned关键字和实例的引用（如self或someInstance）成对组成。每项都通过逗号分开写在方括号中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">lazy</span> <span class="kd">var</span> <span class="nx">someClosure</span><span class="o">:</span> <span class="p">(</span><span class="nx">Int</span><span class="p">,</span> <span class="nb">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">unowned</span> <span class="nx">self</span><span class="p">]</span> <span class="p">(</span><span class="nx">index</span><span class="o">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">stringToProcess</span><span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// closure body goes here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果闭包没有指定参数列表或者返回类型，则可以通过上下文推断，那么可以捕获列表放在闭包开始的地方，跟着是关键字<code>in</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">lazy</span> <span class="kd">var</span> <span class="nx">someClosure</span><span class="o">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nx">unowned</span> <span class="nx">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>    <span class="c1">// closure body goes here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>捕获列表中的弱引用和无主引用</h3>

<p>当捕获引用有时可能会是nil时，将闭包内的捕获定义为弱引用。<br/>
当闭包和捕获的实例总是互相引用时并且总是同时销毁时，将闭包内的捕获定义为无主引用。<br/>
如果捕获的引用绝对不会置为nil，应该用无主引用，而不是弱引用。</p>

<p>前面的<code>HTMLElement</code>例子中，无主引用是正确的解决循环强引用的方法。这样编写<code>HTMLElement</code>类来避免循环强引用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">HTMLElement</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">text</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="nx">lazy</span> <span class="kd">var</span> <span class="nx">asHTML</span><span class="o">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nx">unowned</span> <span class="nx">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">if</span> <span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">text</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;&lt;\(self.name)&gt;\(text)&lt;/\(self.name)&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;&lt;\(self.name) /&gt;&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">init</span><span class="p">(</span><span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="nb">String</span><span class="o">?</span> <span class="o">=</span> <span class="nx">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">deinit</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(name) is being deinitialized&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>上面的例子只是多了一个捕获列表并增加关键字<code>in</code>，使用捕获列表后引用关系如下图所示：</p>

<p><img src="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Art/closureReferenceCycle02_2x.png" alt="" /></p>

<p>这一次，闭包以无主引用的形式捕获<code>self</code>，并不会持有<code>HTMLElement</code>实例的强引用。如果将<code>paragraph</code>赋值为<code>nil</code>，<code>HTMLElement</code>实例将会被销毁，并能看到它的析构函数打印出的消息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">paragraph</span> <span class="o">=</span> <span class="nx">nil</span>
</span><span class='line'><span class="c1">// prints &quot;p is being deinitialized&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift重载和自定义运算符]]></title>
    <link href="http://yulingtianxia.com/blog/2014/06/16/swiftzhong-zai-yun-suan-fu/"/>
    <updated>2014-06-16T20:45:20+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/06/16/swiftzhong-zai-yun-suan-fu</id>
    <content type="html"><![CDATA[<p>最近一直边忙毕设边学Swift，终于看完了官方的教程（语言参考暂不打算看），在iBooks上做了一些笔记（看英文伤不起），感觉Swift是一门大杂烩类型的语言，我会记录一些我自认为以前遇到较少或者需要重点记忆的语法特性，在此作为分享，这次是运算符的重载，几乎每门语言都有，只是语法不一样罢了。</p>

<!--more-->


<h2>运算符重载</h2>

<p>在Swift的官方文档中运算符重载叫做运算符函数（Operator Functions），顾名思义就是对已经有的运算符覆盖定义自己的函数实现。三元运算符（a？b：c）和默认的默认的赋值符(=)是不可重载的。</p>

<h3>中缀运算符的重载</h3>

<p>在<code>func</code>关键字前使用属性<code>@infix</code>来重载中缀运算符，函数名为想要重载的中缀运算符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">struct</span> <span class="nx">Vector2D</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">@</span><span class="nx">infix</span> <span class="nx">func</span> <span class="o">+</span> <span class="p">(</span><span class="nx">left</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">,</span> <span class="nx">right</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Vector2D</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="nx">left</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">right</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">left</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="nx">right</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
上面的代码是对结构体<code>Vector2D</code>之间双目运算符<code>+</code>的重载，下面可以直接使用<code>+</code>对<code>Vector2D</code>进行操作了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">vector</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">anotherVector</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">combinedVector</span> <span class="o">=</span> <span class="nx">vector</span> <span class="o">+</span> <span class="nx">anotherVector</span>
</span><span class='line'><span class="c1">// combinedVector 是一个新的Vector2D, 值为 (5.0, 5.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>除了对双目运算符的重载，还有对比较运算符的重载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">infix</span> <span class="nx">func</span> <span class="o">==</span> <span class="p">(</span><span class="nx">left</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">,</span> <span class="nx">right</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">left</span><span class="p">.</span><span class="nx">x</span> <span class="o">==</span> <span class="nx">right</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">left</span><span class="p">.</span><span class="nx">y</span> <span class="o">==</span> <span class="nx">right</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nx">infix</span> <span class="nx">func</span> <span class="o">!=</span> <span class="p">(</span><span class="nx">left</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">,</span> <span class="nx">right</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="nx">left</span> <span class="o">==</span> <span class="nx">right</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>现在我们可以使用这两个运算符来判断两个Vector2D对象是否相等</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">twoThree</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">anotherTwoThree</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">twoThree</span> <span class="o">==</span> <span class="nx">anotherTwoThree</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;这两个向量是相等的.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// prints &quot;这两个向量是相等的.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>前缀和后缀运算符的重载</h3>

<p>前缀和后缀运算符重载跟中缀运算符重载类似，只是将<code>func</code>关键字前的属性替换成<code>@prefix</code>和<code>@postfix</code>，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">prefix</span> <span class="nx">func</span> <span class="o">-</span> <span class="p">(</span><span class="nx">vector</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Vector2D</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="o">-</span><span class="nx">vector</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="o">-</span><span class="nx">vector</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这段代码为<code>Vector2D</code>类型提供了单目减运算，并且是前缀，也就是取负操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">positive</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">negative</span> <span class="o">=</span> <span class="o">-</span><span class="nx">positive</span>
</span><span class='line'><span class="c1">// negative 为 (-3.0, -4.0)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">alsoPositive</span> <span class="o">=</span> <span class="o">-</span><span class="nx">negative</span>
</span><span class='line'><span class="c1">// alsoPositive 为 (3.0, 4.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>组合赋值运算符的重载</h3>

<p>组合赋值是其他运算符和赋值运算符一起执行的运算。如<code>+=</code>把加运算和赋值运算组合成一个操作。实现一个组合赋值符号需要使用<code>@assignment</code>属性，还需要把运算符的左参数设置成<code>inout</code>，因为这个参数会在运算符函数内直接修改它的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">assignment</span> <span class="nx">func</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">inout</span> <span class="nx">left</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">,</span> <span class="nx">right</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">left</span> <span class="o">=</span> <span class="nx">left</span> <span class="o">+</span> <span class="nx">right</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>因为加法运算在之前定义过了，这里无需重新定义。所以，加赋运算符函数使用已经存在的高级加法运算符函数来执行左值加右值的运算。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">original</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">vectorToAdd</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'><span class="nx">original</span> <span class="o">+=</span> <span class="nx">vectorToAdd</span>
</span><span class='line'><span class="c1">// original 现在为 (4.0, 6.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
你可以将<code>@assignment</code>属性和 <code>@prefix</code> 或 <code>@postfix</code> 属性起来组合，实现一个<code>Vector2D</code>的前缀运算符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">prefix</span> <span class="err">@</span><span class="nx">assignment</span> <span class="nx">func</span> <span class="o">++</span> <span class="p">(</span><span class="nx">inout</span> <span class="nx">vector</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Vector2D</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">vector</span> <span class="o">+=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">vector</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这个前缀使用了已经定义好的高级加赋运算，将自己加上一个值为<code>(1.0，1.0)</code>的对象然后赋给自己，然后再将自己返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">toIncrement</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">afterIncrement</span> <span class="o">=</span> <span class="o">++</span><span class="nx">toIncrement</span>
</span><span class='line'><span class="c1">// toIncrement 现在是 (4.0, 5.0)</span>
</span><span class='line'><span class="c1">// afterIncrement 现在也是 (4.0, 5.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>自定义运算符</h2>

<p>标准的运算符不够玩，那你可以声明一些个性的运算符，但个性的运算符只能使用这些字符 <code>/ = - + * % &lt; &gt;！&amp; | ^。~</code>  <br/>
新的运算符声明需在全局域使用<code>operator</code>关键字声明，可以声明为前缀，中缀或后缀的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">operator</span> <span class="nx">prefix</span> <span class="o">+++</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这段代码定义了一个新的前缀运算符叫<code>+++</code>，此前Swift并不存在这个运算符。此处为了演示，我们让<code>+++</code>对<code>Vector2D</code>对象的操作定义为“双自增”（prefix doubling incrementer） 这样一个独有的操作，这个操作使用了之前定义的加赋运算（<code>+=</code>）实现了自已加上自己然后返回的运算。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">@</span><span class="nx">prefix</span> <span class="err">@</span><span class="nx">assignment</span> <span class="nx">func</span> <span class="o">+++</span> <span class="p">(</span><span class="nx">inout</span> <span class="nx">vector</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Vector2D</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">vector</span> <span class="o">+=</span> <span class="nx">vector</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">vector</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>+++</code>运算的实现是把自己再加上自己</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">toBeDoubled</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">afterDoubling</span> <span class="o">=</span> <span class="o">+++</span><span class="nx">toBeDoubled</span>
</span><span class='line'><span class="c1">// toBeDoubled 现在是 (2.0, 8.0)</span>
</span><span class='line'><span class="c1">// afterDoubling 现在也是 (2.0, 8.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
此外还可以定义运算符的结合性(associativity)和优先级(precedence)，结合性(associativity)的值可取的值有left，right和none。左结合运算符跟其他优先级相同的左结合运算符写在一起时，会跟左边的操作数结合。同理，右结合运算符会跟右边的操作数结合。而非结合运算符不能跟其他相同优先级的运算符写在一起。<br/>
结合性(associativity)的值默认为none，优先级(precedence)默认为100。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">operator</span> <span class="nx">infix</span> <span class="o">+-</span> <span class="p">{</span> <span class="nx">associativity</span> <span class="nx">left</span> <span class="nx">precedence</span> <span class="mi">140</span> <span class="p">}</span>
</span><span class='line'><span class="nx">func</span> <span class="o">+-</span> <span class="p">(</span><span class="nx">left</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">,</span> <span class="nx">right</span><span class="o">:</span> <span class="nx">Vector2D</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Vector2D</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="nx">left</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">right</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">left</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">right</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">firstVector</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">secondVector</span> <span class="o">=</span> <span class="nx">Vector2D</span><span class="p">(</span><span class="nx">x</span><span class="o">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mf">4.0</span><span class="p">)</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">plusMinusVector</span> <span class="o">=</span> <span class="nx">firstVector</span> <span class="o">+-</span> <span class="nx">secondVector</span>
</span><span class='line'><span class="c1">// plusMinusVector 此时的值为 (4.0, -2.0)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Publish Your Pods on CocoaPods with Trunk]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/26/publish-your-pods-on-cocoapods-with-trunk/"/>
    <updated>2014-05-26T12:03:08+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/26/publish-your-pods-on-cocoapods-with-trunk</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>2014年5月20日，CocoaPods不再接受向<a href="git@github.com:CocoaPods/Specs.git">CocoaPods/Specs</a>的pull request，官方的说法是为了安全考虑，防止每个人的pod被其他人修改，于是CocoaPods团队开发了trunk服务，这样每个人都是其发布的pod的owner，没有权限的人无法修改，这样更安全。</p>

<p>更改后的提交架构是这样的：(来自官方图片)</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353388207.png" alt="" /></p>

<!--more-->


<p>以前的podspec文件都是ruby格式，而trunk为我们带来了更轻便的json格式，你后你可以用json来配置你的pod了。不用担心过去我们发布的pod，他们依然健在，并且trunk会将podspec文件转化为podspec.json文件。</p>

<p>这里给出一个官方的介绍链接（自备梯子）：<a href="http://blog.cocoapods.org/CocoaPods-Trunk/#transition">http://blog.cocoapods.org/CocoaPods-Trunk/#transition</a></p>

<p><strong>废话不多说，简要介绍下如何使用trunk新建我们的pod：</strong></p>

<h2>开始注册</h2>

<p>trunk需要CocoaPods 0.33版本以上，用<code>pod --version</code>命令查看版本，如果版本低，需要升级：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install cocoapods
</span><span class='line'>pod setup
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>然后会一直卡在<code>Setting up CocoaPods master repo</code>这里，这条命令用于跟新本地电脑上的保存的Pods依赖库tree。由于每天有很多人会创建或者更新Pods依赖库，这条命令执行的时候会相当慢，还请耐心等待。我们需要经常执行这条命令，否则有新的Pods依赖库的时候执行pod search命令是搜不出来的。再开启一个终端，通过<code>cd  ~/.cocoapods</code>命令进入cocoapods根目录，然后通过<code>du -sh *</code>命令查看总的文件大小，如果隔一阵子会增加，那么说明一切正常，下载速度取决于你的网络。</p>

<p>更新完成后，下一步是注册trunk，这一步需要自备梯子，否则就会出现这种<a href="https://github.com/CocoaPods/CocoaPods/issues/2174">问题</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod trunk register yulingtianxia@gmail.com 'Yang Xiaoyu' --description='macbook pro' --verbose</span></code></pre></td></tr></table></div></figure>


<p>
上面的命令是我注册时使用的，你需要把邮箱和名字以及描述替换成你的，加上<code>--verbose</code>可以输出详细debug信息，方便出错时查看。</p>

<p>注册后CocoaPods会给你的邮箱发送验证链接，点击后就注册成功了，可以用<code>pod trunk me</code>命令查看自己的注册信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bogon:YXYNumberAnimationLabel yangxiaoyu$ pod trunk me
</span><span class='line'>  - Name:     Yang Xiaoyu
</span><span class='line'>  - Email:    yulingtianxia@gmail.com
</span><span class='line'>  - Since:    May 25th, 20:27
</span><span class='line'>  - Sessions: 
</span><span class='line'>    - May 25th, 20:27 - September 30th, 22:41. IP: 23.228.209.171
</span><span class='line'>  Description: macbook pro</span></code></pre></td></tr></table></div></figure>


<p>
上面是我的注册信息，CocoaPods不通过密码来验证用户，而是通过一个session token。</p>

<h2>部署你的Pod</h2>

<p>首先你需要建立一个podspec文件，这是我的podspec文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pod::Spec.new do |s|
</span><span class='line'>  s.name         = "YXYNumberAnimationLabel"
</span><span class='line'>  s.version      = "1.0.1"
</span><span class='line'>  s.summary      = "一个可以动起来的数字Label"
</span><span class='line'>  s.description  = &lt;&lt;-DESC
</span><span class='line'>                    通过设置数字变化的插值来展现动画效果
</span><span class='line'>                   DESC
</span><span class='line'>  s.homepage     = "https://github.com/yulingtianxia/YXYNumberAnimationLabel"
</span><span class='line'>  
</span><span class='line'>  s.license      = 'MIT'
</span><span class='line'>  s.author       = { "YangXiaoyu" =&gt; "yulingtianxia@gmail.com" }
</span><span class='line'>  s.social_media_url = "http://twitter.com/yulingtianxia"
</span><span class='line'>  s.source       = { :git =&gt; "https://github.com/yulingtianxia/YXYNumberAnimationLabel.git", :tag =&gt; s.version.to_s }
</span><span class='line'>
</span><span class='line'>  s.platform     = :ios, '6.0'
</span><span class='line'>  s.requires_arc = true
</span><span class='line'>
</span><span class='line'>  s.source_files = 'YXYNumberAnimationLabel/*'
</span><span class='line'>  s.frameworks = 'Foundation', 'UIKit'
</span><span class='line'>  #s.private_header_files = 'Classes/ios/private/*.h'
</span><span class='line'>  
</span><span class='line'>  #s.dependency 'FLKAutoLayout', '~&gt; 0.1'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>
<strong>具体配置什么的大家走很熟悉，这里只是讲述使用trunk后需要注意的地方和新的操作</strong></p>

<p>在验证和上传你的podspec文件到trunk之前，需要将你的源码push到Github上，tag一个版本号并发布一个release版本，这样podspec文件中的<code>s.source</code>的值才能是准确的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add -A && git commit -m "Release 1.0.1."  
</span><span class='line'>git tag '1.0.1'  
</span><span class='line'>git push --tags  
</span><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这两条命令是为pod添加版本号并打上tag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set the new version to 1.0.1
</span><span class='line'>set the new tag to 1.0.1</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在你podspec文件下的路径运行<code>pod trunk push YXYNumberAnimationLabel.podspec</code> 命令，同样需要翻墙梯子自备，别忘了将<code>YXYNumberAnimationLabel.podspec</code>替换成你的podspec文件名。</p>

<p>pod trunk push命令做了如下三个工作：</p>

<ol>
<li>验证你本地的podspec文件（你也可以用<code>pod lib lint</code>命令来验证）</li>
<li>上传你的podspec文件到trunk</li>
<li>将你的podspec文件转化成trunk需要的JSON文件</li>
</ol>


<p>如果部署成功，CocosPods会在Twitter上@你</p>

<p>就像文章最开始的架构图描述的那样，你在trunk中的操作依然会在<a href="git@github.com:CocoaPods/Specs.git">CocoaPods/Specs</a>仓库中更新。以后再做更改时只需要更新版本号然后通过trunk来提交，不用向<a href="git@github.com:CocoaPods/Specs.git">CocoaPods/Specs</a>pull request并等待审核和merge了。</p>

<p>运行<code>pod setup</code>来更新你的Pods依赖库tree后，再使用<code>pod search YXYNumberAnimationLabel</code>命令来查找刚刚加入的名字叫<code>YXYNumberAnimationLabel</code>的依赖库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt; YXYNumberAnimationLabel (1.0.1)
</span><span class='line'>   一个可以动起来的数字Label
</span><span class='line'>   pod 'YXYNumberAnimationLabel', '~&gt; 1.0.1'
</span><span class='line'>   - Homepage: https://github.com/yulingtianxia/YXYNumberAnimationLabel
</span><span class='line'>   - Source:   https://github.com/yulingtianxia/YXYNumberAnimationLabel.git
</span><span class='line'>   - Versions: 1.0.1, 1.0.0 [master repo]</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>将其他人加入到你的Pod</h2>

<p>为了让其他人也有权限来和你一起建设你的代码，你需要运行下面的命令来赋予别人权限，假如我将<code>kyle@cocoapods.org</code>加入到我的名字叫<code>ARAnalytics</code>的库中，我需要运行下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod trunk add-owner ARAnalytics kyle@cocoapods.org</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSPredicate]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/17/nspredicate/"/>
    <updated>2014-05-17T20:42:11+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/17/nspredicate</id>
    <content type="html"><![CDATA[<p>本文转载自<a href="http://nshipster.cn/nspredicate/">http://nshipster.cn/nspredicate/</a></p>

<p>NSPredicate是一个Foundation类，它指定数据被获取或者过滤的方式。它的查询语言就像SQL的WHERE和正则表达式的交叉一样，提供了具有表现力的，自然语言界面来定义一个集合被搜寻的逻辑条件。</p>

<!--more-->


<p>相比较抽象的谈论它，展示NSPredicate的使用方法更加容易，所以我们来重新审视<a href="http://nshipster.com/nssortdescriptor/">NSSortDescriptor</a>中使用的示例数据集吧：</p>

<table>
<thead>
<tr>
<th>索引 </th>
<th> 0 </th>
<th> 1 </th>
<th> 2 </th>
<th> 3 </th>
</tr>
</thead>
<tbody>
<tr>
<td>名 </td>
<td> Alice </td>
<td> Bob   </td>
<td> Charlie </td>
<td>  Quentin</td>
</tr>
<tr>
<td>姓 </td>
<td> Smith </td>
<td> Jones </td>
<td> Smith </td>
<td> Alberts</td>
</tr>
<tr>
<td>年龄  </td>
<td> 24    </td>
<td> 27    </td>
<td> 33    </td>
<td> 31</td>
</tr>
</tbody>
</table>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">firstName</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">lastName</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">age</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">firstName</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lastName</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark -</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">firstNames</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="s">@&quot;Alice&quot;</span><span class="p">,</span> <span class="s">@&quot;Bob&quot;</span><span class="p">,</span> <span class="s">@&quot;Charlie&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span> <span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">lastNames</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="s">@&quot;Smith&quot;</span><span class="p">,</span> <span class="s">@&quot;Jones&quot;</span><span class="p">,</span> <span class="s">@&quot;Smith&quot;</span><span class="p">,</span> <span class="s">@&quot;Alberts&quot;</span> <span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">ages</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="err">@</span><span class="mi">24</span><span class="p">,</span> <span class="err">@</span><span class="mi">27</span><span class="p">,</span> <span class="err">@</span><span class="mi">33</span><span class="p">,</span> <span class="err">@</span><span class="mi">31</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">firstNames</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">person</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="n">firstNames</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>    <span class="n">person</span><span class="p">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="n">lastNames</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>    <span class="n">person</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">ages</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">people</span> <span class="nl">addObject:</span><span class="n">person</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">bobPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;firstName = &#39;Bob&#39;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">smithPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;lastName = %@&quot;</span><span class="p">,</span> <span class="s">@&quot;Smith&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">thirtiesPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;age &gt;= 30&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&quot;Bob Jones&quot;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Bobs: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="n">bobPredicate</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&quot;Alice Smith&quot;, &quot;Charlie Smith&quot;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Smiths: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="n">smithPredicate</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&quot;Charlie Smith&quot;, &quot;Quentin Alberts&quot;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;30&#39;s: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="n">thirtiesPredicate</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>集合中使用NSPredicate</h2>

<p>Foundation提供使用谓词（predicate）来过滤NSArray／NSMutableArray&amp;NSSet／NSMutableSet的方法。</p>

<p>不可变的集合，NSArray&amp;NSSet，有可以通过评估接收到的predicate来返回一个不可变集合的方法<code>filteredArrayUsingPredicate:</code>和<code>filteredSetUsingPredicate:</code>。</p>

<p>可变集合，NSMutableArray&amp;NSMutableSet，可以使用方法<code>filterUsingPredicate:</code>，它可以通过运行接收到的谓词来移除评估结果为FALSE的对象。</p>

<p>NSDictionary可以用谓词来过滤它的键和值（两者都为NSArray对象）。NSOrderedSet可以由过滤的NSArray或NSSet生成一个新的有序的集，或者NSMutableSet可以简单的<code>removeObjectsInArray:</code>，来传递通过<em>否定</em>predicate过滤的对象。</p>

<h2>Core Data中使用NSPredicate</h2>

<p>NSFetchRequest有一个predicate属性，它可以指定管理对象应该被获取的逻辑条件。谓词的使用规则在这里同样适用，唯一的区别在于，在管理对象环境中，谓词由持久化存储助理（persistent store coordinator）评估，而不像集合那样在内存中被过滤。</p>

<h2>谓词语法</h2>

<h3>替换</h3>

<ul>
<li>%@是对值为字符串，数字或者日期的对象的替换值。</li>
<li>%K是key path的替换值。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">ageIs33Predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;%K = %@&quot;</span><span class="p">,</span> <span class="s">@&quot;age&quot;</span><span class="p">,</span> <span class="err">@</span><span class="mi">33</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&quot;Charlie Smith&quot;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Age 33: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="n">ageIs33Predicate</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
&ndash; $VARIABLE_NAME是可以被<code>NSPredicate -predicateWithSubstitutionVariables:</code>替换的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">namesBeginningWithLetterPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(firstName BEGINSWITH[cd] $letter) OR (lastName BEGINSWITH[cd] $letter)&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&quot;Alice Smith&quot;, &quot;Quentin Alberts&quot;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;&#39;A&#39; Names: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="p">[</span><span class="n">namesBeginningWithLetterPredicate</span> <span class="nl">predicateWithSubstitutionVariables:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;letter&quot;</span><span class="o">:</span> <span class="s">@&quot;A&quot;</span><span class="p">}]]);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>基本比较</h3>

<ul>
<li>=, ==：左边的表达式和右边的表达式相等。</li>
<li>>=, =>：左边的表达式大于或者等于右边的表达式。</li>
<li>&lt;=, =&lt;：左边的表达式小于等于右边的表达式。</li>
<li>>：左边的表达式大于右边的表达式。</li>
<li>&lt;：左边的表达式小于右边的表达式。</li>
<li>!=, &lt;>：左边的表达式不等于右边的表达式。</li>
<li>BETWEEN：左边的表达式等于右边的表达式的值或者介于它们之间。右边是一个有两个指定上限和下限的数值的数列（指定顺序的数列）。比如，1 BETWEEN { 0 , 33 }，或者$INPUT BETWEEN { $LOWER, $UPPER }。</li>
</ul>


<h3>基本复合谓词</h3>

<ul>
<li>AND, &amp;&amp;：逻辑与.</li>
<li>OR, ||：逻辑或.</li>
<li>NOT, !：逻辑非.</li>
</ul>


<h3>字符串比较</h3>

<p><em>字符串比较在默认的情况下是区分大小写和音调的。你可以在方括号中用关键字符c和d来修改操作符以相应的指定不区分大小写和变音符号，比如firstname BEGINSWITH[cd] $FIRST_NAME。</em></p>

<ul>
<li>BEGINSWITH：左边的表达式以右边的表达式作为开始。</li>
<li>CONTAINS：左边的表达式包含右边的表达式。</li>
<li>ENDSWITH：左边的表达式以右边的表达式作为结束。</li>
<li>LIKE：左边的表达式等于右边的表达式：?和<em>可作为通配符，其中?匹配1个字符，</em>匹配0个或者多个字符。</li>
<li>MATCHES：左边的表达式根据ICU v3（更多内容请查看<a href="http://userguide.icu-project.org/strings/regexp">ICU User Guide for Regular Expressions</a>）的regex风格比较，等于右边的表达式。</li>
</ul>


<h3>合计操作</h3>

<h4>关系操作</h4>

<ul>
<li>ANY，SOME：指定下列表达式中的任意元素。比如，ANY children.age &lt; 18。</li>
<li>ALL：指定下列表达式中的所有元素。比如，ALL children.age &lt; 18。</li>
<li>NONE：指定下列表达式中没有的元素。比如，NONE children.age &lt; 18。它在逻辑上等于NOT (ANY &hellip;)。</li>
<li>IN：等于SQL的IN操作，左边的表达必须出现在右边指定的集合中。比如，name IN { &lsquo;Ben&rsquo;, &lsquo;Melissa&rsquo;, &lsquo;Nick&rsquo; }。</li>
</ul>


<h4>数组操作</h4>

<ul>
<li>array[index]：指定数组中特定索引处的元素。</li>
<li>array[FIRST]：指定数组中的第一个元素。</li>
<li>array[LAST]：指定数组中的最后一个元素。</li>
<li>array[SIZE]：指定数组的大小。</li>
</ul>


<h3>布尔值谓词</h3>

<ul>
<li>TRUEPREDICATE：结果始终为真的谓词。</li>
<li>FALSEPREDICATE：结果始终为假的谓词。</li>
</ul>


<h2>NSCompoundPredicate</h2>

<p>我们见过与&amp;或被用在谓词格式字符串中以创建复合谓词。然而，我们也可以用NSCompoundPredicate来完成同样的工作。</p>

<p>例如，下列谓词是相等的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">NSCompoundPredicate</span> <span class="nl">andPredicateWithSubpredicates:</span><span class="err">@</span><span class="p">[[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;age &gt; 25&quot;</span><span class="p">],</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;firstName = %@&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span><span class="p">]]];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithFormat:</span><span class="s">@&quot;(age &gt; 25) AND (firstName = %@)&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>虽然语法字符串文字更加容易输入，但是在有的时候，你需要结合现有的谓词。在那些情况下，你可以使用<code>NSCompoundPredicate -andPredicateWithSubpredicates:</code>&amp;<code>-orPredicateWithSubpredicates:</code>。</p>

<h2>NSComparisonPredicate</h2>

<p>同样的，如果你在读过<a href="http://nshipster.com/nsexpression/">上周的文章</a>之后发现你使用了太多的NSExpression的话，NSComparisonPredicate可以帮助你解决这个问题。</p>

<p>就像NSCompoundPredicate一样，NSComparisonPredicate从子部件构建了一个NSPredicate－－在这种情况下，左侧和右侧都是NSExpression。 分析它的类的构造函数可以让我们一窥NSPredicate的格式字符串是如何解析的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSPredicate</span> <span class="o">*</span><span class="p">)</span><span class="nf">predicateWithLeftExpression:</span><span class="p">(</span><span class="n">NSExpression</span> <span class="o">*</span><span class="p">)</span><span class="nv">lhs</span>
</span><span class='line'>                             <span class="nf">rightExpression:</span><span class="p">(</span><span class="n">NSExpression</span> <span class="o">*</span><span class="p">)</span><span class="nv">rhs</span>
</span><span class='line'>                                    <span class="nf">modifier:</span><span class="p">(</span><span class="n">NSComparisonPredicateModifier</span><span class="p">)</span><span class="nv">modifier</span>
</span><span class='line'>                                        <span class="nf">type:</span><span class="p">(</span><span class="n">NSPredicateOperatorType</span><span class="p">)</span><span class="nv">type</span>
</span><span class='line'>                                     <span class="nf">options:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">options</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>参数</h4>

<ul>
<li>lhs：左边的表达式。</li>
<li>rhs：右边的表达式。</li>
<li>modifier：应用的修改符。（ANY或者ALL）</li>
<li>type：谓词运算符类型。</li>
<li>options：要应用的选项。没有选项的话则为0。</li>
</ul>


<h3>NSComparisonPredicate类型</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">NSLessThanPredicateOperatorType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSLessThanOrEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSGreaterThanPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSGreaterThanOrEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSNotEqualToPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSMatchesPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSLikePredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSBeginsWithPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSEndsWithPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSInPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSCustomSelectorPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSContainsPredicateOperatorType</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSBetweenPredicateOperatorType</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">NSUInteger</span> <span class="n">NSPredicateOperatorType</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>NSComparisonPredicate选项</h3>

<ul>
<li>NSCaseInsensitivePredicateOption：不区分大小写的谓词。你通过在谓词格式字符串中加入后面带有[c]的字符串操作（比如，&#8221;NeXT&#8221; like[c] &ldquo;next&#8221;）来表达这一选项。</li>
<li>NSDiacriticInsensitivePredicateOption：忽视发音符号的谓词。你通过在谓词格式字符串中加入后面带有[d]的字符串操作（比如，&#8221;naïve&#8221; like[d] &ldquo;naive&#8221;）来表达这一选项。</li>
<li>NSNormalizedPredicateOption：表示待比较的字符串已经被预处理了。这一选项取代了NSCaseInsensitivePredicateOption和NSDiacriticInsensitivePredicateOption，旨在用作性能优化的选项。你可以通过在谓词格式字符串中加入后面带有[n]的字符串（比如，&#8221;WXYZlan&#8221; matches[n] &ldquo;.lan&#8221;）来表达这一选项。</li>
<li>NSLocaleSensitivePredicateOption：表明要使用&lt;，&lt;=，=，=>，> 作为比较的字符串应该使用区域识别的方式处理。你可以通过在&lt;，&lt;=，=，=>，>其中之一的操作符后加入[l]（比如，&#8221;straße&#8221; >[l] &ldquo;strasse&#8221;）以便在谓词格式字符串表达这一选项。</li>
</ul>


<h2>Block谓词</h2>

<p>最后，如果你实在不愿意学习NSPredicate的格式语法，你也可以学学NSPredicate +predicateWithBlock:。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">shortNamePredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="nl">predicateWithBlock:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">evaluatedObject</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">bindings</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[[</span><span class="n">evaluatedObject</span> <span class="n">firstName</span><span class="p">]</span> <span class="n">length</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&quot;Alice Smith&quot;, &quot;Bob Jones&quot;]</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Short Names: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="nl">filteredArrayUsingPredicate:</span><span class="n">shortNamePredicate</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>
&hellip;好吧，虽然使用<code>predicateWithBlock:</code>是懒人的做法，但它也并不是一无是处。</p>

<p>事实上，因为block可以封装任意的计算，所以有一个查询类是无法以NSPredicate格式字符串形式来表达的（比如对运行时被动态计算的值的评估）。而且当同一件事情可以用NSExpression结合自定义选择器来完成时，block为完成工作提供了一个方便的接口。</p>

<p>重要提示：<strong>由<code>predicateWithBlock:</code>生成的NSPredicate不能用于由SQLite存储库支持的Core Data数据的提取要求。</strong></p>

<p>我知道我已经说过很多次了，可是NSPredicate真的是Cocoa的优势之一。其他语言的第三方库如果能有它一半的能力就已经很幸运了－－更别提标准库了。对于我们这些应用和框架开发者来说，有它作为标准组件使得我们在处理数据时有了很大的优势。</p>

<p>和NSExpression一样，NSPredicate一直在提醒我们Foundation有多么好：它不仅仅十分有用，它精致的构架和设计也是我们写代码时灵感的来源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD 深入理解：第二部分]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/14/grand-central-dispatch-in-depth-part-2/"/>
    <updated>2014-05-14T19:11:18+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/14/grand-central-dispatch-in-depth-part-2</id>
    <content type="html"><![CDATA[<p><strong>本文转载自<a href="https://github.com/nixzhu/dev-blog">https://github.com/nixzhu/dev-blog</a></strong><br/>
<strong>再次声明:本文转载自<a href="https://github.com/nixzhu/dev-blog">https://github.com/nixzhu/dev-blog</a></strong></p>

<p>本文翻译自 <a href="http://www.raywenderlich.com/63338/grand-central-dispatch-in-depth-part-2">http://www.raywenderlich.com/63338/grand-central-dispatch-in-depth-part-2</a></p>

<p>原作者：<a href="http://www.raywenderlich.com/u/Lolgrep">Derek Selander</a></p>

<p>译者：<a href="http://weibo.com/riven0951">Riven</a>、<a href="https://twitter.com/nixzhu">@nixzhu</a></p>

<p>前半部分由 Riven 翻译，但他由于太忙而搁置，后由 NIX 整理校对并翻译后半部分。</p>

<!--more-->


<p></p>

<p>==============================</p>

<p>欢迎来到GCD深入理解系列教程的第二部分（也是最后一部分）。</p>

<p>在本系列的<a href="http://yulingtianxia.com/blog/2014/04/19/grand-central-dispatch-in-depth-part-1/">第一部分</a>中，你已经学到超过你想像的关于并发、线程以及GCD 如何工作的知识。通过在初始化时利用 <code>dispatch_once</code>，你创建了一个线程安全的 <code>PhotoManager</code> 单例，而且你通过使用 <code>dispatch_barrier_async</code> 和 <code>dispatch_sync</code> 的组合使得对 <code>Photos</code> 数组的读取和写入都变得线程安全了。</p>

<p>除了上面这些，你还通过利用 <code>dispatch_after</code> 来延迟显示提示信息，以及利用 <code>dispatch_async</code> 将 CPU 密集型任务从 ViewController 的初始化过程中剥离出来异步执行，达到了增强应用的用户体验的目的。</p>

<p>如果你一直跟着第一部分的教程在写代码，那你可以继续你的工程。但如果你没有完成第一部分的工作，或者不想重用你的工程，你可以<a href="http://cdn2.raywenderlich.com/wp-content/uploads/2014/01/GooglyPuff_End_1.zip">下载第一部分最终的代码</a>。</p>

<p>那就让我们来更深入地探索 GCD 吧！</p>

<h2>纠正过早弹出的提示</h2>

<p>你可能已经注意到当你尝试用 Le Internet 选项来添加图片时，一个 <code>UIAlertView</code> 会在图片下载完成之前就弹出，如下如所示：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/01/Screen-Shot-2014-01-17-at-5.49.51-PM-308x500.png" alt="Premature Completion Block" /></p>

<p>问题的症结在 PhotoManagers 的 <code>downloadPhotoWithCompletionBlock:</code> 里，它目前的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadPhotosWithCompletionBlock:</span><span class="p">(</span><span class="n">BatchPhotoDownloadingCompletionBlock</span><span class="p">)</span><span class="nv">completionBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kOverlyAttachedGirlfriendURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kSuccessKidURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kLotsOfFacesURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Photo</span> <span class="o">*</span><span class="n">photo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Photo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initwithURL:</span><span class="n">url</span>
</span><span class='line'>                              <span class="nl">withCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="k">if</span> <span class="p">(</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                      <span class="n">error</span> <span class="o">=</span> <span class="n">_error</span><span class="p">;</span>
</span><span class='line'>                                  <span class="p">}</span>
</span><span class='line'>                              <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addPhoto:</span><span class="n">photo</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">completionBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在方法的最后你调用了 <code>completionBlock</code> ——因为此时你假设所有的照片都已下载完成。但很不幸，此时并不能保证所有的下载都已完成。</p>

<p><code>Photo</code> 类的实例方法用某个 URL 开始下载某个文件并立即返回，但此时下载并未完成。换句话说，当 <code>downloadPhotoWithCompletionBlock:</code> 在其末尾调用 <code>completionBlock</code> 时，它就假设了它自己所使用的方法全都是同步的，而且每个方法都完成了它们的工作。</p>

<p>然而，<code>-[Photo initWithURL:withCompletionBlock:]</code> 是异步执行的，会立即返回——所以这种方式行不通。</p>

<p>因此，只有在所有的图像下载任务都调用了它们自己的 Completion Block 之后，<code>downloadPhotoWithCompletionBlock:</code> 才能调用它自己的 <code>completionBlock</code> 。问题是：你该如何监控并发的异步事件？你不知道它们何时完成，而且它们完成的顺序完全是不确定的。</p>

<p>或许你可以写一些比较 Hacky 的代码，用多个布尔值来记录每个下载的完成情况，但这样做就缺失了扩展性，而且说实话，代码会很难看。</p>

<p>幸运的是， 解决这种对多个异步任务的完成进行监控的问题，恰好就是设计 dispatch_group 的目的。</p>

<h3>Dispatch Groups（调度组）</h3>

<p>Dispatch Group 会在整个组的任务都完成时通知你。这些任务可以是同步的，也可以是异步的，即便在不同的队列也行。而且在整个组的任务都完成时，Dispatch Group 可以用同步的或者异步的方式通知你。因为要监控的任务在不同队列，那就用一个 <code>dispatch_group_t</code> 的实例来记下这些不同的任务。</p>

<p>当组中所有的事件都完成时，GCD 的 API 提供了两种通知方式。</p>

<p>第一种是 <code>dispatch_group_wait</code> ，它会阻塞当前线程，直到组里面所有的任务都完成或者等到某个超时发生。这恰好是你目前所需要的。</p>

<p>打开 PhotoManager.m，用下列实现替换 <code>downloadPhotosWithCompletionBlock:</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadPhotosWithCompletionBlock:</span><span class="p">(</span><span class="n">BatchPhotoDownloadingCompletionBlock</span><span class="p">)</span><span class="nv">completionBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>        <span class="n">dispatch_group_t</span> <span class="n">downloadGroup</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span> <span class="c1">// 2</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kOverlyAttachedGirlfriendURLString</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kSuccessKidURLString</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>                    <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kLotsOfFacesURLString</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">);</span> <span class="c1">// 3</span>
</span><span class='line'>            <span class="n">Photo</span> <span class="o">*</span><span class="n">photo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Photo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initwithURL:</span><span class="n">url</span>
</span><span class='line'>                                  <span class="nl">withCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                      <span class="k">if</span> <span class="p">(</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                          <span class="n">error</span> <span class="o">=</span> <span class="n">_error</span><span class="p">;</span>
</span><span class='line'>                                      <span class="p">}</span>
</span><span class='line'>                                      <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">);</span> <span class="c1">// 4</span>
</span><span class='line'>                                  <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addPhoto:</span><span class="n">photo</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">dispatch_group_wait</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span> <span class="c1">// 5</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 6</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">completionBlock</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 7</span>
</span><span class='line'>                <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>按照注释的顺序，你会看到：</p>

<ol>
<li>因为你在使用的是同步的 <code>dispatch_group_wait</code> ，它会阻塞当前线程，所以你要用 <code>dispatch_async</code> 将整个方法放入后台队列以避免阻塞主线程。</li>
<li>创建一个新的 Dispatch Group，它的作用就像一个用于未完成任务的计数器。</li>
<li><code>dispatch_group_enter</code> 手动通知 Dispatch Group 任务已经开始。你必须保证 <code>dispatch_group_enter</code> 和 <code>dispatch_group_leave</code> 成对出现，否则你可能会遇到诡异的崩溃问题。</li>
<li>手动通知 Group 它的工作已经完成。再次说明，你必须要确保进入 Group 的次数和离开 Group 的次数相等。</li>
<li><code>dispatch_group_wait</code> 会一直等待，直到任务全部完成或者超时。如果在所有任务完成前超时了，该函数会返回一个非零值。你可以对此返回值做条件判断以确定是否超出等待周期；然而，你在这里用 <code>DISPATCH_TIME_FOREVER</code> 让它永远等待。它的意思，勿庸置疑就是，永－远－等－待！这样很好，因为图片的创建工作总是会完成的。</li>
<li>此时此刻，你已经确保了，要么所有的图片任务都已完成，要么发生了超时。然后，你在主线程上运行 <code>completionBlock</code> 回调。这会将工作放到主线程上，并在稍后执行。</li>
<li>最后，检查 <code>completionBlock</code> 是否为 nil，如果不是，那就运行它。</li>
</ol>


<p>编译并运行你的应用，尝试下载多个图片，观察你的应用是在何时运行 completionBlock 的。</p>

<blockquote><p>注意：如果你是在真机上运行应用，而且网络活动发生得太快以致难以观察 completionBlock 被调用的时刻，那么你可以在 Settings 应用里的开发者相关部分里打开一些网络设置，以确保代码按照我们所期望的那样工作。只需去往 Network Link Conditioner 区，开启它，再选择一个 Profile，“Very Bad Network” 就不错。</p></blockquote>

<p>如果你是在模拟器里运行应用，你可以使用 <a href="http://nshipster.com/network-link-conditioner/">来自 GitHub 的 Network Link Conditioner</a> 来改变网络速度。它会成为你工具箱中的一个好工具，因为它强制你研究你的应用在连接速度并非最佳的情况下会变成什么样。</p>

<p>目前为止的解决方案还不错，但是总体来说，如果可能，最好还是要避免阻塞线程。你的下一个任务是重写一些方法，以便当所有下载任务完成时能异步通知你。</p>

<p>在我们转向另外一种使用 Dispatch Group 的方式之前，先看一个简要的概述，关于何时以及怎样使用有着不同的队列类型的 Dispatch Group ：</p>

<ul>
<li>自定义串行队列：它很适合当一组任务完成时发出通知。</li>
<li>主队列（串行）：它也很适合这样的情况。但如果你要同步地等待所有工作地完成，那你就不应该使用它，因为你不能阻塞主线程。然而，异步模型是一个很有吸引力的能用于在几个较长任务（例如网络调用）完成后更新 UI 的方式。</li>
<li>并发队列：它也很适合 Dispatch Group 和完成时通知。</li>
</ul>


<h3>Dispatch Group，第二种方式</h3>

<p>上面的一切都很好，但在另一个队列上异步调度然后使用 dispatch_group_wait 来阻塞实在显得有些笨拙。是的，还有另一种方式……</p>

<p>在 PhotoManager.m 中找到 <code>downloadPhotosWithCompletionBlock:</code> 方法，用下面的实现替换它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadPhotosWithCompletionBlock:</span><span class="p">(</span><span class="n">BatchPhotoDownloadingCompletionBlock</span><span class="p">)</span><span class="nv">completionBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_group_t</span> <span class="n">downloadGroup</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kOverlyAttachedGirlfriendURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kSuccessKidURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kLotsOfFacesURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">);</span> <span class="c1">// 2</span>
</span><span class='line'>        <span class="n">Photo</span> <span class="o">*</span><span class="n">photo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Photo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initwithURL:</span><span class="n">url</span>
</span><span class='line'>                              <span class="nl">withCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="k">if</span> <span class="p">(</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                      <span class="n">error</span> <span class="o">=</span> <span class="n">_error</span><span class="p">;</span>
</span><span class='line'>                                  <span class="p">}</span>
</span><span class='line'>                                  <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">);</span> <span class="c1">// 3</span>
</span><span class='line'>                              <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addPhoto:</span><span class="n">photo</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span> <span class="c1">// 4</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">completionBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面解释新的异步方法如何工作：</p>

<ol>
<li>在新的实现里，因为你没有阻塞主线程，所以你并不需要将方法包裹在 <code>async</code> 调用中。</li>
<li>同样的 <code>enter</code> 方法，没做任何修改。</li>
<li>同样的 <code>leave</code> 方法，也没做任何修改。</li>
<li><code>dispatch_group_notify</code> 以异步的方式工作。当 Dispatch Group 中没有任何任务时，它就会执行其代码，那么 <code>completionBlock</code> 便会运行。你还指定了运行 <code>completionBlock</code> 的队列，此处，主队列就是你所需要的。</li>
</ol>


<p>对于这个特定的工作，上面的处理明显更清晰，而且也不会阻塞任何线程。</p>

<h2>太多并发带来的风险</h2>

<p>既然你的工具箱里有了这些新工具，你大概做任何事情都想使用它们，对吧？</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/01/Thread_All_The_Code_Meme.jpg" alt="Thread_All_The_Code_Meme" /></p>

<p>看看 PhotoManager 中的 <code>downloadPhotosWithCompletionBlock</code> 方法。你可能已经注意到这里的 <code>for</code> 循环，它迭代三次，下载三个不同的图片。你的任务是尝试让 <code>for</code> 循环并发运行，以提高其速度。</p>

<p><code>dispatch_apply</code> 刚好可用于这个任务。</p>

<p><code>dispatch_apply</code> 表现得就像一个 <code>for</code> 循环，但它能并发地执行不同的迭代。这个函数是同步的，所以和普通的 <code>for</code> 循环一样，它只会在所有工作都完成后才会返回。</p>

<p>当在 Block 内计算任何给定数量的工作的最佳迭代数量时，必须要小心，因为过多的迭代和每个迭代只有少量的工作会导致大量开销以致它能抵消任何因并发带来的收益。而被称为<code>跨越式（striding）</code>的技术可以在此帮到你，即通过在每个迭代里多做几个不同的工作。</p>

<blockquote><p>译者注：大概就能减少并发数量吧，作者是提醒大家注意并发的开销，记在心里！</p></blockquote>

<p>那何时才适合用 <code>dispatch_apply</code> 呢？</p>

<ul>
<li>自定义串行队列：串行队列会完全抵消 <code>dispatch_apply</code> 的功能；你还不如直接使用普通的 <code>for</code> 循环。</li>
<li>主队列（串行）：与上面一样，在串行队列上不适合使用 <code>dispatch_apply</code> 。还是用普通的 <code>for</code> 循环吧。</li>
<li>并发队列：对于并发循环来说是很好选择，特别是当你需要追踪任务的进度时。</li>
</ul>


<p>回到 <code>downloadPhotosWithCompletionBlock:</code> 并用下列实现替换它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadPhotosWithCompletionBlock:</span><span class="p">(</span><span class="n">BatchPhotoDownloadingCompletionBlock</span><span class="p">)</span><span class="nv">completionBlock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_group_t</span> <span class="n">downloadGroup</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_apply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_HIGH</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">(</span><span class="n">size_t</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kOverlyAttachedGirlfriendURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kSuccessKidURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>                <span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">kLotsOfFacesURLString</span><span class="p">];</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Photo</span> <span class="o">*</span><span class="n">photo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Photo</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initwithURL:</span><span class="n">url</span>
</span><span class='line'>                              <span class="nl">withCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                  <span class="k">if</span> <span class="p">(</span><span class="n">_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                      <span class="n">error</span> <span class="o">=</span> <span class="n">_error</span><span class="p">;</span>
</span><span class='line'>                                  <span class="p">}</span>
</span><span class='line'>                                  <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">);</span>
</span><span class='line'>                              <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[[</span><span class="n">PhotoManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addPhoto:</span><span class="n">photo</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">downloadGroup</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">completionBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">completionBlock</span><span class="p">(</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你的循环现在是并行运行的了；在上面的代码中，在调用 <code>dispatch_apply</code> 时，你用第一次参数指明了迭代的次数，用第二个参数指定了任务运行的队列，而第三个参数是一个 Block。</p>

<p>要知道虽然你有代码保证添加相片时线程安全，但图片的顺序却可能不同，这取决于线程完成的顺序。</p>

<p>编译并运行，然后从 “Le Internet” 添加一些照片。注意到区别了吗？</p>

<p>在真机上运行新代码会稍微更快的得到结果。但我们所做的这些提速工作真的值得吗？</p>

<p>实际上，在这个例子里并不值得。下面是原因：</p>

<ul>
<li>你创建并行运行线程而付出的开销，很可能比直接使用  <code>for</code> 循环要多。若你要以合适的步长迭代非常大的集合，那才应该考虑使用 <code>dispatch_apply</code>。</li>
<li>你用于创建应用的时间是有限的——除非实在太糟糕否则不要浪费时间去提前优化代码。如果你要优化什么，那去优化那些明显值得你付出时间的部分。你可以通过在 Instruments 里分析你的应用，找出最长运行时间的方法。看看 <a href="http://www.raywenderlich.com/23037/how-to-use-instruments-in-xcode">如何在 Xcode 中使用 Instruments</a> 可以学到更多相关知识。</li>
<li>通常情况下，优化代码会让你的代码更加复杂，不利于你自己和其他开发者阅读。请确保添加的复杂性能换来足够多的好处。</li>
</ul>


<p>记住，不要在优化上太疯狂。你只会让你自己和后来者更难以读懂你的代码。</p>

<h2>GCD 的其他趣味</h2>

<p>等一下！还有更多！有一些额外的函数在不同的道路上走得更远。虽然你不会太频繁地使用这些工具，但在对的情况下，它们可以提供极大的帮助。</p>

<h3>阻塞——正确的方式</h3>

<p>这可能听起来像是个疯狂的想法，但你知道 Xcode 已有了测试功能吗？:] 我知道，虽然有时候我喜欢假装它不存在，但在代码里构建复杂关系时编写和运行测试非常重要。</p>

<p>Xcode 里的测试在 <code>XCTestCase</code> 的子类上执行，并运行任何方法签名以 <code>test</code> 开头的方法。测试在主线程运行，所以你可以假设所有测试都是串行发生的。</p>

<p>当一个给定的测试方法运行完成，XCTest 方法将考虑此测试已结束，并进入下一个测试。这意味着任何来自前一个测试的异步代码会在下一个测试运行时继续运行。</p>

<p>网络代码通常是异步的，因此你不能在执行网络获取时阻塞主线程。也就是说，整个测试会在测试方法完成之后结束，这会让对网络代码的测试变得很困难。也就是，除非你在测试方法内部阻塞主线程直到网络代码完成。</p>

<blockquote><p>注意：有一些人会说，这种类型的测试不属于集成测试的首选集（Preferred Set）。一些人会赞同，一些人不会。但如果你想做，那就去做。</p></blockquote>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2014/01/Gandalf_Semaphore.png" alt="Gandalf_Semaphore" /></p>

<p>导航到 GooglyPuffTests.m 并查看 <code>downloadImageURLWithString:</code>，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadImageURLWithString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">URLString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">URLString</span><span class="p">];</span>
</span><span class='line'>    <span class="n">__block</span> <span class="kt">BOOL</span> <span class="n">isFinishedDownloading</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__unused</span> <span class="n">Photo</span> <span class="o">*</span><span class="n">photo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Photo</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'>                             <span class="nl">initwithURL:</span><span class="n">url</span>
</span><span class='line'>                             <span class="nl">withCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                 <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                     <span class="n">XCTFail</span><span class="p">(</span><span class="s">@&quot;%@ failed. %@&quot;</span><span class="p">,</span> <span class="n">URLString</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>                                 <span class="p">}</span>
</span><span class='line'>                                 <span class="n">isFinishedDownloading</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>                             <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">isFinishedDownloading</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一种测试异步网络代码的幼稚方式。 While 循环在函数的最后一直等待，直到 <code>isFinishedDownloading</code> 布尔值变成 True，它只会在 Completion Block 里发生。让我们看看这样做有什么影响。</p>

<p>通过在 Xcode 中点击  Product / Test 运行你的测试，如果你使用默认的键绑定，也可以使用快捷键 ⌘+U 来运行你的测试。</p>

<p>在测试运行时，注意 Xcode debug 导航栏里的 CPU 使用率。这个设计不当的实现就是一个基本的 <a href="http://en.wikipedia.org/wiki/Spinlock">自旋锁</a> 。它很不实用，因为你在 While 循环里浪费了珍贵的 CPU 周期；而且它也几乎没有扩展性。</p>

<blockquote><p>译者注：所谓自旋锁，就是某个线程一直抢占着 CPU 不断检查以等到它需要的情况出现。因为现代操作系统都是可以并发运行多个线程的，所以它所等待的那个线程也有机会被调度执行，这样它所需要的情况早晚会出现。</p></blockquote>

<p>你可能需要使用前面提到的 Network Link Conditioner ，已便清楚地看到这个问题。如果你的网络太快，那么自旋只会在很短的时间里发生，难以观察。</p>

<blockquote><p>译者注：作者反复提到网速太快，而我们还需要对付 GFW，简直泪流满面！</p></blockquote>

<p>你需要一个更优雅、可扩展的解决方案来阻塞线程直到资源可用。欢迎来到信号量。</p>

<h3>信号量</h3>

<p>信号量是一种老式的线程概念，由非常谦卑的 Edsger W. Dijkstra 介绍给世界。信号量之所以比较复杂是因为它建立在操作系统的复杂性之上。</p>

<p>如果你想学到更多关于信号量的知识，看看这个链接<a href="http://greenteapress.com/semaphores/">它更细致地讨论了信号量理论</a>。如果你是学术型，那可以看一个软件开发中经典的<a href="http://greenteapress.com/semaphores/">哲学家进餐问题</a>，它需要使用信号量来解决。</p>

<p>信号量让你控制多个消费者对有限数量资源的访问。举例来说，如果你创建了一个有着两个资源的信号量，那同时最多只能有两个线程可以访问临界区。其他想使用资源的线程必须在一个…你猜到了吗？…FIFO队列里等待。</p>

<p>让我们来使用信号量吧！</p>

<p>打开 GooglyPuffTests.m 并用下列实现替换 <code>downloadImageURLWithString:</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadImageURLWithString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">URLString</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="n">dispatch_semaphore_t</span> <span class="n">semaphore</span> <span class="o">=</span> <span class="n">dispatch_semaphore_create</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="n">URLString</span><span class="p">];</span>
</span><span class='line'>    <span class="n">__unused</span> <span class="n">Photo</span> <span class="o">*</span><span class="n">photo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Photo</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'>                             <span class="nl">initwithURL:</span><span class="n">url</span>
</span><span class='line'>                             <span class="nl">withCompletionBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                 <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                     <span class="n">XCTFail</span><span class="p">(</span><span class="s">@&quot;%@ failed. %@&quot;</span><span class="p">,</span> <span class="n">URLString</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>                                 <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                                 <span class="c1">// 2</span>
</span><span class='line'>                                 <span class="n">dispatch_semaphore_signal</span><span class="p">(</span><span class="n">semaphore</span><span class="p">);</span>
</span><span class='line'>                             <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="n">dispatch_time_t</span> <span class="n">timeoutTime</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="n">kDefaultTimeoutLengthInNanoSeconds</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">dispatch_semaphore_wait</span><span class="p">(</span><span class="n">semaphore</span><span class="p">,</span> <span class="n">timeoutTime</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">XCTFail</span><span class="p">(</span><span class="s">@&quot;%@ timed out&quot;</span><span class="p">,</span> <span class="n">URLString</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面来说明你代码中的信号量是如何工作的：</p>

<ol>
<li>创建一个信号量。参数指定信号量的起始值。这个数字是你可以访问的信号量，不需要有人先去增加它的数量。（注意到增加信号量也被叫做发射信号量）。译者注：这里初始化为0，也就是说，有人想使用信号量必然会被阻塞，直到有人增加信号量。</li>
<li>在 Completion Block 里你告诉信号量你不再需要资源了。这就会增加信号量的计数并告知其他想使用此资源的线程。</li>
<li>这会在超时之前等待信号量。这个调用阻塞了当前线程直到信号量被发射。这个函数的一个非零返回值表示到达超时了。在这个例子里，测试将会失败因为它以为网络请求不会超过 10 秒钟就会返回——一个平衡点！</li>
</ol>


<p>再次运行测试。只要你有一个正常工作的网络连接，这个测试就会马上成功。请特别注意 CPU 的使用率，与之前使用自旋锁的实现作个对比。</p>

<p>关闭你的网络链接再运行测试；如果你在真机上运行，就打开飞行模式。如果你的在模拟器里运行，你可以直接断开 Mac 的网络链接。测试会在 10 秒后失败。这很棒，它真的能按照预想的那样工作！</p>

<p>还有一些琐碎的测试，但如果你与一个服务器组协同工作，那么这些基本的测试能够防止其他人就最新的网络问题对你说三道四。</p>

<h3>使用 Dispatch Source</h3>

<p>GCD 的一个特别有趣的特性是 Dispatch Source，它基本上就是一个低级函数的 grab-bag ，能帮助你去响应或监测 Unix 信号、文件描述符、Mach 端口、VFS 节点，以及其它晦涩的东西。所有这些都超出了本教程讨论的范围，但你可以通过实现一个 Dispatch Source 对象并以一个相当奇特的方式来使用它来品尝那些晦涩的东西。</p>

<p>第一次使用 Dispatch Source 可能会迷失在如何使用一个源，所以你需要知晓的第一件事是 <code>dispatch_source_create</code> 如何工作。下面是创建一个源的函数原型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_source_t</span> <span class="nf">dispatch_source_create</span><span class="p">(</span>
</span><span class='line'>   <span class="n">dispatch_source_type_t</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>   <span class="n">uintptr_t</span> <span class="n">handle</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">mask</span><span class="p">,</span>
</span><span class='line'>   <span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个参数是 <code>dispatch_source_type_t</code> 。这是最重要的参数，因为它决定了 handle 和 mask 参数将会是什么。你可以查看 <a href="https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/doc/constant_group/Dispatch_Source_Type_Constants">Xcode 文档</a> 得到哪些选项可用于每个 <code>dispatch_source_type_t</code> 参数。</p>

<p>下面你将监控 <code>DISPATCH_SOURCE_TYPE_SIGNAL</code> 。如<a href="https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/macro/DISPATCH_SOURCE_TYPE_SIGNAL%22">文档所显示的</a>：</p>

<p>一个监控当前进程信号的 Dispatch Source。 handle 是信号编号，mask 未使用（传 0 即可）。</p>

<p>这些 Unix 信号组成的列表可在头文件  <a href="http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/sys/signal.h">signal.h</a> 中找到。在其顶部有一堆 <code>#define</code> 语句。你将监控此信号列表中的 <code>SIGSTOP</code> 信号。这个信号将会在进程接收到一个无法回避的暂停指令时被发出。在你用 LLDB 调试器调试应用时你使用的也是这个信号。</p>

<p>去往 PhotoCollectionViewController.m 并添加如下代码到 <code>viewDidLoad</code> 的顶部，就在 <code>[super viewDidLoad]</code> 下面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1</span>
</span><span class='line'>  <span class="err">#</span><span class="k">if</span> <span class="n">DEBUG</span>
</span><span class='line'>      <span class="c1">// 2</span>
</span><span class='line'>      <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_main_queue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 3</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">dispatch_source_t</span> <span class="n">source</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 4</span>
</span><span class='line'>      <span class="n">__typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">__weak</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 5</span>
</span><span class='line'>      <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>      <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>          <span class="c1">// 6</span>
</span><span class='line'>          <span class="n">source</span> <span class="o">=</span> <span class="n">dispatch_source_create</span><span class="p">(</span><span class="n">DISPATCH_SOURCE_TYPE_SIGNAL</span><span class="p">,</span> <span class="n">SIGSTOP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">queue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// 7</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// 8</span>
</span><span class='line'>              <span class="n">dispatch_source_set_event_handler</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>                  <span class="c1">// 9</span>
</span><span class='line'>                  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hi, I am: %@&quot;</span><span class="p">,</span> <span class="n">weakSelf</span><span class="p">);</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>              <span class="n">dispatch_resume</span><span class="p">(</span><span class="n">source</span><span class="p">);</span> <span class="c1">// 10</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="err">#</span><span class="n">endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The other stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些代码有点儿复杂，所以跟着注释一步步走，看看到底发生了什么：</p>

<ol>
<li>最好是在 DEBUG 模式下编译这些代码，因为这会给“有关方面（Interested Parties）”很多关于你应用的洞察。 :]</li>
<li>Just to mix things up，你创建了一个 <code>dispatch_queue_t</code> 实例变量而不是在参数上直接使用函数。当代码变长，分拆有助于可读性。</li>
<li>你需要 <code>source</code> 在方法范围之外也可被访问，所以你使用了一个 static 变量。</li>
<li>使用 <code>weakSelf</code> 以确保不会出现保留环（Retain Cycle）。这对 <code>PhotoCollectionViewController</code> 来说不是完全必要的，因为它会在应用的整个生命期里保持活跃。然而，如果你有任何其它会消失的类，这就能确保不会出现保留环而造成内存泄漏。</li>
<li>使用 <code>dispatch_once</code> 确保只会执行一次 Dispatch Source 的设置。</li>
<li>初始化 <code>source</code> 变量。你指明了你对信号监控感兴趣并提供了 <code>SIGSTOP</code> 信号作为第二个参数。进一步，你使用主队列处理接收到的事件——很快你就好发现为何要这样做。</li>
<li>如果你提供的参数不合格，那么 Dispatch Source 对象不会被创建。也就是说，在你开始在其上工作之前，你需要确保已有了一个有效的 Dispatch Source 。</li>
<li>当你收到你所监控的信号时，<code>dispatch_source_set_event_handler</code> 就会执行。之后你可以在其 Block 里设置合适的逻辑处理器（Logic Handler）。</li>
<li>一个基本的 <code>NSLog</code> 语句，它将对象打印到控制台。</li>
<li>默认的，所有源都初始为暂停状态。如果你要开始监控事件，你必须告诉源对象恢复活跃状态。</li>
</ol>


<p>编译并运行应用；在调试器里暂停并立即恢复应用，查看控制台，你会看到这个来自黑暗艺术的函数确实可以工作。你看到的大概如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">29</span> <span class="mi">17</span><span class="o">:</span><span class="mi">41</span><span class="o">:</span><span class="mf">30.610</span> <span class="n">GooglyPuff</span><span class="p">[</span><span class="mi">8181</span><span class="o">:</span><span class="mi">60</span><span class="n">b</span><span class="p">]</span> <span class="n">Hi</span><span class="p">,</span> <span class="n">I</span> <span class="nl">am:</span>
</span></code></pre></td></tr></table></div></figure>


<p>你的应用现在具有调试感知了！这真是超级棒，但在真实世界里该如何使用它呢？</p>

<p>你可以用它去调试一个对象并在任何你想恢复应用的时候显示数据；你同样能给你的应用加上自定义的安全逻辑以便在恶意攻击者将一个调试器连接到你的应用上时保护它自己（或用户的数据）。</p>

<blockquote><p>译者注：好像挺有用！</p></blockquote>

<p>一个有趣的主意是，使用此方式的作为一个堆栈追踪工具去找到你想在调试器里操纵的对象。</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/01/What_Meme.jpg" alt="What_Meme" /></p>

<p>稍微想想这个情况。当你意外地停止调试器，你几乎从来都不会在所需的栈帧上。现在你可以在任何时候停止调试器并在你所需的地方执行代码。如果你想在你的应用的某一点执行的代码非常难以从调试器访问的话，这会非常有用。有机会试试吧！</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/01/I_See_What_You_Did_Meme.png" alt="I_See_What_You_Did_Meme" /></p>

<p>将一个断点放在你刚添加在 viewDidLoad 里的事件处理器的 <code>NSLog</code> 语句上。在调试器里暂停，然后再次开始；应用会到达你添加的断点。现在你深入到你的 PhotoCollectionViewController 方法深处。你可以访问 PhotoCollectionViewController 的实例得到你关心的内容。非常方便！</p>

<blockquote><p>注意：如果你还没有注意到在调试器里的是哪个线程，那现在就看看它们。主线程总是第一个被 libdispatch 跟随，它是 GCD 的坐标，作为第二个线程。之后，线程计数和剩余线程取决于硬件在应用到达断点时正在做的事情。</p></blockquote>

<p>在调试器里，键入命令：<code>po [[weakSelf navigationItem] setPrompt:@"WOOT!"]</code></p>

<p>然后恢复应用的执行。你会看到如下内容：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2014/01/Dispatch_Sources_Xcode_Breakpoint_Console-650x500.png" alt="Dispatch_Sources_Xcode_Breakpoint_Console" /></p>

<p><img src="http://cdn3.raywenderlich.com/wp-content/uploads/2014/01/Dispatch_Sources_Debugger_Updating_UI-308x500.png" alt="Dispatch_Sources_Debugger_Updating_UI" /></p>

<p>使用这个方法，你可以更新 UI、查询类的属性，甚至是执行方法——所有这一切都不需要重启应用并到达某个特定的工作状态。相当优美吧！</p>

<blockquote><p>译者注：发挥这一点，是可以做出一些调试库的吧？</p></blockquote>

<h2>之后又该往何处去？</h2>

<p>你可以<a href="http://cdn3.raywenderlich.com/wp-content/uploads/2014/01/GooglyPuff-Final.zip">在此下载最终的项目</a>。</p>

<p>我讨厌再次提及此主题，但你真的要看看 <a href="http://www.raywenderlich.com/23037/how-to-use-instruments-in-xcode">如何使用 Instruments</a> 教程。如果你计划优化你的应用，那你一定要学会使用它。请注意 Instruments 擅长于分析相对执行：比较哪些区域的代码相对于其它区域的代码花费了更长的时间。如果你尝试计算出某个方法实际的执行时间，那你可能需要拿出更多的自酿的解决方案（Home-brewed Solution）。</p>

<p>同样请看看 <a href="http://www.raywenderlich.com/19788/how-to-use-nsoperations-and-nsoperationqueues">如何使用 NSOperations 和 NSOperationQueues</a> 吧，它们是建立在 GCD 之上的并发技术。大体来说，如果你在写简单的用过就忘的任务，那它们就是使用 GCD 的最佳实践，。NSOperations 提供更好的控制、处理大量并发操作的实现，以及一个以速度为代价的更加面向对象的范例。</p>

<p>记住，除非你有特别的原因要往下流走（译者的玩笑：即使用低级别 API），否则永远应尝试并坚持使用高级的 API。如果你想学到更多或想做某些非常非常“有趣”的事情，那你就应该冒险进入 Apple 的黑暗艺术。</p>

<p>祝你好运，玩得开心！有任何问题或反馈请在下方的讨论区贴出！</p>

<p>=====================</p>

<p>译者注：欢迎非商业转载，但请一定注明出处：<a href="https://github.com/nixzhu/dev-blog">https://github.com/nixzhu/dev-blog</a> ！</p>

<p>转载声明：后面还有原译者的微博和支付宝等信息，感觉转载过来怪怪的，想浏览的话请点击原地址：<a href="https://github.com/nixzhu/dev-blog">https://github.com/nixzhu/dev-blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C中的KVC和KVO]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/12/objective-czhong-de-kvche-kvo/"/>
    <updated>2014-05-12T12:02:32+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/12/objective-czhong-de-kvche-kvo</id>
    <content type="html"><![CDATA[<p>本文讲述了使用Cocoa框架中的KVC和KVO，实现观察者模式</p>

<!--more-->


<h2>KVC</h2>

<p>键/值编码中的基本调用包括<code>-valueForKey:</code>和<code>-setValue:forKey:</code>。以字符串的形式向对象发送消息，这个字符串是我们关注的属性的关键。<br/>
<code>valueForKey:</code>首先查找以键<code>-key</code>或<code>-isKey   </code>命名的getter方法。如果不存在getter方法（假如我们没有通过<code>@synthesize</code>提供存取方法），它将在对象内部查找名为<code>_key</code>或<code>key</code>的实例变量。<br/>
对于KVC，Cocoa自动放入和取出标量值（int，float和struct）放入NSNumber或NSValue中；当使用<code>-setValue:ForKey:</code>时，它自动将标量值从这些对象中取出。仅KVC具有这种自动包装功能，常规方法调用和属性语法不具备该功能。<br/>
<code>-setValue:ForKey:</code>的工作方式和<code>-valueForKey:</code>相同。它首先查找名称的setter方法，如果不存在setter方法，它将在类中查找名为<code>_key</code>或<code>key</code>的实例变量。</p>

<p>使用KVC访问属性的代价比直接使用存取方法要大，所以只在需要的时候才用。</p>

<p>最简单的 KVC 能让我们通过以下的形式访问属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>取值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">n</span> <span class="o">=</span> <span class="p">[</span><span class="n">object</span> <span class="nl">valueForKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
设定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">object</span> <span class="nl">setValue:</span><span class="s">@&quot;Daniel&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
值得注意的是这个不仅可以访问作为对象属性，而且也能访问一些标量（例如 int 和 CGFloat）和 struct（例如 CGRect）。Foundation 框架会为我们自动封装它们。举例来说，如果有以下属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">height</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
我们可以这样设置它：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">object</span> <span class="nl">setValue:</span><span class="err">@</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="nl">forKey:</span><span class="s">@&quot;height&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>有关KVC的更多用法，参看下面的文章：</p>

<p><a href="http://blog.csdn.net/omegayy/article/details/7381301  ">http://blog.csdn.net/omegayy/article/details/7381301  </a>
<a href="http://blog.csdn.net/wzzvictory/article/details/9674431  ">http://blog.csdn.net/wzzvictory/article/details/9674431  </a>
<a href="http://objccn.io/issue-7-3/">http://objccn.io/issue-7-3/</a></p>

<h2>KVO</h2>

<p>KVO是Cocoa提供的一种称为键－值观察的机制，对象可以通过它得到其他对象特性属性的变更通知。这种机制在MVC模式的场景中很重要，因为它让视图对象可以经由控制器层观察模型对象的变更。<br/>
这一机制基于NSKeyValueObserving非正式协议，Cocoa通过这个协议为所有遵守协议的对象提供了一种自动化的属性观察能力。要实现自动观察，参与KVO的对象需要符合KVC的要求和存取方法，也可以手动实现观察者通知，也可以两者都保留。</p>

<p>KVO是Cocoa框架使用<strong>观察者模式</strong>的一种途径。</p>

<p>设置一个属性的观察者需要三步，理解这些步骤可以更清楚的知道KVO的工作框图<br/>
1. 首先看看你当前的场景如果使用KVO是否更妥当，比如，当一个实例的某个具体属性有任何变更的时候，另一个实例需要被通知。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389577.jpg" alt="" /></p>

<p>比如，BankObject中的accountBalance属性有任何变更时，某个PersonObject对象都要觉察到。<br/>
2. 这个PersonObject对象必须注册成为BankObject的accountBalance属性的观察者，可以通过发送<code>addObserver:forKeyPath:options:context:</code>消息来实现。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389319.jpg" alt="" /></p>

<p>注意：<code>addObserver:forKeyPath:options:context:</code>方法在你指定的两个实例间建立联系，而不是在两个类之间。<br/>
3. 为了回应变更通知，观察者必须实现<code>observeValueForKeyPath:ofObject:change:context:</code>方法。这个方法的实现决定了观察者如何回应变更通知。你可以在这个方法里自定义如何回应被观察属性的变更。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353388989.jpg" alt="" />  <br/>
4. 当一个被观察属性的值以符合KVO方式变更或者当它依赖的键变更时，<code>observeValueForKeyPath:ofObject:change:context:</code>方法会被自动执行。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389524.jpg" alt="" /></p>

<h3>Registering for Key-Value Observing</h3>

<h4>注册成为观察者</h4>

<p>你可以通过发送<code>addObserver:forKeyPath:options:context:</code>消息来注册观察者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">registerAsObserver</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     Register &#39;inspector&#39; to receive change notifications for the &quot;openingBalance&quot; property of</span>
</span><span class='line'><span class="cm">     the &#39;account&#39; object and specify that both the old and new values of &quot;openingBalance&quot;</span>
</span><span class='line'><span class="cm">     should be provided in the observe… method.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="p">[</span><span class="n">account</span> <span class="nl">addObserver:</span><span class="n">inspector</span>
</span><span class='line'>             <span class="nl">forKeyPath:</span><span class="s">@&quot;openingBalance&quot;</span>
</span><span class='line'>                 <span class="nl">options:</span><span class="p">(</span><span class="n">NSKeyValueObservingOptionNew</span> <span class="o">|</span>
</span><span class='line'>                            <span class="n">NSKeyValueObservingOptionOld</span><span class="p">)</span>
</span><span class='line'>                    <span class="nl">context:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>inspector注册成为了account的观察者，被观察属性的KeyPath是@&ldquo;openingBalance&#8221;，也就是account的openingBalance属性，NSKeyValueObservingOptionNew和NSKeyValueObservingOptionOld选项分别标识在观察者接收通知时change字典对应入口提供更改后的值和更改前的值。更简单的办法是用 NSKeyValueObservingOptionPrior 选项，随后我们就可以用以下方式提取出改变前后的值：(change是个字典，详细介绍请看下节)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeOldKey</span><span class="p">];</span>
</span><span class='line'><span class="kt">id</span> <span class="n">newValue</span> <span class="o">=</span> <span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNewKey</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>我们常常需要当一个值改变的时候更新 UI，但是我们也要在第一次运行代码的时候更新一次 UI。我们可以用 KVO 并添加 NSKeyValueObservingOptionInitial 的选项 来一箭双雕地做好这样的事情。这将会让 KVO 通知在调用 -addObserver:forKeyPath:&hellip; 到时候也被触发。<br/>
当我们注册 KVO 通知的时候，我们可以添加 NSKeyValueObservingOptionPrior 选项，这能使我们在键值改变之前被通知。这和-willChangeValueForKey:被触发的时间相对应。<br/>
如果我们注册通知的时候附加了 NSKeyValueObservingOptionPrior 选项，我们将会收到两个通知：一个在值变更前，另一个在变更之后。变更前的通知将会在 change 字典中有不同的键。</p>

<p>context是一个指针，当<code>observeValueForKeyPath:ofObject:change:context:</code>方法执行时context会提供给观察者。context可以使C指针或者一个对象引用，既可以当作一个唯一的标识来分辨被观察的变更，也可以向观察者提供数据。</p>

<h4>接收变更通知</h4>

<p>当被观察的属性变更时，观察者会接到<code>observeValueForKeyPath:ofObject:change:context:</code>消息，所有的观察者都必须实现这个方法。<br/>
观察者会被提供触发通知的对象和key path，一个包含变更详细信息的字典，还有一个注册观察者时提供的context指针。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
</span><span class='line'>                      <span class="nf">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
</span><span class='line'>                        <span class="nf">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
</span><span class='line'>                       <span class="nf">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">keyPath</span> <span class="nl">isEqual:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">openingBalanceInspectorField</span> <span class="nl">setObjectValue:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">change</span> <span class="nl">objectForKey:</span><span class="n">NSKeyValueChangeNewKey</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     Be sure to call the superclass&#39;s implementation *if it implements it*.</span>
</span><span class='line'><span class="cm">     NSObject does not implement the method.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">observeValueForKeyPath:</span><span class="n">keyPath</span>
</span><span class='line'>                         <span class="nl">ofObject:</span><span class="n">object</span>
</span><span class='line'>                           <span class="nl">change:</span><span class="n">change</span>
</span><span class='line'>                           <span class="nl">context:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
关于change参数，它是一个字典，有五个常量作为它的键：</p>

<p>NSString <em>const NSKeyValueChangeKindKey;<br/>
NSString </em>const NSKeyValueChangeNewKey;<br/>
NSString <em>const NSKeyValueChangeOldKey;<br/>
NSString </em>const NSKeyValueChangeIndexesKey;<br/>
NSString *const NSKeyValueChangeNotificationIsPriorKey;</p>

<p><strong>NSKeyValueChangeKindKey</strong><br/>
指明了变更的类型，值为“NSKeyValueChange”枚举中的某一个，类型为NSNumber。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeSetting</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeInsertion</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeRemoval</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>   <span class="n">NSKeyValueChangeReplacement</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">NSUInteger</span> <span class="n">NSKeyValueChange</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<strong>NSKeyValueChangeNewKey</strong><br/>
如果 NSKeyValueChangeKindKey的值为 NSKeyValueChangeSetting，并且 NSKeyValueObservingOptionNew选项在注册观察者时也指定了，那么这个键的值就是属性变更后的新值。<br/>
对于 NSKeyValueChangeInsertion或者NSKeyValueChangeReplacement，如果 NSKeyValueObservingOptionNew选项在注册观察者时也指定了，这个键的值是一个数组，其包含了插入或替换的对象。<br/>
<strong>NSKeyValueChangeOldKey</strong><br/>
如果 NSKeyValueChangeKindKey的值为 NSKeyValueChangeSetting，并且 NSKeyValueObservingOptionOld选项在注册观察者时也指定了，那么这个键的值就是属性变更前的旧值。<br/>
对于  NSKeyValueChangeRemoval 或者NSKeyValueChangeReplacement，如果 NSKeyValueObservingOptionOld选项在注册观察者时也指定了，这个键的值是一个数组，其包含了被移除或替换的对象。<br/>
<strong>NSKeyValueChangeIndexesKey</strong><br/>
如果 NSKeyValueChangeKindKey的值为NSKeyValueChangeInsertion, NSKeyValueChangeRemoval, 或者 NSKeyValueChangeReplacement，这个键的值是一个NSIndexSet对象，包含了增加，移除或者替换对象的index。<br/>
<strong>NSKeyValueChangeNotificationIsPriorKey</strong><br/>
如果注册观察者时NSKeyValueObservingOptionPrior选项被指明了，此通知会在变更发生前被发出。其类型为NSNumber，包含的值为YES。我们可以像以下这样区分通知是在改变之前还是之后被触发的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">change</span><span class="p">[</span><span class="n">NSKeyValueChangeNotificationIsPriorKey</span><span class="p">]</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 改变之前</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 改变之后</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>移除观察者</h4>

<p>你可以通过发送<code>removeObserver:forKeyPath:</code>消息来移除观察者，你需要指明观察对象和路径。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">unregisterForChangeNotification</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">observedObject</span> <span class="nl">removeObserver:</span><span class="n">inspector</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
上面的代码将openingBalance属性的观察者inspector移除，移除后观察者再也不会收到<code>observeValueForKeyPath:ofObject:change:context:</code>消息。<br/>
在移除观察者之前，如果context是一个对象的引用，那么必须保持对它的强引用直到观察者被移除。</p>

<h3>KVO Compliance（KVO兼容）</h3>

<p>有两种方法可以保证变更通知被发出。自动发送通知是NSObject提供的，并且一个类中的所有属性都默认支持，只要是符合KVO的。一般情况你使用自动变更通知，你不需要写任何代码。<br/>
人工变更通知需要些额外的代码，但也对通知发送提供了额外的控制。你可以通过重写子类<code>automaticallyNotifiesObserversForKey:</code>方法的方式控制子类一些属性的自动通知。</p>

<h4>Automatic Change Notification（自动通知）</h4>

<p>下面代码中的方法都能导致KVO变更消息发出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Call the accessor method.</span>
</span><span class='line'><span class="p">[</span><span class="n">account</span> <span class="nl">setName:</span><span class="s">@&quot;Savings&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use setValue:forKey:.</span>
</span><span class='line'><span class="p">[</span><span class="n">account</span> <span class="nl">setValue:</span><span class="s">@&quot;Savings&quot;</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use a key path, where &#39;account&#39; is a kvc-compliant property of &#39;document&#39;.</span>
</span><span class='line'><span class="p">[</span><span class="n">document</span> <span class="nl">setValue:</span><span class="s">@&quot;Savings&quot;</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;account.name&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use mutableArrayValueForKey: to retrieve a relationship proxy object.</span>
</span><span class='line'><span class="n">Transaction</span> <span class="o">*</span><span class="n">newTransaction</span> <span class="o">=</span> <span class="o">&lt;</span><span class="err">#</span><span class="n">Create</span> <span class="n">a</span> <span class="n">new</span> <span class="n">transaction</span> <span class="k">for</span> <span class="n">the</span> <span class="n">account</span><span class="err">#</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">transactions</span> <span class="o">=</span> <span class="p">[</span><span class="n">account</span> <span class="nl">mutableArrayValueForKey:</span><span class="s">@&quot;transactions&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">transactions</span> <span class="nl">addObject:</span><span class="n">newTransaction</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Manual Change Notification（手动通知）</h4>

<p>下面的代码为openingBalance属性开启了人工通知，并让父类决定其他属性的通知方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">automaticallyNotifiesObserversForKey:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">theKey</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">automatic</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">theKey</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">automatic</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">automatic</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">automaticallyNotifiesObserversForKey:</span><span class="n">theKey</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">automatic</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>要实现人工观察者通知，你要执行在变更前执行<code>willChangeValueForKey:</code>方法，在变更后执行<code>didChangeValueForKey:</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOpeningBalance:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">theBalance</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_openingBalance</span> <span class="o">=</span> <span class="n">theBalance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
为了使不必要的通知最小化我们应该在变更前先检查一下值是否变了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOpeningBalance:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">theBalance</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">theBalance</span> <span class="o">!=</span> <span class="n">_openingBalance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_openingBalance</span> <span class="o">=</span> <span class="n">theBalance</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果一个操作导致了多个键的变化，你必须嵌套变更通知：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setOpeningBalance:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">theBalance</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;itemChanged&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_openingBalance</span> <span class="o">=</span> <span class="n">theBalance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_itemChanged</span> <span class="o">=</span> <span class="n">_itemChanged</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;itemChanged&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;openingBalance&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在to-many关系操作的情形中，你不仅必须表明key是什么，还要表明变更类型和影响到的索引。变更类型是一个 NSKeyValueChange值，被影响对象的索引是一个 NSIndexSet对象。<br/>
下面的代码示范了在to-many关系transactions对象中的删除操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeTransactionsAtIndexes:</span><span class="p">(</span><span class="n">NSIndexSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexes</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChange:</span><span class="n">NSKeyValueChangeRemoval</span>
</span><span class='line'>        <span class="nl">valuesAtIndexes:</span><span class="n">indexes</span> <span class="nl">forKey:</span><span class="s">@&quot;transactions&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Remove the transaction objects at the specified indexes.</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChange:</span><span class="n">NSKeyValueChangeRemoval</span>
</span><span class='line'>        <span class="nl">valuesAtIndexes:</span><span class="n">indexes</span> <span class="nl">forKey:</span><span class="s">@&quot;transactions&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Registering Dependent Keys（注册依赖的属性）</h3>

<p>有一些属性的值取决于一个或者多个其他对象的属性值，一旦某个被依赖的属性值变了，依赖它的属性的变化也需要被通知。</p>

<h4>To-one Relationships</h4>

<p>要自动触发 to-one关系，有两种方法：重写<code>keyPathsForValuesAffectingValueForKey:</code>方法或者定义名称为<code>keyPathsForValuesAffecting&lt;Key&gt;</code>的方法。</p>

<p>例如一个人的全名是由姓氏和名子组成的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">fullName</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span><span class="n">firstName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
一个观察fullName的程序在firstName或者lastName变化时也应该接收到通知。</p>

<p>一种解决方法是重写<code>keyPathsForValuesAffectingValueForKey:</code>方法来表明fullname属性是依赖于firstname和lastname的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nf">keyPathsForValuesAffectingValueForKey:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSSet</span> <span class="o">*</span><span class="n">keyPaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">keyPathsForValuesAffectingValueForKey:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">key</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;fullName&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">affectingKeys</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;lastName&quot;</span><span class="p">,</span> <span class="s">@&quot;firstName&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">keyPaths</span> <span class="o">=</span> <span class="p">[</span><span class="n">keyPaths</span> <span class="nl">setByAddingObjectsFromArray:</span><span class="n">affectingKeys</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">keyPaths</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
相当于在影响fullName值的keypath中新加了两个key：lastName和firstName，很容易理解。</p>

<p>另一种实现同样结果的方法是实现一个遵循命名方式为<code>keyPathsForValuesAffecting&lt;Key&gt;</code>的类方法，<Key>是依赖于其他值的属性名（首字母大写），用上面代码的例子来重新实现一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nf">keyPathsForValuesAffectingFullName</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObjects:</span><span class="s">@&quot;lastName&quot;</span><span class="p">,</span> <span class="s">@&quot;firstName&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>有时在类别中我们不能添加<code>keyPathsForValuesAffectingValueForKey:</code>方法，因为不能再类别中重写方法，所以这时可以实现<code>keyPathsForValuesAffecting&lt;Key&gt;</code>方法来代替。</p>

<p>注意：你不能在<code>keyPathsForValuesAffectingValueForKey:</code>方法中设立to-many关系的依赖，相反，你必须观察在to-many集合中的每一个对象中相关的属性并通过亲自更新他们的依赖来回应变更。下一节将会讲述对付此情形的策略。</p>

<h4>To-many Relationships</h4>

<p><code>keyPathsForValuesAffectingValueForKey:</code>方法不支持包含to-many关系的keypath。比如，假如你有一个Department类，它有一个针对Employee类的to-many关系（雇员），Employee类有salary属性。你希望Department类有一个totalSalary属性来计算所有员工的薪水，也就是在这个关系中Department的totalSalary依赖于所有Employee的salary属性。你不能通过实现<code>keyPathsForValuesAffectingTotalSalary</code>方法并返回<code>employees.salary</code>。</p>

<p>有两种解决方法：<br/>
1. 你可以用KVO将parent（比如Department）作为所有children（比如Employee）相关属性的观察者。你必须在把child添加或删除到parent时也把parent作为child的观察者添加或删除。在<code>observeValueForKeyPath:ofObject:change:context:</code>方法中我们可以针对被依赖项的变更来更新依赖项的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span> <span class="nf">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="nf">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span> <span class="nf">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">context</span> <span class="o">==</span> <span class="n">totalSalaryContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">updateTotalSalary</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="c1">// deal with other observations and/or invoke super...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">updateTotalSalary</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setTotalSalary:</span><span class="p">[</span><span class="n">self</span> <span class="nl">valueForKeyPath:</span><span class="s">@&quot;employees.@sum.salary&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTotalSalary:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">newTotalSalary</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">totalSalary</span> <span class="o">!=</span> <span class="n">newTotalSalary</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;totalSalary&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_totalSalary</span> <span class="o">=</span> <span class="n">newTotalSalary</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;totalSalary&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nf">totalSalary</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_totalSalary</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>2.如果你在使用Core Data，你可以在应用的notification center中将parent注册为它的 managed object context的观察者，parent应该回应相应的变更通知，这些通知是children以类似KVO的形式发出的。</p>

<p>其实这也是Objective-C中利用Cocoa实现观察者模式的另一种途径：NSNotificationCenter</p>

<h3>调试KVO</h3>

<p>你可以在 lldb 里查看一个被观察对象的所有观察信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">po</span> <span class="p">[</span><span class="n">observedObject</span> <span class="n">observationInfo</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这会打印出有关谁观察谁之类的很多信息。</p>

<p>这个信息的格式不是公开的，我们不能让任何东西依赖它，因为苹果随时都可以改变它。不过这是一个很强大的排错工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装饰者模式]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/10/zhuang-shi-zhe-mo-shi/"/>
    <updated>2014-05-10T09:47:05+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/10/zhuang-shi-zhe-mo-shi</id>
    <content type="html"><![CDATA[<p>装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353405846.png" alt="" /></p>

<!--more-->


<ul>
<li>装饰者和被装饰对象有相同的超类型。</li>
<li>你可以用一个或多个装饰者包装一个对象。</li>
<li>既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）的场合 ,可以用装饰过的对象代替它。</li>
<li><strong>装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的。</strong></li>
<li>对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰
对象。</li>
</ul>


<p><strong>类应该对扩展开放，对修改关闭。</strong></p>

<h2>用配置咖啡饮料做例子</h2>

<p>比如，现在有一个饮料类（Beverage），向饮料中添加不同的配料（蒸奶（Steamed Milk）、豆浆（Soy）、
摩卡（Mocha，也就是巧克力风味）或覆盖奶泡），就会配制出很多种不同的种类的饮料，其价格也随着添加的配料而变化，饮料店需要计算价格，如果用具体子类继承饮料类并考虑到所有组合的话，将是一个“类爆炸”：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353406269.png" alt="" /></p>

<p>更恶心的是，如果某种配料的价格有变化，就必须含有此配料相应的更改一些饮料子类的实现，记住：<strong>类应该对扩展开放，对修改关闭。</strong></p>

<p>应用装饰者模式，就像给对象穿衣服一样一层一层将拓展动态的添加上去，灵活多变有弹性</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353407109.png" alt="" /></p>

<p>下面用Java实现这个例子</p>

<p>Beverage是一个抽象类，有两个方法：getDescrip-tion()及cost（）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Beverage</span> <span class="o">{</span>
</span><span class='line'><span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;Unknown Beverage&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">description</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Beverage很简单。让我们也来实现Condiment（配料）抽象类，也就是装饰者类吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">CondimentDecorator</span> <span class="kd">extends</span> <span class="n">Beverage</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
必须让Condiment Decorator能够取代Beverage，所以将CondimentDecorator扩展自 Beverage 类</p>

<p>现在，已经有了基类，让我们开始开始实现一些饮料吧！先从浓缩咖啡（Espresso）开始。别忘了，我们需要为具体的饮料设置描述，而且还必须实现cost()方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Espresso</span> <span class="kd">extends</span> <span class="n">Beverage</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Espresso</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="n">description</span> <span class="o">=</span> <span class="s">&quot;Espresso&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="mf">1.99</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>其他几种具体的饮料就不写了</p>

<p>如果你回头去看看装饰者模式的类图，将发现我们已经完成了抽象组件（Beverage），有了具体组件（HouseBlend），也有了抽象装饰者（CondimentDecorator）。现在，我们就来实现具体装饰者。先从摩卡下手：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Mocha</span> <span class="kd">extends</span> <span class="n">CondimentDecorator</span> <span class="o">{</span>
</span><span class='line'><span class="n">Beverage</span> <span class="n">beverage</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">Mocha</span><span class="o">(</span><span class="n">Beverage</span> <span class="n">beverage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">beverage</span> <span class="o">=</span> <span class="n">beverage</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">beverage</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;, Mocha&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="k">return</span> <span class="o">.</span><span class="mi">20</span> <span class="o">+</span> <span class="n">beverage</span><span class="o">.</span><span class="na">cost</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>你会发现在装饰者类中，完成了描述和价格的效果添加，也就是完成了拓展</p>

<p>其他几种配料代码就不写了</p>

<p>下面进行测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StarbuzzCoffee</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'><span class="n">Beverage</span> <span class="n">beverage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Espresso</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">beverage</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()</span>
</span><span class='line'><span class="o">+</span> <span class="s">&quot; $&quot;</span> <span class="o">+</span> <span class="n">beverage</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
</span><span class='line'><span class="n">Beverage</span> <span class="n">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DarkRoast</span><span class="o">();</span>
</span><span class='line'><span class="n">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mocha</span><span class="o">(</span><span class="n">beverage2</span><span class="o">);</span>
</span><span class='line'><span class="n">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mocha</span><span class="o">(</span><span class="n">beverage2</span><span class="o">);</span>
</span><span class='line'><span class="n">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Whip</span><span class="o">(</span><span class="n">beverage2</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">beverage2</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()</span>
</span><span class='line'><span class="o">+</span> <span class="s">&quot; $&quot;</span> <span class="o">+</span> <span class="n">beverage2</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
</span><span class='line'><span class="n">Beverage</span> <span class="n">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HouseBlend</span><span class="o">();</span>
</span><span class='line'><span class="n">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Soy</span><span class="o">(</span><span class="n">beverage3</span><span class="o">);</span>
</span><span class='line'><span class="n">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mocha</span><span class="o">(</span><span class="n">beverage3</span><span class="o">);</span>
</span><span class='line'><span class="n">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Whip</span><span class="o">(</span><span class="n">beverage3</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">beverage3</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()</span>
</span><span class='line'><span class="o">+</span> <span class="s">&quot; $&quot;</span> <span class="o">+</span> <span class="n">beverage3</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>输出结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">%</span> <span class="n">java</span> <span class="n">StarbuzzCoffee</span>
</span><span class='line'><span class="n">Espresso</span> <span class="n">$1</span><span class="o">.</span><span class="mi">99</span>
</span><span class='line'><span class="n">Dark</span> <span class="n">Roast</span> <span class="n">Coffee</span><span class="o">,</span> <span class="n">Mocha</span><span class="o">,</span> <span class="n">Mocha</span><span class="o">,</span> <span class="n">Whip</span> <span class="n">$1</span><span class="o">.</span><span class="mi">49</span>
</span><span class='line'><span class="n">House</span> <span class="n">Blend</span> <span class="n">Coffee</span><span class="o">,</span> <span class="n">Soy</span><span class="o">,</span> <span class="n">Mocha</span><span class="o">,</span> <span class="n">Whip</span> <span class="n">$1</span><span class="o">.</span><span class="mi">34</span>
</span><span class='line'><span class="o">%</span>
</span></code></pre></td></tr></table></div></figure>


<p>
果然是一层套一层吧：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353407345.png" alt="" /></p>

<h2>Java中的装饰者</h2>

<p>java.io包内的类太多了，简直是……“排山倒海”。你第一次（还有第二次和第三次）看到这些API发出“哇”的惊叹时，放心，你不是唯一受到惊吓的人。现在，你已经知道装饰者模式，这些I/O的相关类对你来说应该更有意义了，因为其中许多类都是装饰者。下面是一个典型的对象集合，用装饰者来将功能结合起来，以读取文件数据：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353408228.png" alt="" /></p>

<p><code>BufferedInputStream</code>及<code>LineNumberInputStream</code>都扩展自<code>FilterInputStream</code>，而<code>FilterInputStream</code>是一个抽象的装饰类。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353408237.png" alt="" /></p>

<p>你会发现“输出”流的设计方式也是一样的。你可能还会发现Reader/Writer流（作为基于字符数据的输入输出）和输入流/输出流的类相当类似（虽然有一些小差异和不一致之处，但是相当雷同，所以你应该可以了解这些类）。</p>

<p>但是JavaAI/O也引出装饰者模式的一个“缺点”：利用装饰者模式，常常造成设计中有大量的小类，数量实在太多，可能会造成使用此API程序员的困扰。但是，现在你已经了解了装饰者的工作原理，以后当使用别人的大量装饰的API时，就可以很容易地辨别出他们的装饰者类是如何组织的，以方便用包装方式取得想要的行为。</p>

<h2>Objective-C类别与装饰模式</h2>

<p>Objective-C中也可以实现基于继承和接口的装饰者模式，但这里介绍的是另一种实现方法：类别</p>

<p>类别是一个Objective-C的语言功能，通过它可以向类添加行为（方法的接口与实现），而不必进行子类化。通过类别添加的方法对类原有的方法没有不良影响。类别中的方法成为了类的一部分，并可由其子类继承。</p>

<p>我们可以用类别来实现装饰模式，然而这不是一种严格的实现，它实现了模式的意图，但却是一种变体。由装饰器类别添加的行为是编译时绑定的，虽然Objective-C原本支持动态绑定（应该用方法的哪个实现）。而且装饰器类别实际上没有封装被扩展的类的实例。</p>

<p>尽管使用类别来实现这个模式跟原始风格有些偏离，但是实现少量的装饰器的时候，它比真正子类的方式更为轻量、更为容易。</p>

<p>这次我们来装饰一张照片，装饰的方法有很多，比如旋转位移变换，阴影。。。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353408757.png" alt="" /></p>

<p>工程代码可以在<a href="https://github.com/yulingtianxia/Decorator">这里</a>下载</p>

<p>这一方式中有三个类别：UIImage(BaseFilter),UIImage(Transform)和UIImage(Shadow)。从现在起，我把它们分别简称为BaseFilter、Transform和Shadow。BaseFilter定义了几个基本的二维绘图操作，使用当前绘图上下文绘制自己，其他滤镜类别可以使用同样的方法来绘制图像。Transform和Shadow没有继承BaseFilter，但他们属于同一类，因为他们都是UIImage的类别。BaseFilter中定义的方法也能在Transform和Shadow类别中使用，而不必像子类化那样进行继承。</p>

<p>UIImage(BaseFilter)中的方法定义，用户绘制图像，相当于装饰者抽象类，而UIImage则是被装饰的组件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UIImage+BaseFilter.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span> <span class="nl">(BaseFilter)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGContextRef</span><span class="p">)</span> <span class="nf">beginContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">size</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">getImageFromCurrentImageContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">drawAtPoint:</span><span class="n">CGPointZero</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Retrieve the UIImage from the current context</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">imageOut</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">imageOut</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">endContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Transform类别定义了一个<code>imageWithTransform:transform</code>方法，接受一个转换引用，然后把应用于内部的图像引用，并让它把自己画出来，然后返回变换后的图像:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UIImage+Transform.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;UIImage+BaseFilter.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span> <span class="nl">(Transform)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithTransform:</span><span class="p">(</span><span class="n">CGAffineTransform</span><span class="p">)</span><span class="nv">transform</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">beginContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// setup transformation</span>
</span><span class='line'>    <span class="n">CGContextConcatCTM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">transform</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Draw the original image to the context</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">imageOut</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">getImageFromCurrentImageContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">endContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">imageOut</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Shadow类别定义了一个<code>imageWithDropShadow</code>方法，向图像的内部引用添加阴影效果，并返回应用效果之后的最终图像。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UIImage+Shadow.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;UIImage+BaseFilter.h&quot;</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span> <span class="nl">(Shadow)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span> <span class="nf">imageWithDropShadow</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">beginContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// set up shadow</span>
</span><span class='line'>    <span class="n">CGSize</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">CGSizeMake</span> <span class="p">(</span><span class="o">-</span><span class="mi">25</span><span class="p">,</span>  <span class="mi">15</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextSetShadow</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Draw the original image to the context</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span> <span class="n">imageOut</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">getImageFromCurrentImageContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">endContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">imageOut</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
最后在ViewController中加载图像：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">.</span><span class="n">image</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create a transformation</span>
</span><span class='line'>    <span class="n">CGAffineTransform</span> <span class="n">rotateTransform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="o">-</span><span class="n">M_PI</span> <span class="o">/</span> <span class="mf">4.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGAffineTransform</span> <span class="n">translateTransform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="o">-</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">,</span>
</span><span class='line'>                                                                            <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">8.0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGAffineTransform</span> <span class="n">finalTransform</span> <span class="o">=</span> <span class="n">CGAffineTransformConcat</span><span class="p">(</span><span class="n">rotateTransform</span><span class="p">,</span> <span class="n">translateTransform</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UIImage</span><span class="o">*</span> <span class="n">finalImage</span> <span class="o">=</span> <span class="p">[[</span><span class="n">image</span> <span class="nl">imageWithTransform:</span><span class="n">finalTransform</span><span class="p">]</span> <span class="n">imageWithDropShadow</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">imageView</span> <span class="nl">setImage:</span><span class="n">finalImage</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>因为类别只能拓展方法，不能在原有类的基础上添加属性，但是我们依然可以通过下面的方式向类中动态添加属性，来弥补类别的不足：</p>

<p>给UIImage添加一个新的title属性<br/>
具体代码如下：<br/>
<code>UIImage+Title.h</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">UIImage</span><span class="nl">(Title)</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>UIImage+Title.m</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;UIImage+Title.h&quot;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="n">titleKey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">UIImage</span><span class="nl">(Title)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">title</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">titleKey</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">titleKey</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_COPY</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
可以看到关键是用到了runtime的两个函数：<br/>
1. <code>id objc_getAssociatedObject(id object, void *key)</code><br/>
2. <code>void objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy)</code></p>

<p>该函数中第一个参数表示目标对象，第三个参数表示要添加的属性，第四个参数设置objc_AssociationPolicy,它有以下几个选项：<code>OBJC_ASSOCIATION_ASSIGN</code>，<code>OBJC_ASSOCIATION_RETAIN</code>，<code>OBJC_ASSOCIATION_COPY</code>，分别对应我们在声明属性时的<code>assign</code>,<code>retain</code>,<code>copy</code>。<br/>
关于第二个参数，key。因为一个对象可以关联多个新的对像，我们需要一个标志来区分他们。所以这个key就起这样的作用。这里的需要的key的地址，不关心它指向谁。</p>

<p>当我们第二次以新的value调用objc_setAssociatedObject时，如果policy是OBJC_ASSOCIATION_ASSIGN，新的value被关联，对原来旧的value没有任何影响。如果policy是OBJC_ASSOCIATION_RETAIN和OBJC_ASSOCIATION_COPY，新的value被关联，旧的value被release。如果想release原来的value又不关联新的value，，可以用objc_setAssociatedObject直接传一个nil做为value的值。</p>

<p>注意不要使用<code>objc_removeAssociatedObjects</code>，因为它用去掉所有的关联的对象。</p>

<p>参考资料：<br/>
1. 《iOS设计模式解析》<br/>
2. 《HeadFirst设计模式》<br/>
3. <a href="http://fanliugen.com/?p=460">http://fanliugen.com/?p=460</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpriteKit坐标系]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/04/spritekitzuo-biao-xi/"/>
    <updated>2014-05-04T19:36:26+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/04/spritekitzuo-biao-xi</id>
    <content type="html"><![CDATA[<p>前一阵子在用SpriteKit写一个小游戏的时候，因为对坐标系系统不是很熟悉，结果耽误了不少时间，现在将这些SKNode(及其子类)中常用的部分记下来，以利于以后快速查找</p>

<p>本文测试用到的工程代码可以在<a href="https://github.com/yulingtianxia/NodesCoordinates/tree/master">这里</a>下载</p>

<p><strong>一般来说，SpriteKit中所有坐标系都是x轴正方向向右，y轴正方向向上的，后面不再重复</strong></p>

<!--more-->


<h2>SKScene</h2>

<p>虽然是<code>SKNode</code>的子类的子类，但是因为所有<code>SKNode</code>都需要在场景上构建布局，所以比较重要，其原点在左下角，y轴向上，x轴向右；正是因为UIView的原点在左上角，y轴向下，x轴向右，所以在<code>SKScene</code>中判别手势坐标的时候需要将y轴反向：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handlePanFrom:</span><span class="p">(</span><span class="n">UIPanGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">recognizer</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">touchLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">recognizer</span> <span class="nl">locationInView:</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>        <span class="n">touchLocation</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">convertPointFromView:</span><span class="n">touchLocation</span><span class="p">];</span>
</span><span class='line'>        <span class="n">AtomNode</span> <span class="o">*</span><span class="n">touchedNode</span> <span class="o">=</span> <span class="p">(</span><span class="n">AtomNode</span> <span class="o">*</span><span class="p">)[</span><span class="n">self</span> <span class="nl">nodeAtPoint:</span><span class="n">touchLocation</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isAllAtomStatic</span><span class="o">&amp;&amp;</span><span class="p">[</span><span class="n">touchedNode</span><span class="p">.</span><span class="n">name</span> <span class="nl">isEqualToString:</span><span class="n">AtomName</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">touchedAtom</span> <span class="o">=</span> <span class="n">touchedNode</span><span class="p">;</span>
</span><span class='line'>            <span class="n">isPanningAtom</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateChanged</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">translation</span> <span class="o">=</span> <span class="p">[</span><span class="n">recognizer</span> <span class="nl">translationInView:</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>        <span class="n">translation</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">translation</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">translation</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isPanningAtom</span><span class="o">==</span><span class="n">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">touchedAtom</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">touchedAtom</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="o">+</span><span class="n">translation</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">touchedAtom</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">translation</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">recognizer</span> <span class="nl">setTranslation:</span><span class="n">CGPointZero</span> <span class="nl">inView:</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">recognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateEnded</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">isPanningAtom</span><span class="o">==</span><span class="n">YES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGPoint</span> <span class="n">velocity</span> <span class="o">=</span> <span class="p">[</span><span class="n">recognizer</span> <span class="nl">velocityInView:</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>            <span class="n">touchedAtom</span><span class="p">.</span><span class="n">physicsBody</span><span class="p">.</span><span class="n">velocity</span> <span class="o">=</span><span class="n">CGVectorMake</span><span class="p">(</span><span class="n">velocity</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">velocity</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>            <span class="n">isPanningAtom</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>在第一个判断分支中，因为用了<code>convertPointFromView</code>方法，已经将<code>CGPoint</code>从<code>UIView</code>坐标系转为<code>SKScene</code>坐标系，所以不用反转，其余两个分支中的代码均需要反转y轴。</p>

<h2>SKNode</h2>

<p>SKNode的原点在正中央，也就是(0.5,0.5)<br/>
我构建了一个App，分别将被测试的Node放置在场景中央，并用一个黑色的小圆圈代表Node的坐标系的原点<br/>
因为SKNode比较抽象，没填充内容，所以只显示了一个原点：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353411185.png" alt="" /></p>

<p>如果想填充些东西来证明SKNode的坐标系原点的确在其中央，将下面代码注释部分取消注释即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;NodeButton.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">NodeButton</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithName:</span><span class="s">@&quot;SKNode&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SKNode</span> <span class="o">*</span><span class="n">sknode</span> <span class="o">=</span> <span class="p">(</span><span class="n">SKNode</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">SKSpriteNode</span> <span class="o">*</span><span class="n">fill</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SKSpriteNode</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">fill</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fill</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>        <span class="n">fill</span><span class="p">.</span><span class="n">colorBlendFactor</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="c1">//        [sknode addChild:fill];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>SKEmitterNode</h2>

<p>粒子系统比较有趣，它从原点发射大量粒子，不同的粒子系统也会构筑不同的效果，因为它没有边界，还可调节发射粒子的数量方向速度等，这也使得原点在整个粒子系统中的位置有了错觉，但其本质还是(0.5,0.5)，也就是在中心</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353410978.png" alt="" /></p>

<p>这个火苗看起来中心在哪呢？当然在圆圈处！因为粒子是从圆圈处的区域产生的，然后向上发射</p>

<h2>SKLabelNode</h2>

<p>label比较特殊，可能是因为需要现实文字的关系吧，其坐标原点在中下方，但不是(0.5,0)，因为如果文字包含y，p之类的“带尾巴”的字符，那么将会突出十字线下方，可以理解为写英文用的四线本的第三条线？因为字号大小不同或者提子不同，也会影响到原点位置。</p>

<p>知道其原点精确位置对于编程来说意义不大，以后有时间会深究下</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353410886.png" alt="" /></p>

<h2>SKShapeNode</h2>

<p>这个类也很特殊，因为其frame是根据path填充内容来确定的，而原点又是其在父坐标的position处，那么<code>SKShapeNode</code>的原点具体位置在哪也就没意义了，只要按照其position的位置当作原点建立坐标系就好</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">ShapeButton</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithName:</span><span class="s">@&quot;SKShapeNode&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">SKShapeNode</span> <span class="o">*</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">SKShapeNode</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="n">shape</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">CGPathCreateWithRect</span><span class="p">(</span><span class="n">CGRectMake</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="p">,</span><span class="o">-</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">shape</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>下图是我故意画了个正方形使其居中：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353411872.png" alt="" /></p>

<h2>SKSpriteNode</h2>

<p>坐标原点在其frame中心，也就是(0.5,0.5)</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353412174.png" alt="" /></p>

<h2>总结</h2>

<p>其实之所以会出现坐标系原点位置一说，是因为不同类型的Node其frame大小也不一样，而其原点在其frame中的位置也不一样，这就给人一种错觉：有的Node原点在左下角，只暴漏给我们第一象限；有的Node原点在中间，其四个象限都被填充了。。。无论原点在哪，其x轴，y轴方向都是不变的，所以本质都是一样的，只是写代码的时候需要注意，比如如果觉得将一个<code>SKLabelNode</code>的position设置为屏幕中心，则其文字内容就会正好居中，其实那就错了，因为y轴并没有居中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Core Data(2)]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2/"/>
    <updated>2014-05-02T20:17:04+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/02/chu-shi-core-data-2</id>
    <content type="html"><![CDATA[<p>本文内容：</p>

<ul>
<li>自定义NSManagedObject</li>
<li>使用数据模型设计器</li>
<li>探究Core Data在SQLite中的实现</li>
</ul>


<p>推荐先阅读上一篇文章：<a href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/">初识Core Data(1)</a></p>

<p><strong>文章所使用的项目代码可以到<a href="https://github.com/yulingtianxia/MyCDDemo">这里</a>下载</strong></p>

<!--more-->


<h2>自定义NSManagedObject</h2>

<p>在上一篇教程中我们每条数据都是通过<code>NSManagedObject</code>对象装载，通过KVC方式使用<code>valueForKey：</code>方法访问对象属性，但是使用KVC要比使用访问器效率低一点。 只在必要时使用KVC，比如你需要动态选择key或keyPath。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">newEmployee</span> <span class="nl">setValue:</span><span class="err">@”</span><span class="n">Stig</span><span class="err">”</span> <span class="nl">forKey:</span><span class="n">firstName</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">aDepartment</span> <span class="nl">setValue:</span><span class="err">@</span><span class="mi">1000</span> <span class="nl">forKeyPath:</span><span class="n">manager</span><span class="p">.</span><span class="n">salary</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>下面我们将自定义<code>NSManagedObject</code>类，通过对它的继承拓展，使得我们有自己的Event类，并通过访问器方法代替KVC方式来访问对象的属性。<br/>
按CMD+N或者在可视化建模工具下选择菜单中Editor->Create NSManagedObject Subclass：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353399425.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353399917.png" alt="" /></p>

<p>选中需要子类化的Entity（当然我们只有一个Event，自动勾选了）：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353400261.png" alt="" /></p>

<p>最后点击Create，于是Event类就创建好了，可以看到属性timeStamp已经自动生成了，并且实现为<code>@dynamic</code></p>

<p>熟悉Objective-C语法的都知道<code>@synthesize</code>实际的意义就是自动生成属性的setter和getter方法。</p>

<p><code>@dynamic</code>就是要告诉编译器，代码中用<code>@dynamic</code>修饰的属性，其getter和setter方法会在程序运行的时候或者用其他方式动态绑定，以便让编译器通过编译。其主要的作用就是用在<code>NSManagerObject</code>对象的属性声明上，由于此类对象的属性一般是从Core Data的属性中生成的，Core Data框架会在程序运行的时候为此类属性生成getter和setter方法。</p>

<p>好的，下面我们改写以前的代码，这次我们将使用Event类的对象完成以前的任务：</p>

<p>在MasterViewController.m文件中加入<code>#import "Event.h"</code>，然后将<code>insertNewObject:</code>方法替换如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertNewObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSEntityDescription</span> <span class="o">*</span><span class="n">entity</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">fetchRequest</span><span class="p">]</span> <span class="n">entity</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Event</span> <span class="o">*</span><span class="n">newManagedObject</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName:</span><span class="p">[</span><span class="n">entity</span> <span class="n">name</span><span class="p">]</span> <span class="nl">inManagedObjectContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If appropriate, configure the new managed object.</span>
</span><span class='line'>    <span class="c1">// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.</span>
</span><span class='line'><span class="c1">//    [newManagedObject setValue:[NSDate date] forKey:@&quot;timeStamp&quot;];</span>
</span><span class='line'>    <span class="n">newManagedObject</span><span class="p">.</span><span class="n">timeStamp</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Save the context.</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">context</span> <span class="nl">save:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>         <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
嗯，英文注释还告诉我们通常你应该用访问器方法呢，还说但是现在在这用KVC就避免了向模板添加自定义类的需求，真逗啊<br/>
依此类推，更改<code>prepareForSegue: sender:</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareForSegue:</span><span class="p">(</span><span class="n">UIStoryboardSegue</span> <span class="o">*</span><span class="p">)</span><span class="nv">segue</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([[</span><span class="n">segue</span> <span class="n">identifier</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;showDetail&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSIndexPath</span> <span class="o">*</span><span class="n">indexPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">indexPathForSelectedRow</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Event</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">fetchedResultsController</span><span class="p">]</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">segue</span> <span class="n">destinationViewController</span><span class="p">]</span> <span class="nl">setDetailItem:</span><span class="n">object</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>还有<code>configureCell: atIndexPath:</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">configureCell:</span><span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nv">cell</span> <span class="nf">atIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Event</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    cell.textLabel.text = [[object valueForKey:@&quot;timeStamp&quot;] description];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">object</span><span class="p">.</span><span class="n">timeStamp</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
相应地我们也可以针对<code>DetailViewController</code>进行改造：</p>

<p>DetailViewController.h:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="k">@class</span> <span class="nc">Event</span>;
</span><span class='line'><span class="k">@interface</span> <span class="nc">DetailViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">Event</span> <span class="o">*</span><span class="n">detailItem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">detailDescriptionLabel</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>DetailViewController.m:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;DetailViewController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;Event.h&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DetailViewController</span> <span class="p">()</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">configureView</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">DetailViewController</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Managing the detail item</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setDetailItem:</span><span class="p">(</span><span class="n">Event</span> <span class="o">*</span><span class="p">)</span><span class="nv">newDetailItem</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_detailItem</span> <span class="o">!=</span> <span class="n">newDetailItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_detailItem</span> <span class="o">=</span> <span class="n">newDetailItem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Update the view.</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">configureView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">configureView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Update the user interface for the detail item.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">detailItem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//        self.detailDescriptionLabel.text = [[self.detailItem valueForKey:@&quot;timeStamp&quot;] description];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">detailDescriptionLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">detailItem</span><span class="p">.</span><span class="n">timeStamp</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">configureView</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这部分比较简单，就不详细解释了，运行程序，跟以前一样（不截图了）</p>

<p>如果想复用<code>MasterViewController</code>里面那些代码，需要做些大改动，具体可以参看<a href="http://objccn.io/issue-1-1/">更轻量的 View Controllers</a>这篇文章</p>

<h2>使用数据模型设计器</h2>

<p>点击MyCDDemo.xcdatamodeld文件进入数据模型设计器，点击下方的加号（Add Enity），添加一个Enity，将其名字改为Person。然后添加name和sex属性，类型为string，需要注意的是属性名需要首字母小写，而且我们无需像往常给数据库建表一样为其添加ID字段，因为Core Data中你不需要任何类型的唯一标识Id，也不需要处理表连接。Core Data将在后台自动处理。你所需要做的就是定义对象间的关系。Core Data框架将在后台决定如何生成最佳的底层机制。</p>

<p>与实体名一样，属性的命名也有很多的要求和约定。属性名不能以大写字母开头，不能包含空格，一般都是单数。对于Boolean类型属性，你应该遵循Objective-C实例变量的约定,比如指定一个CustomerOrder对象是否已经发货，那么应该命名属性为shipped，而不是isShipped、hasShipped等。</p>

<p>关于Core Data属性类型，我从网上摘抄了一段比较全面的解释：</p>

<ul>
<li><p>Undefined选项值是新创建的属性的默认类型；如果属性类型为undefined，项目将无法通过编译。</p></li>
<li><p>Integer 16/32/64只表示整数，没有小数点。所以如果10除以3，你将会得到3，而余数1会丢失。Integer 16/32/64之间唯一的区别是所表示的数值范围不同。因为Core Data使用符号数，所以起始范围是负数，而不是0。</p>

<ul>
<li><p>Integer 16 数值范围：-32768~32767；</p></li>
<li><p>Integer 32 数值范围：-2147483648~2147483647；</p></li>
<li><p>Integer 64 数值范围：–9223372036854775808~9223372036854775807。</p></li>
</ul>


<p>  标准整型数的最大值和最小值可以在stdint.h中找到。在任何类文件中输入INT32_MAX,选中右击，然后选择Jump To Definition，你将看到许多最大值最小值定义。<strong>实体的属性的类型是Integer 16/32/64，当创建此实体对应的NSManagedObject子类时，属性最终的类型将会是NSNumber</strong>。</p></li>
<li><p>Double和Float可以认为是有小数部分的整数。它们都是基于二进制数值系统，在CPU运算时很可能会发生舍入误差。比如1/5，如果使用十进制数值系统，可以精确表示为0.2.但在二进制数值系统中，只能表示一个大概，在小数部分你会得到大量数字。<strong>所以不要使用Integer、Double、Float表示货币值。</strong>计算精度越高则越加趋于准确值，但内存占用也会越大。一个Float数使用32bit进行存储，一个Double数使用64bit。它们都使用科学计数法进行存储，所以一个数包含尾数和指数部分。</p>

<p>  在iOS中，最大的Float值是340282346638528859811704183484516925440.000000，最小的Float值是340282346638528859811704183484516925440.000000Double和Float都有一个符号位。而Double比Float的数值范围更大。</p>

<p>  当你决定该选择Float还是Double时，想一下你的属性是否真的需要超过Float提供的7位精度，如果不是，你应该选择Float，因为它更加匹配64bit的iPhone 5S底层处理器。除此之外，如果你想增加浮点数的计算速度而精度并没有严格要求，Float也是最佳选择。<strong>实体的属性的类型是Float或Double，当创建此实体对应的NSManagedObject子类时，属性最终的类型将会是NSNumber。</strong></p></li>
<li><p><strong>Decimal（十进制）是处理货币值和其他需要十进制场合下最佳选择</strong>，Decimal提供了优秀的计算精度，也消除了计算过程中的舍入误差。因为CPU的本地数制是二进制，所以CPU在处理十进制数时，开销会多一点。<strong>实体的属性的类型是Decimal，当创建此实体对应的NSManagedObject子类时，属性最终的类型将会是NSDecimalNumber。</strong>当你使用NSDecimalNumber执行计算时(如加减乘除计算)，为了保证计算精度，你只能使用它提供的内建方法。更多关于NSDecimalNumber可参见这里。</p></li>
<li><p>String类型和Objective-C中的NSString类似，用于保存字符数组。当生成实体对应的NSManagedObject子类时，String属性被表示为NSString。</p></li>
<li><p>Boolean数据类型被用于表示YES/NO值。当生成实体对应的NSManagedObject子类时，Boolean数据类型会被表示为NSNumber。所以为了获取布尔值，你需要想NSNumber对象发送boolValue消息。</p></li>
<li><p>Date类型是自解释类型。用来存储日期和时间。<strong>当生成实体对应的NSManagedObject子类时，Date类型会被表示为NSDate。</strong></p></li>
<li><p>Binary Data用来表示照片，音频，或一些BLOB类型数据(&ldquo;Binary Large OBjects&rdquo; such as image and sound data)。<strong>当生成实体对应的NSManagedObject子类时，Binary Data数据类型会被表示为NSData。</strong></p></li>
<li><p>Transformable属性类型用于存储一个Objective-C对象。该属性类型允许你存储任何类的实例，比如你使用Transformable属性表示UIColor。<strong>当生成NSManagedObject子类时，Transformable类型会被表示为id。</strong>对于id对象的保存和解档需要使用一个NSValueTransformer的实例或子类的实例。由该类负责属性值与NSData之间的转换。但这也相当的简单，尤其是当属性值的类型已经实现了NSCoding协议，此时系统会自动提供一个默认的NSValueTransformer实例来完成归档和解档。</p></li>
</ul>


<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353400282.png" alt="" /></p>

<p>选择一个属性，在右侧的Data Model Inspector中可以对属性进行更为详细的设置，而且这些设置项会根据你所设置的属性类型不同而不同，大致分为以下几类：</p>

<ul>
<li>Transient（瞬时）选项表示属性不会存储到持久化存储文件中。Transient通常用在属性的值是由其他属性计算或合成而来（比如fullName属性是根据Persion类实例的firstName和lastName拼接而来）。</li>
<li>Optional（可选）选项表示当前属性的值允许为空。如果将属性指定为Optional，那么即使属性的值为空，实体的NSManagedObject实例也可被保存。如果该值是必选的（不选中Optional则为必选），如果属性值为空，NSManagedObject对象上下文将拒绝保存这个属性值不完整的NSManagedObject对象（当你尝试并保存上下文，你将接收到一个NSError对象）。所有的属性最初的状态都是Optinal。</li>
<li>Indexed选项表示底层的持久化存储文件应该为该属性生成一个索引；如果你使用基于多个属性的查询条件来提取对象，指定此类属性为Indexed，可以大幅提高提取速度。</li>
<li>Reg.Ex是Regular Expression的缩写，主要是用来验证属性值是否匹配特定的模式。此选项只对String类型有效。</li>
<li>Validation可以保证非法数据不被保存进持久化存储文件中。数值属性类型（Integer 16/32/64、Float、Double、Decimal）都有maximum和minimum最大值最小值设定。你也可以对String类型设置最大长度和最小长度。或对Date类型设置日期范围。不过最好的做法是当用户向UITextField中输入数据时就开始验证数据，而非等到向上下文发送save消息才验证数据。</li>
<li>除了Transformable和Binary Data类型以外，Default适用于所有属性类型。它被用来配置属性的默认值。</li>
<li>Allows External Storage允许大尺寸的二进制数据可以保存在持久化存储文件的外部。当你保存如照片，音频或视频时，建议是选中该选项， 这样Core Data就会对大于1MB的数据保存在持久化存储文件的外部。</li>
</ul>


<p>如果你细心的话，会发现无论是属性还是实体等选项，右侧的Data Model Inspector经常会出现User Info一栏。<br/>
在managed object model中很多元素，比如entities, attributes,和 relationships，有一个相关联的用户信息字典。你可以在用户信息字典中以键值对的形式放入你想要的任何信息。这里常用的信息有实体的版本详情，还有fetched property中谓词（predicate）用到的值。</p>

<p>说了一大堆，再添加两个实体吧：Teacher和Student，都继承自Person：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353400755.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353401739.png" alt="" /></p>

<p>点击右下方的Editor Style切换到Graph模式：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353401953.png" alt="" /></p>

<p>选中Teacher，长按Add Attribute会弹出所有的选项（同样你也可以试试长按Add Enity），选择Add Relationship，添加一个关系，命名为students，Type为To Many，目标为Student（一个老师教很多学生）：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353402308.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/14035340227.png" alt="" /></p>

<p>我们再尝试一种添加关系的新方法：把以前在Teacher中建立的students删除，选中Student，按住Ctrl，鼠标拖至Teacher，这样一个双向的关系就建立起来了：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353402879.png" alt="" /></p>

<p>分别编辑双方的关系，Tpye都是To Many：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353402596.png" alt="" /></p>

<p>用上一节中提到的方法，建立这三个新建的Entity的<code>NSManagedObject</code>子类：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/14035340286.png" alt="" /></p>

<p>因为创建顺序的问题，当Student创建的时候还不知道有<code>Teacher</code>类，于是其生成的一些方法将Teacher默认为<code>NSManagedObject</code>类：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreData/CoreData.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Student</span> : <span class="nc">NSManagedObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSNumber</span> <span class="o">*</span> <span class="n">grade</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSSet</span> <span class="o">*</span><span class="n">teachers</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Student</span> <span class="nl">(CoreDataGeneratedAccessors)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addTeachersObject:</span><span class="p">(</span><span class="n">NSManagedObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeTeachersObject:</span><span class="p">(</span><span class="n">NSManagedObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addTeachers:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">values</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeTeachers:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">values</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>而Teacher类创建的时候已经有了<code>Student</code>类，就不会出现上面的问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreData/CoreData.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">Student</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Teacher</span> : <span class="nc">NSManagedObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">course</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSSet</span> <span class="o">*</span><span class="n">students</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Teacher</span> <span class="nl">(CoreDataGeneratedAccessors)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addStudentsObject:</span><span class="p">(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeStudentsObject:</span><span class="p">(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addStudents:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">values</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeStudents:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">values</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>虽然<code>Teacher</code>类认识<code>Student</code>类，因为它已经创建了，但是此时Persion类还没有创建，于是此时<code>Student</code>类和<code>Teacher</code>类继承的依然是<code>NSManagedObject</code>，这不是我们想要的结果。<br/>
解决方法是重新生成下这三个Entity对应的<code>NSManagedObject</code>子类，并覆盖原有的文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreData/CoreData.h&gt;</span>
</span><span class='line'><span class="cp">#import &quot;Person.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">Teacher</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Student</span> : <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSNumber</span> <span class="o">*</span> <span class="n">grade</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSSet</span> <span class="o">*</span><span class="n">teachers</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Student</span> <span class="nl">(CoreDataGeneratedAccessors)</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addTeachersObject:</span><span class="p">(</span><span class="n">Teacher</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeTeachersObject:</span><span class="p">(</span><span class="n">Teacher</span> <span class="o">*</span><span class="p">)</span><span class="nv">value</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addTeachers:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">values</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeTeachers:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">values</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>你会发现多了一个<code>CoreDataGeneratedAccessors</code>类别，这个类别中的方法是Core Data框架根据你在数据模式编辑器中设置的实体关系自动生成的，你不需要实现它们，Core Data会在运行时实现这些方法<br/>
如果你偏要想看看其实现机理，在右下方的代码片段库中选择“Core Data To-Many Relationship Accessors”并拖拽到代码中</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353403195.png" alt="" /></p>

<p>生成的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">add</span><span class="o">&lt;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;</span><span class="nl">Object:</span><span class="p">(</span><span class="o">&lt;</span><span class="err">#</span><span class="n">relationship</span> <span class="n">destination</span> <span class="n">class</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSSet</span> <span class="o">*</span><span class="n">changedObjects</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObject:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="nl">primitiveValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span><span class="p">]</span> <span class="nl">addObject:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">remove</span><span class="o">&lt;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;</span><span class="nl">Object:</span><span class="p">(</span><span class="o">&lt;</span><span class="err">#</span><span class="n">relationship</span> <span class="n">destination</span> <span class="n">class</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSSet</span> <span class="o">*</span><span class="n">changedObjects</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="nl">setWithObject:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="nl">primitiveValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span><span class="p">]</span> <span class="nl">removeObject:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects:</span><span class="n">changedObjects</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">add</span><span class="o">&lt;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="nl">primitiveValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span><span class="p">]</span> <span class="nl">unionSet:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueUnionSetMutation</span> <span class="nl">usingObjects:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">remove</span><span class="o">&lt;</span><span class="err">#</span><span class="n">CapitalizedRelationshipName</span><span class="err">#</span><span class="o">&gt;:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">self</span> <span class="nl">primitiveValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span><span class="p">]</span> <span class="nl">minusSet:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;&lt;#relationshipName#&gt;&quot;</span> <span class="nl">withSetMutation:</span><span class="n">NSKeyValueMinusSetMutation</span> <span class="nl">usingObjects:</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>我们需要将&lt;#Capitalized relationship name#>, &lt;#Relationship destination class#> 和 &lt;#Relationship name#>替换为我们定义的连接名，对照下前面<code>CoreDataGeneratedAccessors</code>类别中的方法名，你就会明白了</p>

<p>同样以前标记为<code>@dynamic</code>的属性，其实现原理如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="o">&lt;</span><span class="err">#</span><span class="n">propertyObjectType</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="o">&lt;</span><span class="err">#</span><span class="n">propertyName</span><span class="err">#</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willAccessValueForKey:</span><span class="s">@&quot;&lt;#propertyName#&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">#</span><span class="n">propertyObjectType</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">primitiveValueForKey:</span><span class="s">@&quot;&lt;#propertyName#&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didAccessValueForKey:</span><span class="s">@&quot;&lt;#propertyName#&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">set</span><span class="o">&lt;</span><span class="err">#</span><span class="n">CapitalizedPropertyName</span><span class="err">#</span><span class="o">&gt;:</span><span class="p">(</span><span class="o">&lt;</span><span class="err">#</span><span class="n">propertyObjectType</span><span class="err">#</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">willChangeValueForKey:</span><span class="s">@&quot;&lt;#propertyName#&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">setPrimitiveValue:</span><span class="n">value</span> <span class="nl">forKey:</span><span class="s">@&quot;&lt;#propertyName#&gt;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">didChangeValueForKey:</span><span class="s">@&quot;&lt;#propertyName#&gt;&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
现在，我们并不需要知道他们的实现方法是如何被动态生成的，估计是用到了block或者delegate。</p>

<h2>探究Core Data在SQLite中的实现</h2>

<p>在上一节中我们创建了<code>Person</code>，<code>Teacher</code>和<code>Student</code>三个Entity和对应的<code>NSManagedObject</code>子类，下面我们需要在代码中对其进行“实战部署”，并观察它们是如何在SQLite数据库中保存的，这样更有利于理解Core Data机制。</p>

<p>为了简单测试，我直接在MasterViewController.m文件中的<code>insertNewObject:</code>方法中加入测试代码（其实关于测试应该利用好Xcode自带的单元测试工具<a href="http://yulingtianxia.com/blog/2014/04/28/iosdan-yuan-ce-shi-%5Bnil%5Dxctest/">XCTest</a>，我这里为了方便操作，用了以前添加数据的<code>insertNewObject:</code>方法，关于工程初始代码的讲解，请看我之前的一篇<a href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/">教程</a>）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">insertNewObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSEntityDescription</span> <span class="o">*</span><span class="n">entity</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">fetchRequest</span><span class="p">]</span> <span class="n">entity</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Event</span> <span class="o">*</span><span class="n">newManagedObject</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName:</span><span class="p">[</span><span class="n">entity</span> <span class="n">name</span><span class="p">]</span> <span class="nl">inManagedObjectContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If appropriate, configure the new managed object.</span>
</span><span class='line'>    <span class="c1">// Normally you should use accessor methods, but using KVC here avoids the need to add a custom class to the template.</span>
</span><span class='line'><span class="c1">//    [newManagedObject setValue:[NSDate date] forKey:@&quot;timeStamp&quot;];</span>
</span><span class='line'>    <span class="n">newManagedObject</span><span class="p">.</span><span class="n">timeStamp</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//新加的测试代码</span>
</span><span class='line'>    <span class="n">Student</span> <span class="o">*</span><span class="n">aStudent</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName:</span><span class="s">@&quot;Student&quot;</span> <span class="nl">inManagedObjectContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="n">aStudent</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;LiLei&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aStudent</span><span class="p">.</span><span class="n">sex</span> <span class="o">=</span> <span class="s">@&quot;male&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aStudent</span><span class="p">.</span><span class="n">grade</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Teacher</span> <span class="o">*</span><span class="n">aTeacher</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName:</span><span class="s">@&quot;Teacher&quot;</span> <span class="nl">inManagedObjectContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="n">aTeacher</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;MissGao&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aTeacher</span><span class="p">.</span><span class="n">sex</span> <span class="o">=</span> <span class="s">@&quot;female&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">aTeacher</span><span class="p">.</span><span class="n">course</span> <span class="o">=</span> <span class="s">@&quot;English&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aTeacher</span> <span class="nl">addStudentsObject:</span><span class="n">aStudent</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Save the context.</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">context</span> <span class="nl">save:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>         <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>         <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>我们建立了一名叫LiLei的一年级男生和一名叫MissGao的教英语的女教师，并将LiLei同学添加到高老师的学生名单中。</p>

<p>运行程序，打开MyCDDemo.sqlite文件，查看表结构：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353403982.png" alt="" /></p>

<p>你会发现虽然Student和Teacher继承Person，但是Person表里面竟然也有grade和course字段</p>

<p>点击程序中的加号来添加一条数据：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353403912.png" alt="" /></p>

<p>查看ZPERSON，Z_3TEACHERS，Z_PRIMARYKEY表内容：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353404264.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353404745.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353405697.png" alt="" /></p>

<p>这次一目了然了：</p>

<p>ZPERSON表存储了子类所有字段数据，其Z_ENT字段标志着这条数据的类型，Z_ENT与类型名Z_NAME的映射关系储存在Z_PRIMARYKEY表中，而Z_3TEACHERS存储的则是ZPERSON表中数据项之间的关系，也就是之前我们建立的学生和老师的对应关系，其原理是将ZPERSON表中的Z_PK字段内容两个一组对应起来，这样就相当于把ZPERSON表中两条数据项关联起来了。之前我们在代码中只将LiLei同学添加到了MissGao老师的学生列表中，但是Core Data已经自动维护起了关系，让MissGao也存在于LiLei的老师列表中。Core Data把底层的数据库封装起来，通过简单的操作让程序员更高校的管理数据，所以SQLite这部分我们只是了解下就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Page build warning]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/02/github-page-build-warning/"/>
    <updated>2014-05-02T13:57:53+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/02/github-page-build-warning</id>
    <content type="html"><![CDATA[<p>几天前博主的GitHub Page闹了些小情绪：</p>

<!--more-->


<p></p>

<blockquote><p>The page build completed successfully, but returned the following warning:</p>

<p>GitHub Pages recently underwent some improvements (<a href="https://github.com/blog/1715-faster-more-awesome-github-pages">https://github.com/blog/1715-faster-more-awesome-github-pages</a>) to make your site faster and more awesome, but we&rsquo;ve noticed that <code>yulingtianxia.com</code> isn&rsquo;t properly configured to take advantage of these new features. While your site will continue to work just fine, updating your domain&rsquo;s configuration offers some additional speed and performance benefits. Instructions on updating your site&rsquo;s IP address can be found at <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records,">https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages#step-2-configure-dns-records,</a> and of course, you can always get in touch with a human at <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#99;&#111;&#109;&#46;">&#115;&#117;&#112;&#x70;&#x6f;&#114;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#x6d;&#x2e;</a> For the more technical minded folks who want to skip the help docs: your site&rsquo;s DNS records are pointed to a deprecated IP address.</p>

<p>For information on troubleshooting Jekyll see:</p>

<p><a href="https://help.github.com/articles/using-jekyll-with-pages#troubleshooting">https://help.github.com/articles/using-jekyll-with-pages#troubleshooting</a></p>

<p>If you have any questions please contact us at <a href="https://github.com/contact.">https://github.com/contact.</a></p></blockquote>

<p>也就是说只是warning而已，程序员根本不理睬的，加载速度慢点就慢点儿呗，可是。。。每次pushGitHub都发一次邮件啊，博主强迫症犯了，决心搞定它。<br/>
GitHub很贴心的给出了整改意见啊，也就是第一个URL：<a href="https://github.com/blog/1715-faster-more-awesome-github-pages  ">https://github.com/blog/1715-faster-more-awesome-github-pages  </a>
简单的说，就是因为我的自定义一级域名需要指向一个可以让GitHub Page加载更快的IP，或者是让我的子域名指向<code>username.github.io</code>(username为GitHub用户名，我的是yulingtianxia)，如果你没有自己的域名，那么根本不会出现warning邮件，因为<code>username.github.io</code>本身已经做了加速优化。<br/>
我在terminal中运行了dig命令：<br/>
<code>dig yulingtianxia.github.io +nostats +nocomments +nocmd</code><br/>
结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; yulingtianxia.github.io +nostats +nocomments +nocmd
</span><span class='line'>;; global options: +cmd
</span><span class='line'>;yulingtianxia.github.io. IN  A
</span><span class='line'>yulingtianxia.github.io. 2684 IN  CNAME   github.map.fastly.net.
</span><span class='line'>github.map.fastly.net.    7   IN  A   103.245.222.133
</span><span class='line'>fastly.net.       12821   IN  NS  ns3.p04.dynect.net.
</span><span class='line'>fastly.net.       12821   IN  NS  ns1.p04.dynect.net.
</span><span class='line'>fastly.net.       12821   IN  NS  ns2.p04.dynect.net.
</span><span class='line'>fastly.net.       12821   IN  NS  ns4.p04.dynect.net.
</span><span class='line'>ns1.p04.dynect.net.   21893   IN  A   208.78.70.4
</span><span class='line'>ns2.p04.dynect.net.   20599   IN  A   204.13.250.4
</span><span class='line'>ns3.p04.dynect.net.   21929   IN  A   208.78.71.4
</span><span class='line'>ns4.p04.dynect.net.   26356   IN  A   204.13.251.4</span></code></pre></td></tr></table></div></figure>


<p>
于是我在我的域名管理后台将我的一级域名<code>yulingtianxia.com</code>指向<code>103.245.222.133</code>，问题解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Core Data(1)]]></title>
    <link href="http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1/"/>
    <updated>2014-05-01T19:58:00+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/05/01/chu-shi-core-data-1</id>
    <content type="html"><![CDATA[<p>本文内容：</p>

<ul>
<li>Core Data概述</li>
<li>新建一个Core Data工程</li>
<li>总结</li>
</ul>


<hr />

<!--more-->


<h2>Core Data概述</h2>

<p>Core Data本身既不是数据库也不是数据库访问框架。相反，Core Data是一个完整的数据模型解决方案。我简单理解为对持久层的封装，使得我们可以通过可视化建立数据模型，简化数据存取。有人会联想到Hibernate，其实Core Data比Hibernate强大得多，它不仅支持SQLite数据库，还能对XML文件、二进制文件、用户自定义文件进行操作。</p>

<p>即使不懂SQL语句，也依然可以使用Core Data。因为Core Data将底层的数据库SQL语句封装成了一套API，并可通过可视化操作来建立数据库的模型和表之间的关系，它甚至在数据变化时会帮你自动处理关系（比如删除了一门课程，所有选这门课程的学生也会自动解除与此门课程的关系），Core Data还能对非法数据进行过滤，还支持对数据操作的Undo/Redo功能。更重要的是，Core Data的<code>NSFetchRequest</code>类可以替代SQL中的Select语句，并提供了更高效的方法将查询结果显示在UITableView中。</p>

<p>iOS 3.0和Mac OS X10.5都支持Core Data，但iOS上不支持XML文件存储。Core Data对读取性能做了大量优化，其中惰性加载（Faulting）就是一个例子，毕竟设备的内存是有限切珍贵的。<br/>
在OSX上可以绑定利用KVO和KVC保持UI项与模型对象或属性之间的连接，无需编写任何代码，通过对象和数组控制器自动从Core Data存储区分批提取<code>NSManagedObject</code>对象。这就像在VS中用.Net构建基于SQLServer的桌面程序。<br/>
苹果公司单独为iOS平台的Core Data引入了<code>NSFetchedResultsController</code>类帮助视图与从持久化存储文件提取的数据之间的交互。它主要是用来充当<code>UITableiView</code>的数据源，负责调整<code>UITableiView</code>行与节（section）的显示数目，以及为各表格行提供内容。</p>

<h2>新建一个Core Data工程</h2>

<p>在Xcode5中，只有Master-Detail Application，Utility Application以及Empty Application支持创建时使用Core Data模板，我们选择带有UITableView的Master-Detail Application吧。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/14035339677.png" alt="" /></p>

<p>一定要勾选Core Data选项，项目名称就叫MyCDDemo吧，嘿嘿</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353396978.png" alt="" /></p>

<p>项目建立后会发现Frameworks中已经有了<code>CoreData.framework</code>一项，并且还多了一个MyCDDemo.xcdatamodeld文件，该文件定义了数据模型结构，你可以使用XCode内置的可视化建模工具进行构建。点开它你会发现左侧有三项：Entities，Fetch Request、Configurations。</p>

<p><strong>Entities</strong></p>

<p>在系统的学习Core Data前，可以简单的将Entity理解为数据库中的一张表，在代码中一个<code>NSEntityDescription</code>类的对象就代表了一个Entity。Entity也像类一样可以继承，如果你有若干个相似的实体，就可以抽离出它们的共有特性作为一个“父实体”，就省去了在多个实体中都指定相同的属性。甚至可以勾选Abstract Entitiy让其成为抽象实体，就像抽象类一样。</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353414584.png" alt="" /></p>

<p>现在已经有了一个现成的实体：Event，也就是在SQLite中有了一张叫做Event的表：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353397403.png" alt="" /></p>

<p>Attributes就相当于一张表的列属性，可以设置其数据类型，默认值，最大最小值等，类似数据库可视化建表。需要注意的是这里的空值是NULL，不等同于OC中的nil，更不等同于0和空字符串@“”。Event实体中已经有了一个叫timeStamp的属性，类型为Date，这是模版自动生成的，暂且别修改它。</p>

<p>Relationships描述了Entity间的关系：多对一，一对一等。当你指定了一个关系后，苹果推荐我们也指定一个反转关系。比如A和B是多对多的关系，那么A指向B的关系Type为To Many，同时设定B指向A的关系Type为To Many。</p>

<p>Fetched Property表示了一种弱的、单向的关系。因为Core Data不支持在persistent store之间建立Relationships，所以Fetched Property可用于建立cross-store关系，还用于建立“松耦合”关系，相似暂时的分组。（a fetched property of a department might be &ldquo;recent hires&rdquo; (employees do not have an inverse to the recent hires relationship)）</p>

<p><strong>Fetch Request</strong></p>

<p>我们使用<code>NSFetchRequest</code>类来描述数据请求，利用数据请求从持久存储（persistent store）中获取对象。经常碰到的情形是你经常需要多次执行同样的请求，或是执行遵循一个给定模式的请求，但是其中包含变量（如查找条件）——这些变量经常由用户提供。例如，在运行程序的时候，你要根据用户需要获取某个作者在用户指定日期后出版的所有出版物。</p>

<p>你可以预定义请求，把它们作为模板存储在被管理对象模型中。预定义的模板在你需要的时候就可以取出使用。通常情况下，我们通过Xcode的data modeling tool工具创建请求模板。模板可以包含变量：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353412465.png" alt="" /></p>

<p><strong>Configurations</strong></p>

<p>配置包含了一个名称和若干个相关的实体。实体的集合是可以重叠的——这就是说，一个实体可以出现在多个配置中。在代码中，我们使用<code>setEntities: forConfiguration:</code>的方法来指定配置。也可以用Xcode的建模工具来指定。要获取某项配置的实体，需要用<code>entitiesForConfiguration:</code>的方法。</p>

<p>一般说来，如果你想把不同的实体存放在不同的存储中去，就可能用到配置。一个持久化存储协调器（persistent store coordinator，你暂且理解为负责数据库连接的东东）只能有一个被管理对象模型（managed object model，也就是把xcdatamodeld文件加载到代码中的内容啦）。所以，默认情况下，和协调器关联的某个存储必须包含同样的实体。要想绕过这个限制，你可以创建一个包含所有实体并集的模型，然后在模型中为每一个你想使用的实体子集创建配置，这样一来，使用这个模型创建协调器，当你需要添加存储（persistent store）时，可根据不同的配置来指定对应的存储属性。当你创建配置的时候，需要记住，不能创建跨存储的关系（cross-store relationships）。</p>

<p>模版已经生成了一个叫Default的配置，但是在程序中并没有用到它（这在之后的内容会阐述）。</p>

<p>在了解了xcdatamodeld类型文件之后，你可能对Core Data如何描述一个数据库有了一定的概念，下一步我们准备阅读模版自动生成的代码，你会体会到xcdatamodeld文件在程序中是如何被加载和使用的。</p>

<p>先看看AppDelegate.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> : <span class="nc">UIResponder</span> <span class="o">&lt;</span><span class="n">UIApplicationDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveContext</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">applicationDocumentsDirectory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
嗯，比平时的程序多出了三个属性嘛，而且后两个属性之前还提到过，这“三剑客“是Core Data中非常重要的三个类：</p>

<ul>
<li>Managed Object Model（管理数据模型）: 你可以将这个东西看作是数据库的轮廓，或者结构。这里包含了各个实体的定义信息，一般来说，你会使用我们刚刚看过的视觉编辑器来操作这个物体，添加属性，建立属性之间的关系等等，当然你也可以使用代码。</li>
<li>Persistent Store Coordinator （持久性数据协调器）： 你可以将这个东西看作是数据库连接库，在这里，你将设置数据存储的名字和位置，以及数据存储的时机。</li>
<li>Managed Object Context （管理数据内容）：你可以将这一部分看作是数据的实际内容，这也是整个数据库中对我们而言最重要的部分（这还用说），基本上，插入数据，查询数据，删除数据的工作都在这里完成。</li>
</ul>


<p>如果你还是不好理解，那么简单的把这“三剑客”理解为：数据定义语言 (DDL)、数据库连接（DBC）、数据操作语言 (DML)在Core Data中的另一种存在吧！</p>

<p>下面该看看AppDelegate.m，了解下“三剑客”实例化的过程：
首先是程序加载完毕的代理方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>    <span class="n">UINavigationController</span> <span class="o">*</span><span class="n">navigationController</span> <span class="o">=</span> <span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MasterViewController</span> <span class="o">*</span><span class="n">controller</span> <span class="o">=</span> <span class="p">(</span><span class="n">MasterViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">navigationController</span><span class="p">.</span><span class="n">topViewController</span><span class="p">;</span>
</span><span class='line'>    <span class="n">controller</span><span class="p">.</span><span class="n">managedObjectContext</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
我们暂且只看<code>controller.managedObjectContext = self.managedObjectContext;</code>这句，调用<code>managedObjectContext</code>的getter方法并赋给程序启动后出现的<code>MasterViewController</code>，那么我们就看一下<code>managedObjectContext</code>的getter方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Returns the managed object context for the application.</span>
</span><span class='line'><span class="c1">// If the context doesn&#39;t already exist, it is created and bound to the persistent store coordinator for the application.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="nf">managedObjectContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_managedObjectContext</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_managedObjectContext</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">coordinator</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">persistentStoreCoordinator</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">coordinator</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_managedObjectContext</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_managedObjectContext</span> <span class="nl">setPersistentStoreCoordinator:</span><span class="n">coordinator</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>嗯，英文注释不错，第一次调用的时候会实例化一个<code>NSManagedObjectContext</code>对象，并使用<code>persistentStoreCoordinator</code>方法返回的<code>NSPersistentStoreCoordinator</code>对象配置上下文，最后返回新实例化的<code>NSManagedObjectContext</code>对象。<br/>
顺藤摸瓜，我们再看看<code>persistentStoreCoordinator</code>的getter：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Returns the persistent store coordinator for the application.</span>
</span><span class='line'><span class="c1">// If the coordinator doesn&#39;t already exist, it is created and the application&#39;s store added to it.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="nf">persistentStoreCoordinator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_persistentStoreCoordinator</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">applicationDocumentsDirectory</span><span class="p">]</span> <span class="nl">URLByAppendingPathComponent:</span><span class="s">@&quot;MyCDDemo.sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel:</span><span class="p">[</span><span class="n">self</span> <span class="n">managedObjectModel</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">_persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="nb">nil</span> <span class="nl">URL:</span><span class="n">storeURL</span> <span class="nl">options:</span><span class="nb">nil</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         Typical reasons for an error here include:</span>
</span><span class='line'><span class="cm">         * The persistent store is not accessible;</span>
</span><span class='line'><span class="cm">         * The schema for the persistent store is incompatible with current managed object model.</span>
</span><span class='line'><span class="cm">         Check the error message to determine what the actual problem was.</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application&#39;s resources directory instead of a writeable directory.</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         If you encounter schema incompatibility errors during development, you can reduce their frequency by:</span>
</span><span class='line'><span class="cm">         * Simply deleting the existing store:</span>
</span><span class='line'><span class="cm">         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         * Performing automatic lightweight migration by passing the following dictionary as the options parameter:</span>
</span><span class='line'><span class="cm">         @{NSMigratePersistentStoresAutomaticallyOption:@YES, NSInferMappingModelAutomaticallyOption:@YES}</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         Lightweight migration will only work for a limited set of schema changes; consult &quot;Core Data Model Versioning and Data Migration Programming Guide&quot; for details.</span>
</span><span class='line'><span class="cm">         </span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
为了访问documents目录中的SQLite存储文件MyCDDemo.sqlite，还定义了一个<code>applicationDocumentsDirectory</code>方法，它的作用是获取程序documents的路径，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Returns the URL to the application&#39;s Documents directory.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">applicationDocumentsDirectory</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">URLsForDirectory:</span><span class="n">NSDocumentDirectory</span> <span class="nl">inDomains:</span><span class="n">NSUserDomainMask</span><span class="p">]</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
MyCDDemo.sqlite文件是在编译MyCDDemo.xcdatamodeld时生成的，同样生成的还有MyCDDemo.momd文件，后面会提到。
<code>NSPersistentStoreCoordinator</code>初始化时需要传入<code>managedObjectModel</code>。<code>NSPersistentStoreCoordinator</code>对象在添加持久存储的时候不仅需要传入存储类型，还有配置，存储文件URL，选项以及错误类型。我们使用sqlite作为存储类型，配置为nil，还记得之前叫做default的配置么？这里我们只有一个持久存储，所以配置一项不需要。如果添加存储的时候出现错误，就会进入if判断，具体处理错误的细节可以看看模版生成的注释。<br/>
既然<code>NSPersistentStoreCoordinator</code>又用到了<code>managedObjectModel</code>，我们再看看<code>managedObjectModel</code>方法吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Returns the managed object model for the application.</span>
</span><span class='line'><span class="c1">// If the model doesn&#39;t already exist, it is created from the application&#39;s model.</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="nf">managedObjectModel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_managedObjectModel</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_managedObjectModel</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">modelURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;MyCDDemo&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_managedObjectModel</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">modelURL</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
依然是跟之前一样的代码风格，这次<code>NSManagedObjectModel</code>类在初始化的时候用到了MyCDDemo.momd文件，前面提到过，当你编译项目时，MyCDDemo.xcdatamodeld数据模型将被编译成MyCDDemo.momd资源，并且保存到app的Bundle目录。</p>

<p>最后，在程序退出时，会调用代理<code>applicationWillTerminate:</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">applicationWillTerminate:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Saves changes in the application&#39;s managed object context before the application terminates.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">saveContext</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它调用了<code>saveContext</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedObjectContext</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">managedObjectContext</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">managedObjectContext</span> <span class="n">hasChanges</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">[</span><span class="n">managedObjectContext</span> <span class="nl">save:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>             <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>             <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>managedObjectContext</code>对象中的数据无论怎么修改，都是发生在内存中的，需要调用<code>save</code>方法来保存到存储文件当中。</p>

<p>按理说接下来应该看看<code>MasterViewController中</code>被传入的<code>managedObjectContext</code>对象是如何使用的，但在这之前，我们先运行下程序，看看这个App有什么功能：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353397837.png" alt="" /></p>

<p>再普通不过的tableview了，点击加号便可添加一条记录，内容为时间戳，回想起之前看的名称为Event的Entity，是不是想起了什么，嘿嘿。再添加了四条记录后，不妨打开sqlite文件查看下，路径为<code>~/Library/Application Support/iPhone Simulator/[OS version]/Applications/[appGUID]/Documents/</code>，目录内包含了三个文件MyCDDemo.sqlite、MyCDDemo.sqlite-shm、MyCDDemo.sqlite-wal。如上文所述，根据AppDelegate.m文件中的<code>persistentStoreCoordinator</code>方法可知，时间戳记录被存储在MyCDDemo.sqlite文件中。我用Navicat Premium将其打开：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/14035339876.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353398727.png" alt="" /></p>

<p>相信你对“三剑客”有了更深的理解，再附上一张图加深下印象：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353388879.png" alt="" /></p>

<p>一个<code>NSManagedObjectModel</code>对象处在<code>NSPersistentStoreCoordinator</code>对象和<code>NSManagedObjectContext</code>对象之间。Core Data根据<code>NSManagedObjectModel</code>对象确定如何将底层的持久化文件中的数据映射为<code>NSManagedObject</code>对象。一个<code>NSManagedObjectModel</code>对象用于表示数据的结构。<code>NSManagedObjectModel</code>对象也被称为对象图(object graph)。你可以简单的理解为：<strong>在数据库sqlite文件中，一张表中的一条数据（table row）就相当于代码中的一个NSManagedObject对象，他们之间的映射是通过<code>NSManagedObjectModel</code>对象完成的</strong></p>

<p>下面让我们进入到<code>MasterViewController</code>中来认识一下这个新出现的<code>NSManagedObject</code>“小弟”</p>

<p>既然数据库中的数据最终显示在了<code>UITableView</code>上，我们撇开<code>MasterViewController</code>中其他的方法，直奔<code>UITableViewDataSource</code>协议中已经实现的那几个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">sections</span><span class="p">]</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSFetchedResultsSectionInfo</span><span class="o">&gt;</span> <span class="n">sectionInfo</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">sections</span><span class="p">][</span><span class="n">section</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">sectionInfo</span> <span class="n">numberOfObjects</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="s">@&quot;Cell&quot;</span> <span class="nl">forIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">configureCell:</span><span class="n">cell</span> <span class="nl">atIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">canEditRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Return NO if you do not want the specified item to be editable.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">commitEditingStyle:</span><span class="p">(</span><span class="n">UITableViewCellEditingStyle</span><span class="p">)</span><span class="nv">editingStyle</span> <span class="nf">forRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">editingStyle</span> <span class="o">==</span> <span class="n">UITableViewCellEditingStyleDelete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">context</span> <span class="nl">deleteObject:</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">context</span> <span class="nl">save:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>             <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>             <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">canMoveRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// The table view should not be re-orderable.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果你对<code>UITableView</code>的使用很有经验，一眼就可看出数据是由<code>fetchedResultsController</code>对象提供的。即使在<code>tableView: cellForRowAtIndexPath:</code>方法中没出现<code>fetchedResultsController</code>，但是在其调用的<code>configureCell: atIndexPath:</code>方法中依然用到了<code>fetchedResultsController</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">configureCell:</span><span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nv">cell</span> <span class="nf">atIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSManagedObject</span> <span class="o">*</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[[</span><span class="n">object</span> <span class="nl">valueForKey:</span><span class="s">@&quot;timeStamp&quot;</span><span class="p">]</span> <span class="n">description</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
嗯看来NSManagedObject对象全都由这个fetchedResultsController提供咯，下面揭开它神秘的面纱：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="nf">fetchedResultsController</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_fetchedResultsController</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequest</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFetchRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Edit the entity name as appropriate.</span>
</span><span class='line'>    <span class="n">NSEntityDescription</span> <span class="o">*</span><span class="n">entity</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSEntityDescription</span> <span class="nl">entityForName:</span><span class="s">@&quot;Event&quot;</span> <span class="nl">inManagedObjectContext:</span><span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">fetchRequest</span> <span class="nl">setEntity:</span><span class="n">entity</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the batch size to a suitable number.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">fetchRequest</span> <span class="nl">setFetchBatchSize:</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Edit the sort key as appropriate.</span>
</span><span class='line'>    <span class="n">NSSortDescriptor</span> <span class="o">*</span><span class="n">sortDescriptor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSSortDescriptor</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithKey:</span><span class="s">@&quot;timeStamp&quot;</span> <span class="nl">ascending:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">sortDescriptor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">fetchRequest</span> <span class="nl">setSortDescriptors:</span><span class="n">sortDescriptors</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Edit the section name key path and cache name if appropriate.</span>
</span><span class='line'>    <span class="c1">// nil for section name key path means &quot;no sections&quot;.</span>
</span><span class='line'>    <span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="n">aFetchedResultsController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFetchedResultsController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFetchRequest:</span><span class="n">fetchRequest</span> <span class="nl">managedObjectContext:</span><span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span> <span class="nl">sectionNameKeyPath:</span><span class="nb">nil</span> <span class="nl">cacheName:</span><span class="s">@&quot;Master&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">aFetchedResultsController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="o">=</span> <span class="n">aFetchedResultsController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">performFetch:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>       <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>       <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. </span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_fetchedResultsController</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>嗯，之前提到过，Core Data在iOS平台使用了<code>NSFetchedResultsController</code>对象来简化对提取结果和表格视图的处理。<code>NSFetchedResultsController</code>对象被惰性创建并只在表格视图数据源方法有需要时才提取数据。你会看到在<code>NSFetchRequest</code>对象的配置中，使用了Event实体，并提供了一个<code>NSSortDescriptor</code>对象以让提取结果按timeStamp进行排序。最后通过<code>NSFetchRequest</code>对象和<code>managedObjectContext</code>（在AppDelegate中传入的<code>NSManagedObjectContext</code>实例）作为参数传入<code>NSFetchedResultsController</code>的初始化方法。（<code>sectionNameKeyPath</code>参数传入nil时表示只有一个section，你会发现<code>NSFetchedResultsController</code>从数据库获取的结果跟<code>UITableView</code>需要的数据格式相同，都通过<code>NSIndexPath</code>地址来获取一条数据的内容）<br/>
<code>NSFetchedResultsController</code>也有它的代理，将<code>MasterViewController</code>设置为其代理，这样在fetched results 发生变化时，<code>MasterViewController</code>中实现的<code>NSFetchedResultsControllerDelegate</code>方法会被调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">controllerWillChangeContent:</span><span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">beginUpdates</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">controller:</span><span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="nf">didChangeSection:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSFetchedResultsSectionInfo</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">sectionInfo</span>
</span><span class='line'>           <span class="nf">atIndex:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">sectionIndex</span> <span class="nf">forChangeType:</span><span class="p">(</span><span class="n">NSFetchedResultsChangeType</span><span class="p">)</span><span class="nv">type</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NSFetchedResultsChangeInsert:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">insertSections:</span><span class="p">[</span><span class="n">NSIndexSet</span> <span class="nl">indexSetWithIndex:</span><span class="n">sectionIndex</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NSFetchedResultsChangeDelete:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">deleteSections:</span><span class="p">[</span><span class="n">NSIndexSet</span> <span class="nl">indexSetWithIndex:</span><span class="n">sectionIndex</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">controller:</span><span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span> <span class="nf">didChangeObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">anObject</span>
</span><span class='line'>       <span class="nf">atIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span> <span class="nf">forChangeType:</span><span class="p">(</span><span class="n">NSFetchedResultsChangeType</span><span class="p">)</span><span class="nv">type</span>
</span><span class='line'>      <span class="nf">newIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">newIndexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UITableView</span> <span class="o">*</span><span class="n">tableView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NSFetchedResultsChangeInsert:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">tableView</span> <span class="nl">insertRowsAtIndexPaths:</span><span class="err">@</span><span class="p">[</span><span class="n">newIndexPath</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NSFetchedResultsChangeDelete:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">tableView</span> <span class="nl">deleteRowsAtIndexPaths:</span><span class="err">@</span><span class="p">[</span><span class="n">indexPath</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NSFetchedResultsChangeUpdate:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span> <span class="nl">configureCell:</span><span class="p">[</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="n">indexPath</span><span class="p">]</span> <span class="nl">atIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NSFetchedResultsChangeMove:</span>
</span><span class='line'>            <span class="p">[</span><span class="n">tableView</span> <span class="nl">deleteRowsAtIndexPaths:</span><span class="err">@</span><span class="p">[</span><span class="n">indexPath</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">tableView</span> <span class="nl">insertRowsAtIndexPaths:</span><span class="err">@</span><span class="p">[</span><span class="n">newIndexPath</span><span class="p">]</span> <span class="nl">withRowAnimation:</span><span class="n">UITableViewRowAnimationFade</span><span class="p">];</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">controllerDidChangeContent:</span><span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="nv">controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">endUpdates</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*</span>
</span><span class='line'><span class="c1">// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. </span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">controllerDidChangeContent:</span><span class="p">(</span><span class="n">NSFetchedResultsController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// In the simplest, most efficient, case, reload the table view.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>相对于之前<code>UITableViewDataSource</code>协议方法对<code>NSFetchedResultsController</code>对象中数据的修改（通过<code>NSManagedObject</code>对象做载体），<code>NSFetchedResultsControllerDelegate</code>协议方法会在察觉到数据修改后被调用，用于产生tableview操作数据后对应的动画效果。</p>

<p>可能你会觉得有些混乱，这里贴上几张图梳理下各个类的关系和结构：</p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353388301.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389167.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353388423.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389646.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353389047.png" alt="" /></p>

<p><img src="http://img41.wal8.com/img41/425047_20140623222918/140353388523.jpg" alt="" /></p>

<p>最后，找到<code>insertNewObject</code>方法，当用户尝试加入一个对象到表视图时，该方法将被调用。接着你将看到如下的处理过程：</p>

<ul>
<li>获得一个<code>NSManagedObjectContext</code>对象；</li>
<li>决定创建新对象的实体；</li>
<li>根据实体名称创建一个新的<code>NSManagedObject</code>对象并将其插入到<code>NSManagedObjectContext</code>对象；</li>
<li>对新创建的<code>NSManagedObject</code>对象设置timeStamp属性值</li>
<li><code>NSManagedObjectContext</code>对象执行保存。</li>
</ul>


<p>当上下文执行保存，新的对象将被写到持久存储区中。这是如此简单！</p>

<p>DetailViewController的内容比较简单，不在叙述，到此结束，新建Core Data的模版工程代码已经解析完毕了。在下一期文章中将会亲手修改代码，探索Core Data更多的使用技巧。</p>

<h2>总结</h2>

<p>Core Data框架基本的5个类：：NSPersistentStoreCoordinator、NSManagedObjectContext、NSManagedObjectModel、NSEntityDescription、NSManagedObject。</p>

<ul>
<li><p>NSPersistentStoreCoordinator持久化存储协调器（简称协调器）：负责从磁盘加载数据和将数据写入磁盘。协调器可以处理多种格式的数据库文件（NSPersistentStore），如二进制文件，XML文件、SQLite文件。你也可以实现自己的数据库文件格式（使用NSAtomicStore和NSIncrementalStore类），理论上你可以实现打开World或Photoshop文件的协调器。</p></li>
<li><p>NSEntityDescription实体描述（简称实体）：实体可以被看做是NSManagedObject对象的“class”。实体定义了一个NSManagedObject对象所拥有的所有属性（NSAttributeDescription）,关系（NSRelationshipDescription），提取属性（NSFetchedPropertyDescription）。</p></li>
<li><p>NSManagedObjectContext托管对象上下文（简称上下文）：上下文是内存中的一块暂存区域。查询对象（使用NSFetchRequest），创建对象，删除对象等操作都是在上下文中进行。在上下文没有保存之前，对数据的任何修改都只记录在暂存区中，不会影响磁盘上的数据。你可以创建多个上下文，但整个程序只能创建一个NSPersstentStoreCoordinator对象。</p></li>
<li><p>NSManagedObject托管对象：Core Data的核心单元。模型对象的数据被持有在NSManagedObject对象中。每一个NSManagedObject对象都对应一个实体（就像每一个对象都有一个类）</p></li>
<li><p>NSManagedObjectModel托管对象模型：NSManagedObjectModel通常被定义在一个.mom文件中，文件中保存了所有实体的定义。NSManagedObjectModel and the NS*Description 类完整定义了Core Data模型应该/可以包含的内容。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS单元测试-XCTest]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/28/iosdan-yuan-ce-shi-xctest/"/>
    <updated>2014-04-28T13:25:12+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/28/iosdan-yuan-ce-shi-xctest</id>
    <content type="html"><![CDATA[<p>第一次接触单元测试还是在SQA课程上，那时我用的是JUnit来对Java程序进行单元测试。如今XCode自带的单元测试工具已经从OCUnit演变到了XCTest，但其本质还是差不多的，其好处在于XCode集成，简单方便</p>

<!--more-->


<p>在XCode5中新建一个工程的时候，会默认带一个用于单元测试的target，其名字为工程名加Test后缀，并且文件名也以Test结尾。你会发现已经有了一个默认的测试用例，其中有三个方法：<code>setUp</code>,<code>tearDown</code>,<code>testExample</code>。其中<code>testExample</code>方法左侧有一个播放按钮，点击它就会对这个方法进行测试，而在整个文件的<code>@implementation</code>那行也有个同样的按钮，点击后会对当前测试用例的所有方法进行测试，也可通过Command＋U快捷键来触发。这个测试用例类没有头文件，因为测试用例不需要给外部暴漏接口。按照苹果官方的文档，建立一个测试用例的过程应该是这样的：<br/>
1. 建立一个<code>XCTestCase</code>的子类
2. 实现测试方法
3. 选择性的定义一些实例变量来存储fixture的状态
4. 通过重写<code>setUp</code>方法选择性的实例化fixture
5. 通过重写<code>tearDown</code>方法来在测试后清除
测试方法没有参数和返回值，用test作为前缀，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">testSomething</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
会自动被<code>XCTest</code>架构识别为测试用例，每个<code>XCTestCase</code>的子类中的<code>defaultTestSuite</code>都是一个<code>XCTestSuite</code>，它包含了这些测试用例。<br/>
测试方法的实现经常包含断言，必须通过验证才能通过测试，举个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">@interface</span> <span class="nc">MathTest</span> : <span class="nc">XCTestCase</span> <span class="p">{</span>
</span><span class='line'> <span class="k">@private</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">f1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">f2</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">testAddition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">@end</span>
</span><span class='line'>
</span><span class='line'> <span class="k">@implementation</span> <span class="nc">MathTest</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">setUp</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>    <span class="n">f1</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">f2</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">testAddition</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>    <span class="n">XCTAssertTrue</span> <span class="p">(</span><span class="n">f1</span> <span class="o">+</span> <span class="n">f2</span> <span class="o">==</span> <span class="mf">5.0</span><span class="p">,</span> <span class="s">@&quot;%f + %f should equal 5.0&quot;</span><span class="p">,</span> <span class="n">f1</span><span class="p">,</span> <span class="n">f2</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
感觉这根JUnit很像的，下面列出所有的断言：<br/>
XCTFail(format…) 生成一个失败的测试；</p>

<p>XCTAssertNil(a1, format&hellip;)为空判断，a1为空时通过，反之不通过；</p>

<p>XCTAssertNotNil(a1, format…)不为空判断，a1不为空时通过，反之不通过；</p>

<p>XCTAssert(expression, format&hellip;)当expression求值为TRUE时通过；</p>

<p>XCTAssertTrue(expression, format&hellip;)当expression求值为TRUE时通过；</p>

<p>XCTAssertFalse(expression, format&hellip;)当expression求值为False时通过；</p>

<p>XCTAssertEqualObjects(a1, a2, format&hellip;)判断相等，[a1 isEqual:a2]值为TRUE时通过，其中一个不为空时，不通过；</p>

<p>XCTAssertNotEqualObjects(a1, a2, format&hellip;)判断不等，[a1 isEqual:a2]值为False时通过，</p>

<p>XCTAssertEqual(a1, a2, format&hellip;)判断相等（当a1和a2是 C语言标量、结构体或联合体时使用,实际测试发现NSString也可以）；</p>

<p>XCTAssertNotEqual(a1, a2, format&hellip;)判断不等（当a1和a2是 C语言标量、结构体或联合体时使用）；</p>

<p>XCTAssertEqualWithAccuracy(a1, a2, accuracy, format&hellip;)判断相等，（double或float类型）提供一个误差范围，当在误差范围（+/-accuracy）以内相等时通过测试；</p>

<p>XCTAssertNotEqualWithAccuracy(a1, a2, accuracy, format&hellip;) 判断不等，（double或float类型）提供一个误差范围，当在误差范围以内不等时通过测试；</p>

<p>XCTAssertThrows(expression, format&hellip;)异常测试，当expression发生异常时通过；反之不通过；（很变态）</p>

<p>XCTAssertThrowsSpecific(expression, specificException, format&hellip;) 异常测试，当expression发生specificException异常时通过；反之发生其他异常或不发生异常均不通过；</p>

<p>XCTAssertThrowsSpecificNamed(expression, specificException, exception_name, format&hellip;)异常测试，当expression发生具体异常、具体异常名称的异常时通过测试，反之不通过；</p>

<p>XCTAssertNoThrow(expression, format…)异常测试，当expression没有发生异常时通过测试；</p>

<p>XCTAssertNoThrowSpecific(expression, specificException, format&hellip;)异常测试，当expression没有发生具体异常、具体异常名称的异常时通过测试，反之不通过；</p>

<p>XCTAssertNoThrowSpecificNamed(expression, specificException, exception_name, format&hellip;)异常测试，当expression没有发生具体异常、具体异常名称的异常时通过测试，反之不通过</p>

<p>关于测试函数执行的顺序：以函数名中test后面的字符大小有关，比如-（void）test001XXX会先于-（void）test002XXX执行；</p>

<p>这里只是Mark下单元测试的基本知识，具体应用的话这里推荐几篇不错的教程：<br/>
<a href="http://objccn.io/issue-1-3/">测试 View Controllers</a><br/>
<a href="http://blog.csdn.net/jymn_chen/article/details/21552941">Xcode 5 单元测试（一）使用XCTest进行单元测试</a><br/>
<a href="http://blog.csdn.net/jymn_chen/article/details/21562869">Xcode 5 单元测试（二）OCMock和GHUnit</a><br/>
可能有的测试工具会用到CocoaPods来管理，给出一篇入门文章：<br/>
<a href="http://blog.csdn.net/mysevenmi/article/details/17878421">iOS中使用cocoaPods管理第三方类库</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在游戏的SKScene中添加Button]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/27/zai-you-xi-de-skscenezhong-tian-jia-button/"/>
    <updated>2014-04-27T13:18:04+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/27/zai-you-xi-de-skscenezhong-tian-jia-button</id>
    <content type="html"><![CDATA[<p>偶然发现<code>SpriteKit</code>中的<code>SKNode</code>也有<code>userInteractionEnabled</code>属性，就像<code>UIKit</code>中的<code>userInteractionEnabled</code>一样，于是我对以前的代码进行重构，发现了在游戏中添加交互button的新的方式（估计很多大神们早就发现了）</p>

<!--more-->


<h2>在SKScene中添加SKNode对象作为Button</h2>

<p>不得不承认，我以前在<code>SKScene</code>中添加一个<code>Button</code>的过程是这样的：</p>

<p><strong>添加一个<code>SKNode</code>（一般都是它的子类：<code>SKLabelNode</code>和<code>SKSpriteNode</code>）属性</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">SKLabelNode</span> <span class="o">*</span><span class="n">button</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKLabelNode</span> <span class="nl">labelNodeWithFontNamed:</span><span class="s">@&quot;Chalkduster&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>设置其填充的内容和放置位置，还有<code>SKNode</code>的<code>name</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Click me&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;button&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">fontSize</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">fontColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKColor</span> <span class="n">purpleColor</span><span class="p">];</span>
</span><span class='line'><span class="n">button</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">addChild:</span><span class="n">button</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>在<code>SKScene</code>重写<code>touchesEnded: withEvent:</code>方法，并在方法中判断触摸到哪个<code>SKNode</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesEnded:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>    <span class="n">UITouch</span> <span class="o">*</span> <span class="n">touch</span> <span class="o">=</span> <span class="p">[</span><span class="n">touches</span> <span class="n">anyObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGPoint</span> <span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">touch</span> <span class="nl">locationInNode:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SKSpriteNode</span> <span class="o">*</span><span class="n">touchedNode</span> <span class="o">=</span> <span class="p">(</span><span class="n">SKSpriteNode</span> <span class="o">*</span><span class="p">)[</span><span class="n">self</span> <span class="nl">nodeAtPoint:</span><span class="n">location</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">touchedNode</span><span class="p">.</span><span class="n">name</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;button&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//TODO:</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
如果某个场景中需要设置很多Button，比如游戏设置界面，那么在<code>touchesEnded: withEvent:</code>方法中就会出现好多if判断，这么多分支，每个分支可能还有很多操作，这样增加了SKScene的体积，使得代码可读性变差，维护也困难</p>

<h2>通过继承来封装自己的Button</h2>

<p><code>UIKit</code>中的<code>userInteractionEnabled</code>大家一定都很熟悉，它默认值是<code>YES</code>，也就是默认接受触摸事件，偶然发现<code>SKNode</code>也有<code>userInteractionEnabled</code>属性，但是默认值是<code>NO</code>，而且<code>SKNode</code>是继承<code>UIResponder</code>的，这么说，我们可以在SKNode中一展拳脚了，不必再麻烦SKScene了<br/>
下面添加一个用于跳转到主菜单场景页面的Button为例：<br/>
<strong>新建一个类，名字叫MainSceneButton，继承<code>SKLabelNode</code>，并构造出时候方法</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithFontNamed:</span><span class="s">@&quot;Chalkduster&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;MENU&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这里碰到一个问题：如果用上面的代码初始化，将会出现 <code>EXC_BAD_ACCESS</code> 错误，问题的解决方法是在超类初始化时用init方法代替，然后再设置字体：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">fontName</span> <span class="o">=</span> <span class="s">@&quot;Chalkduster&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;MENU&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">fontSize</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
至于原因，我也没弄清楚，估计是<code>SKLabelNode</code>的bug吧，因为初始化<code>SKSpriteNode</code>时用<code>initWithTexture: color: size:</code>方法就不会报错<br/>
<strong>在MainSceneButton中重写<code>touchesEnded: withEvent:</code>方法</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">touchesEnded:</span><span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nv">touches</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span><span class="p">{</span>
</span><span class='line'>    <span class="n">SKTransition</span> <span class="o">*</span><span class="n">reveal</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKTransition</span> <span class="nl">flipHorizontalWithDuration:</span><span class="mf">0.5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SKScene</span> <span class="o">*</span> <span class="n">myScene</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MainScene</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSize:</span><span class="n">self</span><span class="p">.</span><span class="n">scene</span><span class="p">.</span><span class="n">size</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">scene</span><span class="p">.</span><span class="n">view</span> <span class="nl">presentScene:</span><span class="n">myScene</span> <span class="nl">transition:</span> <span class="n">reveal</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
MainScene是我的一个SKScene，通过点击MainSceneButton来切换到MainScene<br/>
<strong>最后在某个场景中将button添加上去，跟之前的类似</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MainSceneButton</span> <span class="o">*</span><span class="n">mainScene</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MainSceneButton</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">mainScene</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">addChild:</span><span class="n">mainScene</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>
感觉这样做是不是很像以前继承一个UIView然后封装自己的Custom View呢？给SKScene瘦身的方法还有很多，参照给UIViewController瘦身的方法，我们还可以把其他SKNode也从SKScene中剥离出去，一些用于设置SKNode的方法也会随之剥离到自定义的类中，便于以后维护代码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C交叉引用解决方法]]></title>
    <link href="http://yulingtianxia.com/blog/2014/04/24/objective-cjiao-cha-yin-yong-jie-jue-fang-fa/"/>
    <updated>2014-04-24T20:25:00+08:00</updated>
    <id>http://yulingtianxia.com/blog/2014/04/24/objective-cjiao-cha-yin-yong-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>如果类A的头文件import了B，类B的头文件import了A，这样在编译时有可能产生一种错误：“can not find interface declaration”，这是因为Objective-C不允许交叉引用</p>

<!--more-->


<p>#import是GCC编译器提供的，XCode在编译Objective－C、C和C++程序时都会使用它。#import可保证头文件只被包含一次，而不论此命令实际上在那个文件中出现了多少次。<br/>
在C语言中，程序员通常使用基于#ifdef命令的方案来避免一个文件包含另一个文件，而后者又包含第一个文件的情况。<br/>
@class创建了一个向前引用。就是在告诉编译器：“相信我，以后你会知道这个类到底是什么。但是现在，你只需要知道这些。”<br/>
如果有循环依赖关系，@class也很有用。即A类使用B类，B类也使用A类。如果试图通过#import语句让这两个类互相引用，那么最后就会出现编译错误。但是如果在A.h中使用@class B，在B.h中使用@class A，那么这两个类就可以互相引用了。<br/>
<strong>所以最佳的解决方案是在头文件中使用@class，在.m文件中使用#import</strong></p>
]]></content>
  </entry>
  
</feed>
